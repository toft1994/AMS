
RobotSorter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800200  00000a08  00000a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800232  00800232  00000ace  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ace  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001936  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011c3  00000000  00000000  0000254e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000097b  00000000  00000000  00003711  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  0000408c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000923  00000000  00000000  000042d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000743  00000000  00000000  00004bfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000533e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	49 c1       	rjmp	.+658    	; 0x338 <__vector_41>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	1c c1       	rjmp	.+568    	; 0x2ee <__vector_45>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e0       	ldi	r30, 0x08	; 8
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 33       	cpi	r26, 0x32	; 50
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e3       	ldi	r26, 0x32	; 50
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 33       	cpi	r26, 0x3E	; 62
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	e9 d1       	rcall	.+978    	; 0x4f2 <main>
 120:	71 c4       	rjmp	.+2274   	; 0xa04 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_ZN11ColorSensor9setFilterE6filter>:
	return result;
}

void ColorSensor::setFilter( filter filter_ )
{
	switch ( filter_ )
 124:	61 30       	cpi	r22, 0x01	; 1
 126:	31 f0       	breq	.+12     	; 0x134 <_ZN11ColorSensor9setFilterE6filter+0x10>
 128:	70 f0       	brcs	.+28     	; 0x146 <_ZN11ColorSensor9setFilterE6filter+0x22>
 12a:	62 30       	cpi	r22, 0x02	; 2
 12c:	49 f0       	breq	.+18     	; 0x140 <_ZN11ColorSensor9setFilterE6filter+0x1c>
 12e:	63 30       	cpi	r22, 0x03	; 3
 130:	21 f0       	breq	.+8      	; 0x13a <_ZN11ColorSensor9setFilterE6filter+0x16>
 132:	08 95       	ret
	{
	case redFilter:
		COLORSENSOR_S2_PORT &= ~( COLORSENSOR_S2_PIN );
 134:	42 98       	cbi	0x08, 2	; 8
		COLORSENSOR_S3_PORT &= ~( COLORSENSOR_S3_PIN );
 136:	43 98       	cbi	0x08, 3	; 8
		break;
 138:	08 95       	ret

	case blueFilter:
		COLORSENSOR_S2_PORT &= ~( COLORSENSOR_S2_PIN );
 13a:	42 98       	cbi	0x08, 2	; 8
		COLORSENSOR_S3_PORT |= COLORSENSOR_S3_PIN;
 13c:	43 9a       	sbi	0x08, 3	; 8
		break;
 13e:	08 95       	ret

	case greenFilter:
		COLORSENSOR_S2_PORT |= COLORSENSOR_S2_PIN;
 140:	42 9a       	sbi	0x08, 2	; 8
		COLORSENSOR_S3_PORT |= COLORSENSOR_S3_PIN;
 142:	43 9a       	sbi	0x08, 3	; 8
		break;
 144:	08 95       	ret

	case noFilter:
		COLORSENSOR_S2_PORT |= COLORSENSOR_S2_PIN;
 146:	42 9a       	sbi	0x08, 2	; 8
		COLORSENSOR_S3_PORT &= ~( COLORSENSOR_S3_PIN );
 148:	43 98       	cbi	0x08, 3	; 8
 14a:	08 95       	ret

0000014c <_ZN11ColorSensor8getColorEv>:
	setFilter( noFilter );
	setFrequencyscaling( twentyPercent );
}

color ColorSensor::getColor()
{
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	00 d0       	rcall	.+0      	; 0x156 <_ZN11ColorSensor8getColorEv+0xa>
 156:	00 d0       	rcall	.+0      	; 0x158 <_ZN11ColorSensor8getColorEv+0xc>
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	8c 01       	movw	r16, r24
	color result = error;
	
	volatile uint16_t redpwm = 0U;
 15e:	1a 82       	std	Y+2, r1	; 0x02
 160:	19 82       	std	Y+1, r1	; 0x01
	volatile uint16_t bluepwm = 0U;
 162:	1c 82       	std	Y+4, r1	; 0x04
 164:	1b 82       	std	Y+3, r1	; 0x03
	volatile uint16_t greenpwm = 0U;
 166:	1e 82       	std	Y+6, r1	; 0x06
 168:	1d 82       	std	Y+5, r1	; 0x05

	setFilter( redFilter );
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	db df       	rcall	.-74     	; 0x124 <_ZN11ColorSensor9setFilterE6filter>
	redpwm = frequency_.getPwm();
 16e:	c8 01       	movw	r24, r16
 170:	90 d0       	rcall	.+288    	; 0x292 <_ZN6timer46getPwmEv>
 172:	e5 d2       	rcall	.+1482   	; 0x73e <__fixunssfsi>
 174:	7a 83       	std	Y+2, r23	; 0x02
 176:	69 83       	std	Y+1, r22	; 0x01

	setFilter( blueFilter );
 178:	63 e0       	ldi	r22, 0x03	; 3
 17a:	c8 01       	movw	r24, r16
	bluepwm = frequency_.getPwm();
 17c:	d3 df       	rcall	.-90     	; 0x124 <_ZN11ColorSensor9setFilterE6filter>
 17e:	c8 01       	movw	r24, r16
 180:	88 d0       	rcall	.+272    	; 0x292 <_ZN6timer46getPwmEv>
 182:	dd d2       	rcall	.+1466   	; 0x73e <__fixunssfsi>
 184:	7c 83       	std	Y+4, r23	; 0x04

	setFilter( greenFilter );
 186:	6b 83       	std	Y+3, r22	; 0x03
 188:	62 e0       	ldi	r22, 0x02	; 2
 18a:	c8 01       	movw	r24, r16
 18c:	cb df       	rcall	.-106    	; 0x124 <_ZN11ColorSensor9setFilterE6filter>
	greenpwm = frequency_.getPwm();
 18e:	c8 01       	movw	r24, r16
 190:	80 d0       	rcall	.+256    	; 0x292 <_ZN6timer46getPwmEv>
 192:	d5 d2       	rcall	.+1450   	; 0x73e <__fixunssfsi>
 194:	7e 83       	std	Y+6, r23	; 0x06
 196:	6d 83       	std	Y+5, r22	; 0x05
 198:	29 81       	ldd	r18, Y+1	; 0x01
 19a:	3a 81       	ldd	r19, Y+2	; 0x02

	if ( redpwm > bluepwm && redpwm > greenpwm )
 19c:	8b 81       	ldd	r24, Y+3	; 0x03
 19e:	9c 81       	ldd	r25, Y+4	; 0x04
 1a0:	82 17       	cp	r24, r18
 1a2:	93 07       	cpc	r25, r19
 1a4:	f8 f4       	brcc	.+62     	; 0x1e4 <_ZN11ColorSensor8getColorEv+0x98>
 1a6:	29 81       	ldd	r18, Y+1	; 0x01
 1a8:	3a 81       	ldd	r19, Y+2	; 0x02
 1aa:	8d 81       	ldd	r24, Y+5	; 0x05
 1ac:	9e 81       	ldd	r25, Y+6	; 0x06
 1ae:	82 17       	cp	r24, r18
 1b0:	93 07       	cpc	r25, r19
 1b2:	90 f0       	brcs	.+36     	; 0x1d8 <_ZN11ColorSensor8getColorEv+0x8c>
 1b4:	17 c0       	rjmp	.+46     	; 0x1e4 <_ZN11ColorSensor8getColorEv+0x98>
 1b6:	29 81       	ldd	r18, Y+1	; 0x01
 1b8:	3a 81       	ldd	r19, Y+2	; 0x02
	{
		result = red;
	}
	else if ( bluepwm > redpwm && redpwm > greenpwm )
 1ba:	8d 81       	ldd	r24, Y+5	; 0x05
 1bc:	9e 81       	ldd	r25, Y+6	; 0x06
 1be:	82 17       	cp	r24, r18
 1c0:	93 07       	cpc	r25, r19
 1c2:	60 f0       	brcs	.+24     	; 0x1dc <_ZN11ColorSensor8getColorEv+0x90>
 1c4:	16 c0       	rjmp	.+44     	; 0x1f2 <_ZN11ColorSensor8getColorEv+0xa6>
 1c6:	2d 81       	ldd	r18, Y+5	; 0x05
 1c8:	3e 81       	ldd	r19, Y+6	; 0x06
	{
		result = blue;
	}
	else if ( greenpwm > bluepwm && greenpwm > redpwm )
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	9a 81       	ldd	r25, Y+2	; 0x02
 1ce:	82 17       	cp	r24, r18
 1d0:	93 07       	cpc	r25, r19
 1d2:	30 f4       	brcc	.+12     	; 0x1e0 <_ZN11ColorSensor8getColorEv+0x94>
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	15 c0       	rjmp	.+42     	; 0x202 <_ZN11ColorSensor8getColorEv+0xb6>
	{
		result = green;
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	13 c0       	rjmp	.+38     	; 0x202 <_ZN11ColorSensor8getColorEv+0xb6>
	setFilter( greenFilter );
	greenpwm = frequency_.getPwm();

	if ( redpwm > bluepwm && redpwm > greenpwm )
	{
		result = red;
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	11 c0       	rjmp	.+34     	; 0x202 <_ZN11ColorSensor8getColorEv+0xb6>
	}
	else if ( bluepwm > redpwm && redpwm > greenpwm )
	{
		result = blue;
 1e0:	83 e0       	ldi	r24, 0x03	; 3
 1e2:	0f c0       	rjmp	.+30     	; 0x202 <_ZN11ColorSensor8getColorEv+0xb6>
	setFrequencyscaling( twentyPercent );
}

color ColorSensor::getColor()
{
	color result = error;
 1e4:	2b 81       	ldd	r18, Y+3	; 0x03
 1e6:	3c 81       	ldd	r19, Y+4	; 0x04

	if ( redpwm > bluepwm && redpwm > greenpwm )
	{
		result = red;
	}
	else if ( bluepwm > redpwm && redpwm > greenpwm )
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	9a 81       	ldd	r25, Y+2	; 0x02
 1ec:	82 17       	cp	r24, r18
 1ee:	93 07       	cpc	r25, r19
 1f0:	10 f3       	brcs	.-60     	; 0x1b6 <_ZN11ColorSensor8getColorEv+0x6a>
 1f2:	2d 81       	ldd	r18, Y+5	; 0x05
 1f4:	3e 81       	ldd	r19, Y+6	; 0x06
	{
		result = blue;
	}
	else if ( greenpwm > bluepwm && greenpwm > redpwm )
 1f6:	8b 81       	ldd	r24, Y+3	; 0x03
 1f8:	9c 81       	ldd	r25, Y+4	; 0x04
 1fa:	82 17       	cp	r24, r18
 1fc:	93 07       	cpc	r25, r19
 1fe:	18 f3       	brcs	.-58     	; 0x1c6 <_ZN11ColorSensor8getColorEv+0x7a>
 200:	83 e0       	ldi	r24, 0x03	; 3
 202:	26 96       	adiw	r28, 0x06	; 6
	setFrequencyscaling( twentyPercent );
}

color ColorSensor::getColor()
{
	color result = error;
 204:	0f b6       	in	r0, 0x3f	; 63
	{
		result = green;
	}

	return result;
}
 206:	f8 94       	cli
 208:	de bf       	out	0x3e, r29	; 62
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	cd bf       	out	0x3d, r28	; 61
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	0f 91       	pop	r16
 216:	08 95       	ret

00000218 <_ZN11ColorSensor19setFrequencyscalingE16FrequencyScaling>:
 218:	61 30       	cpi	r22, 0x01	; 1
 21a:	49 f0       	breq	.+18     	; 0x22e <_ZN11ColorSensor19setFrequencyscalingE16FrequencyScaling+0x16>
	}	
}

void ColorSensor::setFrequencyscaling( FrequencyScaling scaling )
{
	switch (scaling)
 21c:	28 f0       	brcs	.+10     	; 0x228 <_ZN11ColorSensor19setFrequencyscalingE16FrequencyScaling+0x10>
 21e:	62 30       	cpi	r22, 0x02	; 2
 220:	49 f0       	breq	.+18     	; 0x234 <_ZN11ColorSensor19setFrequencyscalingE16FrequencyScaling+0x1c>
 222:	63 30       	cpi	r22, 0x03	; 3
 224:	51 f0       	breq	.+20     	; 0x23a <_ZN11ColorSensor19setFrequencyscalingE16FrequencyScaling+0x22>
 226:	08 95       	ret
	{
	case powerDown:
		COLORSENSOR_S0_PORT &= ~( COLORSENSOR_S0_PIN );
 228:	40 98       	cbi	0x08, 0	; 8
		COLORSENSOR_S1_PORT &= ~( COLORSENSOR_S1_PIN );
 22a:	41 98       	cbi	0x08, 1	; 8
		break;
 22c:	08 95       	ret

	case twoPercent:
		COLORSENSOR_S0_PORT &= ~( COLORSENSOR_S0_PIN );
 22e:	40 98       	cbi	0x08, 0	; 8
		COLORSENSOR_S1_PORT |= COLORSENSOR_S1_PIN;
 230:	41 9a       	sbi	0x08, 1	; 8
		break;
 232:	08 95       	ret

	case twentyPercent:
		COLORSENSOR_S0_PORT |= COLORSENSOR_S0_PIN;
 234:	40 9a       	sbi	0x08, 0	; 8
		COLORSENSOR_S1_PORT &= ~( COLORSENSOR_S1_PIN );
 236:	41 98       	cbi	0x08, 1	; 8
		break;
 238:	08 95       	ret

	case hundredPercent:
		COLORSENSOR_S0_PORT |= COLORSENSOR_S0_PIN;
 23a:	40 9a       	sbi	0x08, 0	; 8
		COLORSENSOR_S1_PORT |= COLORSENSOR_S1_PIN;
 23c:	41 9a       	sbi	0x08, 1	; 8
 23e:	08 95       	ret

00000240 <_ZN11ColorSensorC1Ev>:
 */ 

#include "../header/ColorSensor.h"
#include <avr/io.h>

ColorSensor::ColorSensor()
 240:	0f 93       	push	r16
 242:	1f 93       	push	r17
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	1f 92       	push	r1
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
 24e:	8c 01       	movw	r16, r24
 250:	12 d0       	rcall	.+36     	; 0x276 <_ZN6timer4C1Ev>
{
	DDRC = 0xFF;
 252:	8f ef       	ldi	r24, 0xFF	; 255
 254:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x00;
 256:	1a b8       	out	0x0a, r1	; 10
	frequency_ = timer4();
 258:	ce 01       	movw	r24, r28
 25a:	01 96       	adiw	r24, 0x01	; 1
 25c:	0c d0       	rcall	.+24     	; 0x276 <_ZN6timer4C1Ev>

	setFilter( noFilter );
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	c8 01       	movw	r24, r16
 262:	60 df       	rcall	.-320    	; 0x124 <_ZN11ColorSensor9setFilterE6filter>
	setFrequencyscaling( twentyPercent );
 264:	62 e0       	ldi	r22, 0x02	; 2
 266:	c8 01       	movw	r24, r16
 268:	d7 df       	rcall	.-82     	; 0x218 <_ZN11ColorSensor19setFrequencyscalingE16FrequencyScaling>
 26a:	0f 90       	pop	r0
}
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	1f 91       	pop	r17
 272:	0f 91       	pop	r16
 274:	08 95       	ret

00000276 <_ZN6timer4C1Ev>:
//volatile float tick = 0.000064;

timer4::timer4()
{
	// Setup timer to normal mode and pre scaler to 1
	TCCR4A = 0U;
 276:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
	TCCR4B = ( 1 << ICNC4 ) | ( 1 << ICES4 ) | ( 1 << CS40 );
 27a:	81 ec       	ldi	r24, 0xC1	; 193
 27c:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
	TCCR4C = 0U;
 280:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	
	// Clear flags and set counter to zero
	TIFR4 = ( 0 << ICF4 ) | ( 0 << TOV4 );
 284:	19 ba       	out	0x19, r1	; 25
	TCNT4 = 0;        
 286:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
 28a:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>

	// Enable global interrupts
    sei();
 28e:	78 94       	sei
 290:	08 95       	ret

00000292 <_ZN6timer46getPwmEv>:
}

float timer4::getPwm( void )
{
	// Reset all needed values
	first = true;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <first>
	oldValue = 0U;
 298:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <oldValue>
 29c:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <oldValue+0x1>
 2a0:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <oldValue+0x2>
 2a4:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <oldValue+0x3>
	freq = 0U;
 2a8:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <__data_end>
 2ac:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <__data_end+0x1>
 2b0:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <__data_end+0x2>
 2b4:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <__data_end+0x3>
	
	// Enable interrupt and clear pending
	TIFR4 = ( 0 << ICF4 ) | ( 0 << TOV4 );	
 2b8:	19 ba       	out	0x19, r1	; 25
	TIMSK4 = ( 1 << ICIE4 ) | ( 1 << TOIE4 );	
 2ba:	81 e2       	ldi	r24, 0x21	; 33
 2bc:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
	
	// Wait until measurement has been taken
	while ( freq == 0 )
 2c0:	60 91 32 02 	lds	r22, 0x0232	; 0x800232 <__data_end>
 2c4:	70 91 33 02 	lds	r23, 0x0233	; 0x800233 <__data_end+0x1>
 2c8:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <__data_end+0x2>
 2cc:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <__data_end+0x3>
 2d0:	20 e0       	ldi	r18, 0x00	; 0
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	a9 01       	movw	r20, r18
 2d6:	c7 d1       	rcall	.+910    	; 0x666 <__cmpsf2>
 2d8:	88 23       	and	r24, r24
 2da:	91 f3       	breq	.-28     	; 0x2c0 <_ZN6timer46getPwmEv+0x2e>
	{}
	
	return freq;
 2dc:	60 91 32 02 	lds	r22, 0x0232	; 0x800232 <__data_end>
 2e0:	70 91 33 02 	lds	r23, 0x0233	; 0x800233 <__data_end+0x1>
 2e4:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <__data_end+0x2>
 2e8:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <__data_end+0x3>
}
 2ec:	08 95       	ret

000002ee <__vector_45>:

ISR(TIMER4_OVF_vect)
{
 2ee:	1f 92       	push	r1
 2f0:	0f 92       	push	r0
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	8f 93       	push	r24
 2fa:	9f 93       	push	r25
 2fc:	af 93       	push	r26
 2fe:	bf 93       	push	r27
	timeroverflow++;
 300:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <timeroverflow>
 304:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <timeroverflow+0x1>
 308:	a0 91 38 02 	lds	r26, 0x0238	; 0x800238 <timeroverflow+0x2>
 30c:	b0 91 39 02 	lds	r27, 0x0239	; 0x800239 <timeroverflow+0x3>
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	a1 1d       	adc	r26, r1
 314:	b1 1d       	adc	r27, r1
 316:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <timeroverflow>
 31a:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <timeroverflow+0x1>
 31e:	a0 93 38 02 	sts	0x0238, r26	; 0x800238 <timeroverflow+0x2>
 322:	b0 93 39 02 	sts	0x0239, r27	; 0x800239 <timeroverflow+0x3>
}
 326:	bf 91       	pop	r27
 328:	af 91       	pop	r26
 32a:	9f 91       	pop	r25
 32c:	8f 91       	pop	r24
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

00000338 <__vector_41>:

ISR(TIMER4_CAPT_vect, ISR_BLOCK)
{
 338:	1f 92       	push	r1
 33a:	0f 92       	push	r0
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	0f 92       	push	r0
 340:	11 24       	eor	r1, r1
 342:	0b b6       	in	r0, 0x3b	; 59
 344:	0f 92       	push	r0
 346:	cf 92       	push	r12
 348:	df 92       	push	r13
 34a:	ef 92       	push	r14
 34c:	ff 92       	push	r15
 34e:	0f 93       	push	r16
 350:	1f 93       	push	r17
 352:	2f 93       	push	r18
 354:	3f 93       	push	r19
 356:	4f 93       	push	r20
 358:	5f 93       	push	r21
 35a:	6f 93       	push	r22
 35c:	7f 93       	push	r23
 35e:	8f 93       	push	r24
 360:	9f 93       	push	r25
 362:	af 93       	push	r26
 364:	bf 93       	push	r27
 366:	ef 93       	push	r30
 368:	ff 93       	push	r31
	uint16_t readValue = ICR4;
 36a:	60 91 a6 00 	lds	r22, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
 36e:	70 91 a7 00 	lds	r23, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>

	if ( first == true )
 372:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <first>
 376:	88 23       	and	r24, r24
 378:	c1 f0       	breq	.+48     	; 0x3aa <__vector_41+0x72>
	{
		timeroverflow = 0U;
 37a:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <timeroverflow>
 37e:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <timeroverflow+0x1>
 382:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <timeroverflow+0x2>
 386:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <timeroverflow+0x3>
		oldValue = readValue;
 38a:	cb 01       	movw	r24, r22
 38c:	a0 e0       	ldi	r26, 0x00	; 0
 38e:	b0 e0       	ldi	r27, 0x00	; 0
 390:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <oldValue>
 394:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <oldValue+0x1>
 398:	a0 93 3c 02 	sts	0x023C, r26	; 0x80023c <oldValue+0x2>
 39c:	b0 93 3d 02 	sts	0x023D, r27	; 0x80023d <oldValue+0x3>
		first = false;
 3a0:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <first>
		TIFR4 = 1;
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	89 bb       	out	0x19, r24	; 25
		return;
 3a8:	8b c0       	rjmp	.+278    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
	}
	
	// Disable interrupt and clear pending
	TIMSK4 = 0U;	
 3aa:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
	TIFR4 = 0U;		
 3ae:	19 ba       	out	0x19, r1	; 25
			
	uint32_t diff = 0U;

	if ( readValue < oldValue )
 3b0:	cb 01       	movw	r24, r22
 3b2:	a0 e0       	ldi	r26, 0x00	; 0
 3b4:	b0 e0       	ldi	r27, 0x00	; 0
 3b6:	00 91 3a 02 	lds	r16, 0x023A	; 0x80023a <oldValue>
 3ba:	10 91 3b 02 	lds	r17, 0x023B	; 0x80023b <oldValue+0x1>
 3be:	20 91 3c 02 	lds	r18, 0x023C	; 0x80023c <oldValue+0x2>
 3c2:	30 91 3d 02 	lds	r19, 0x023D	; 0x80023d <oldValue+0x3>
 3c6:	80 17       	cp	r24, r16
 3c8:	91 07       	cpc	r25, r17
 3ca:	a2 07       	cpc	r26, r18
 3cc:	b3 07       	cpc	r27, r19
 3ce:	80 f5       	brcc	.+96     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	{
		if ( timeroverflow != 0 )
 3d0:	00 91 36 02 	lds	r16, 0x0236	; 0x800236 <timeroverflow>
 3d4:	10 91 37 02 	lds	r17, 0x0237	; 0x800237 <timeroverflow+0x1>
 3d8:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <timeroverflow+0x2>
 3dc:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <timeroverflow+0x3>
 3e0:	01 2b       	or	r16, r17
 3e2:	02 2b       	or	r16, r18
 3e4:	03 2b       	or	r16, r19
 3e6:	a1 f0       	breq	.+40     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		{
			timeroverflow--;
 3e8:	00 91 36 02 	lds	r16, 0x0236	; 0x800236 <timeroverflow>
 3ec:	10 91 37 02 	lds	r17, 0x0237	; 0x800237 <timeroverflow+0x1>
 3f0:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <timeroverflow+0x2>
 3f4:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <timeroverflow+0x3>
 3f8:	01 50       	subi	r16, 0x01	; 1
 3fa:	11 09       	sbc	r17, r1
 3fc:	21 09       	sbc	r18, r1
 3fe:	31 09       	sbc	r19, r1
 400:	00 93 36 02 	sts	0x0236, r16	; 0x800236 <timeroverflow>
 404:	10 93 37 02 	sts	0x0237, r17	; 0x800237 <timeroverflow+0x1>
 408:	20 93 38 02 	sts	0x0238, r18	; 0x800238 <timeroverflow+0x2>
 40c:	30 93 39 02 	sts	0x0239, r19	; 0x800239 <timeroverflow+0x3>
		}
		diff = ( 0xFFFF - oldValue ) + readValue;
 410:	00 91 3a 02 	lds	r16, 0x023A	; 0x80023a <oldValue>
 414:	10 91 3b 02 	lds	r17, 0x023B	; 0x80023b <oldValue+0x1>
 418:	20 91 3c 02 	lds	r18, 0x023C	; 0x80023c <oldValue+0x2>
 41c:	30 91 3d 02 	lds	r19, 0x023D	; 0x80023d <oldValue+0x3>
 420:	80 1b       	sub	r24, r16
 422:	91 0b       	sbc	r25, r17
 424:	a2 0b       	sbc	r26, r18
 426:	b3 0b       	sbc	r27, r19
 428:	01 97       	sbiw	r24, 0x01	; 1
 42a:	af 4f       	sbci	r26, 0xFF	; 255
 42c:	bf 4f       	sbci	r27, 0xFF	; 255
 42e:	0c c0       	rjmp	.+24     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
	}
	else
	{
		diff = readValue - oldValue;
 430:	00 91 3a 02 	lds	r16, 0x023A	; 0x80023a <oldValue>
 434:	10 91 3b 02 	lds	r17, 0x023B	; 0x80023b <oldValue+0x1>
 438:	20 91 3c 02 	lds	r18, 0x023C	; 0x80023c <oldValue+0x2>
 43c:	30 91 3d 02 	lds	r19, 0x023D	; 0x80023d <oldValue+0x3>
 440:	80 1b       	sub	r24, r16
 442:	91 0b       	sbc	r25, r17
 444:	a2 0b       	sbc	r26, r18
 446:	b3 0b       	sbc	r27, r19
	}
	
	// Add timeroverflow to total diff
	diff += timeroverflow << 16U;
 448:	00 91 36 02 	lds	r16, 0x0236	; 0x800236 <timeroverflow>
 44c:	10 91 37 02 	lds	r17, 0x0237	; 0x800237 <timeroverflow+0x1>
 450:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <timeroverflow+0x2>
 454:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <timeroverflow+0x3>
	
	// Calculate frequency
	freq = 1 / ( (float)diff * tick );
 458:	c0 90 00 02 	lds	r12, 0x0200	; 0x800200 <__data_start>
 45c:	d0 90 01 02 	lds	r13, 0x0201	; 0x800201 <__data_start+0x1>
 460:	e0 90 02 02 	lds	r14, 0x0202	; 0x800202 <__data_start+0x2>
 464:	f0 90 03 02 	lds	r15, 0x0203	; 0x800203 <__data_start+0x3>
 468:	98 01       	movw	r18, r16
 46a:	11 27       	eor	r17, r17
 46c:	00 27       	eor	r16, r16
 46e:	bc 01       	movw	r22, r24
 470:	cd 01       	movw	r24, r26
 472:	60 0f       	add	r22, r16
 474:	71 1f       	adc	r23, r17
 476:	82 1f       	adc	r24, r18
 478:	93 1f       	adc	r25, r19
 47a:	8d d1       	rcall	.+794    	; 0x796 <__floatunsisf>
 47c:	a7 01       	movw	r20, r14
 47e:	96 01       	movw	r18, r12
 480:	3c d2       	rcall	.+1144   	; 0x8fa <__mulsf3>
 482:	9b 01       	movw	r18, r22
 484:	ac 01       	movw	r20, r24
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	70 e0       	ldi	r23, 0x00	; 0
 48a:	80 e8       	ldi	r24, 0x80	; 128
 48c:	9f e3       	ldi	r25, 0x3F	; 63
 48e:	ef d0       	rcall	.+478    	; 0x66e <__divsf3>
 490:	60 93 32 02 	sts	0x0232, r22	; 0x800232 <__data_end>
 494:	70 93 33 02 	sts	0x0233, r23	; 0x800233 <__data_end+0x1>
 498:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <__data_end+0x2>
 49c:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <__data_end+0x3>
	
	// Reset timeroverflow and old value
	timeroverflow = 0U;
 4a0:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <timeroverflow>
 4a4:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <timeroverflow+0x1>
 4a8:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <timeroverflow+0x2>
 4ac:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <timeroverflow+0x3>
	oldValue = 0U;
 4b0:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <oldValue>
 4b4:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <oldValue+0x1>
 4b8:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <oldValue+0x2>
 4bc:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <oldValue+0x3>
 4c0:	ff 91       	pop	r31
 4c2:	ef 91       	pop	r30
 4c4:	bf 91       	pop	r27
 4c6:	af 91       	pop	r26
 4c8:	9f 91       	pop	r25
 4ca:	8f 91       	pop	r24
 4cc:	7f 91       	pop	r23
 4ce:	6f 91       	pop	r22
 4d0:	5f 91       	pop	r21
 4d2:	4f 91       	pop	r20
 4d4:	3f 91       	pop	r19
 4d6:	2f 91       	pop	r18
 4d8:	1f 91       	pop	r17
 4da:	0f 91       	pop	r16
 4dc:	ff 90       	pop	r15
 4de:	ef 90       	pop	r14
 4e0:	df 90       	pop	r13
 4e2:	cf 90       	pop	r12
 4e4:	0f 90       	pop	r0
 4e6:	0b be       	out	0x3b, r0	; 59
 4e8:	0f 90       	pop	r0
 4ea:	0f be       	out	0x3f, r0	; 63
 4ec:	0f 90       	pop	r0
 4ee:	1f 90       	pop	r1
 4f0:	18 95       	reti

000004f2 <main>:
#include <util/delay.h>
#include "ColorSensor/header/ColorSensor.h"
#include "uart.h"

int main(void)
{
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
 4f6:	1f 92       	push	r1
 4f8:	cd b7       	in	r28, 0x3d	; 61
 4fa:	de b7       	in	r29, 0x3e	; 62
	InitUART(UART0,9600,8,'N');
 4fc:	0e e4       	ldi	r16, 0x4E	; 78
 4fe:	28 e0       	ldi	r18, 0x08	; 8
 500:	40 e8       	ldi	r20, 0x80	; 128
 502:	55 e2       	ldi	r21, 0x25	; 37
 504:	60 e0       	ldi	r22, 0x00	; 0
 506:	70 e0       	ldi	r23, 0x00	; 0
 508:	80 ec       	ldi	r24, 0xC0	; 192
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	3f d0       	rcall	.+126    	; 0x58c <_Z8InitUARTjmhc>
	ColorSensor cs = ColorSensor();
 50e:	ce 01       	movw	r24, r28
 510:	01 96       	adiw	r24, 0x01	; 1
 512:	96 de       	rcall	.-724    	; 0x240 <_ZN11ColorSensorC1Ev>

    /* Replace with your application code */
    while (1) 
    {
		color something = cs.getColor();
 514:	ce 01       	movw	r24, r28
 516:	01 96       	adiw	r24, 0x01	; 1
 518:	19 de       	rcall	.-974    	; 0x14c <_ZN11ColorSensor8getColorEv>
		
		if (something == green)
 51a:	81 30       	cpi	r24, 0x01	; 1
 51c:	71 f4       	brne	.+28     	; 0x53a <main+0x48>
		{
			SendString(UART0, "Color is green!");
 51e:	65 e0       	ldi	r22, 0x05	; 5
 520:	72 e0       	ldi	r23, 0x02	; 2
 522:	80 ec       	ldi	r24, 0xC0	; 192
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	8b d0       	rcall	.+278    	; 0x63e <_Z10SendStringjPc>
			SendChar(UART0, '\r');
 528:	6d e0       	ldi	r22, 0x0D	; 13
 52a:	80 ec       	ldi	r24, 0xC0	; 192
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	81 d0       	rcall	.+258    	; 0x632 <_Z8SendCharjc>
			SendChar(UART0, '\n');
 530:	6a e0       	ldi	r22, 0x0A	; 10
 532:	80 ec       	ldi	r24, 0xC0	; 192
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	7d d0       	rcall	.+250    	; 0x632 <_Z8SendCharjc>
 538:	1f c0       	rjmp	.+62     	; 0x578 <main+0x86>
 53a:	82 30       	cpi	r24, 0x02	; 2
		}
		else if (something == blue)
 53c:	71 f4       	brne	.+28     	; 0x55a <main+0x68>
		{
			SendString(UART0, "Color is blue!");
 53e:	65 e1       	ldi	r22, 0x15	; 21
 540:	72 e0       	ldi	r23, 0x02	; 2
 542:	80 ec       	ldi	r24, 0xC0	; 192
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	7b d0       	rcall	.+246    	; 0x63e <_Z10SendStringjPc>
			SendChar(UART0, '\r');
 548:	6d e0       	ldi	r22, 0x0D	; 13
 54a:	80 ec       	ldi	r24, 0xC0	; 192
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	71 d0       	rcall	.+226    	; 0x632 <_Z8SendCharjc>
			SendChar(UART0, '\n');
 550:	6a e0       	ldi	r22, 0x0A	; 10
 552:	80 ec       	ldi	r24, 0xC0	; 192
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	6d d0       	rcall	.+218    	; 0x632 <_Z8SendCharjc>
 558:	0f c0       	rjmp	.+30     	; 0x578 <main+0x86>
		}
		else if (something == red)
 55a:	81 11       	cpse	r24, r1
		{
			SendString(UART0, "Color is red!");
 55c:	0d c0       	rjmp	.+26     	; 0x578 <main+0x86>
 55e:	64 e2       	ldi	r22, 0x24	; 36
 560:	72 e0       	ldi	r23, 0x02	; 2
 562:	80 ec       	ldi	r24, 0xC0	; 192
 564:	90 e0       	ldi	r25, 0x00	; 0
			SendChar(UART0, '\r');
 566:	6b d0       	rcall	.+214    	; 0x63e <_Z10SendStringjPc>
 568:	6d e0       	ldi	r22, 0x0D	; 13
 56a:	80 ec       	ldi	r24, 0xC0	; 192
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	61 d0       	rcall	.+194    	; 0x632 <_Z8SendCharjc>
			SendChar(UART0, '\n');
 570:	6a e0       	ldi	r22, 0x0A	; 10
 572:	80 ec       	ldi	r24, 0xC0	; 192
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	5d d0       	rcall	.+186    	; 0x632 <_Z8SendCharjc>
 578:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 57a:	81 ee       	ldi	r24, 0xE1	; 225
 57c:	94 e0       	ldi	r25, 0x04	; 4
 57e:	21 50       	subi	r18, 0x01	; 1
 580:	80 40       	sbci	r24, 0x00	; 0
 582:	90 40       	sbci	r25, 0x00	; 0
 584:	e1 f7       	brne	.-8      	; 0x57e <main+0x8c>
 586:	00 c0       	rjmp	.+0      	; 0x588 <main+0x96>
 588:	00 00       	nop
 58a:	c4 cf       	rjmp	.-120    	; 0x514 <main+0x22>

0000058c <_Z8InitUARTjmhc>:
 58c:	0f 93       	push	r16
  // Wait for new character received
  while ( (UCSRnA & (1<<7)) == 0 )
  {}                        
  // Then return it
  return UDRn;
}
 58e:	cf 93       	push	r28
 590:	df 93       	push	r29
 592:	ec 01       	movw	r28, r24
 594:	db 01       	movw	r26, r22
 596:	ca 01       	movw	r24, r20
 598:	8c 52       	subi	r24, 0x2C	; 44
 59a:	91 40       	sbci	r25, 0x01	; 1
 59c:	a1 09       	sbc	r26, r1
 59e:	b1 09       	sbc	r27, r1
 5a0:	85 3d       	cpi	r24, 0xD5	; 213
 5a2:	90 4c       	sbci	r25, 0xC0	; 192
 5a4:	a1 40       	sbci	r26, 0x01	; 1
 5a6:	b1 05       	cpc	r27, r1
 5a8:	08 f0       	brcs	.+2      	; 0x5ac <_Z8InitUARTjmhc+0x20>
 5aa:	3f c0       	rjmp	.+126    	; 0x62a <_Z8InitUARTjmhc+0x9e>
 5ac:	25 50       	subi	r18, 0x05	; 5
 5ae:	24 30       	cpi	r18, 0x04	; 4
 5b0:	e0 f5       	brcc	.+120    	; 0x62a <_Z8InitUARTjmhc+0x9e>
 5b2:	80 e2       	ldi	r24, 0x20	; 32
 5b4:	88 83       	st	Y, r24
 5b6:	88 e1       	ldi	r24, 0x18	; 24
 5b8:	89 83       	std	Y+1, r24	; 0x01
 5ba:	22 0f       	add	r18, r18
 5bc:	2a 83       	std	Y+2, r18	; 0x02
 5be:	05 34       	cpi	r16, 0x45	; 69
 5c0:	21 f4       	brne	.+8      	; 0x5ca <_Z8InitUARTjmhc+0x3e>
 5c2:	8a 81       	ldd	r24, Y+2	; 0x02
 5c4:	80 62       	ori	r24, 0x20	; 32
 5c6:	8a 83       	std	Y+2, r24	; 0x02
 5c8:	05 c0       	rjmp	.+10     	; 0x5d4 <_Z8InitUARTjmhc+0x48>
 5ca:	0f 34       	cpi	r16, 0x4F	; 79
 5cc:	19 f4       	brne	.+6      	; 0x5d4 <_Z8InitUARTjmhc+0x48>
 5ce:	8a 81       	ldd	r24, Y+2	; 0x02
 5d0:	80 63       	ori	r24, 0x30	; 48
 5d2:	8a 83       	std	Y+2, r24	; 0x02
 5d4:	db 01       	movw	r26, r22
 5d6:	ca 01       	movw	r24, r20
 5d8:	80 58       	subi	r24, 0x80	; 128
 5da:	9b 47       	sbci	r25, 0x7B	; 123
 5dc:	a1 4e       	sbci	r26, 0xE1	; 225
 5de:	bf 4f       	sbci	r27, 0xFF	; 255
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	aa 1f       	adc	r26, r26
 5e6:	bb 1f       	adc	r27, r27
 5e8:	88 0f       	add	r24, r24
 5ea:	99 1f       	adc	r25, r25
 5ec:	aa 1f       	adc	r26, r26
 5ee:	bb 1f       	adc	r27, r27
 5f0:	88 0f       	add	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	aa 1f       	adc	r26, r26
 5f6:	bb 1f       	adc	r27, r27
 5f8:	44 0f       	add	r20, r20
 5fa:	55 1f       	adc	r21, r21
 5fc:	66 1f       	adc	r22, r22
 5fe:	77 1f       	adc	r23, r23
 600:	44 0f       	add	r20, r20
 602:	55 1f       	adc	r21, r21
 604:	66 1f       	adc	r22, r22
 606:	77 1f       	adc	r23, r23
 608:	9a 01       	movw	r18, r20
 60a:	ab 01       	movw	r20, r22
 60c:	22 0f       	add	r18, r18
 60e:	33 1f       	adc	r19, r19
 610:	44 1f       	adc	r20, r20
 612:	55 1f       	adc	r21, r21
 614:	22 0f       	add	r18, r18
 616:	33 1f       	adc	r19, r19
 618:	44 1f       	adc	r20, r20
 61a:	55 1f       	adc	r21, r21
 61c:	bc 01       	movw	r22, r24
 61e:	cd 01       	movw	r24, r26
 620:	cf d1       	rcall	.+926    	; 0x9c0 <__udivmodsi4>
 622:	21 50       	subi	r18, 0x01	; 1
 624:	31 09       	sbc	r19, r1
 626:	3d 83       	std	Y+5, r19	; 0x05
 628:	2c 83       	std	Y+4, r18	; 0x04
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	0f 91       	pop	r16
 630:	08 95       	ret

00000632 <_Z8SendCharjc>:
Then send the character.
Parameter :
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(unsigned int UART_adr, char Tegn)
{
 632:	fc 01       	movw	r30, r24
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSRnA & (1<<5)) == 0 )
 634:	90 81       	ld	r25, Z
 636:	95 ff       	sbrs	r25, 5
 638:	fd cf       	rjmp	.-6      	; 0x634 <_Z8SendCharjc+0x2>
  {}
  // Then send the character
  UDRn = Tegn;
 63a:	66 83       	std	Z+6, r22	; 0x06
 63c:	08 95       	ret

0000063e <_Z10SendStringjPc>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
 63e:	0f 93       	push	r16
 640:	1f 93       	push	r17
 642:	cf 93       	push	r28
 644:	df 93       	push	r29
 646:	eb 01       	movw	r28, r22
  // Repeat until zero-termination
  while (*Streng != 0)
 648:	68 81       	ld	r22, Y
 64a:	66 23       	and	r22, r22
 64c:	39 f0       	breq	.+14     	; 0x65c <_Z10SendStringjPc+0x1e>
 64e:	8c 01       	movw	r16, r24
 650:	21 96       	adiw	r28, 0x01	; 1
  {
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
 652:	c8 01       	movw	r24, r16
 654:	ee df       	rcall	.-36     	; 0x632 <_Z8SendCharjc>
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
 656:	69 91       	ld	r22, Y+
 658:	61 11       	cpse	r22, r1
 65a:	fb cf       	rjmp	.-10     	; 0x652 <_Z10SendStringjPc+0x14>
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
    // Advance the pointer one step
    Streng++;
  }
}
 65c:	df 91       	pop	r29
 65e:	cf 91       	pop	r28
 660:	1f 91       	pop	r17
 662:	0f 91       	pop	r16
 664:	08 95       	ret

00000666 <__cmpsf2>:
 666:	d4 d0       	rcall	.+424    	; 0x810 <__fp_cmp>
 668:	08 f4       	brcc	.+2      	; 0x66c <__cmpsf2+0x6>
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	08 95       	ret

0000066e <__divsf3>:
 66e:	0c d0       	rcall	.+24     	; 0x688 <__divsf3x>
 670:	0a c1       	rjmp	.+532    	; 0x886 <__fp_round>
 672:	02 d1       	rcall	.+516    	; 0x878 <__fp_pscB>
 674:	40 f0       	brcs	.+16     	; 0x686 <__divsf3+0x18>
 676:	f9 d0       	rcall	.+498    	; 0x86a <__fp_pscA>
 678:	30 f0       	brcs	.+12     	; 0x686 <__divsf3+0x18>
 67a:	21 f4       	brne	.+8      	; 0x684 <__divsf3+0x16>
 67c:	5f 3f       	cpi	r21, 0xFF	; 255
 67e:	19 f0       	breq	.+6      	; 0x686 <__divsf3+0x18>
 680:	eb c0       	rjmp	.+470    	; 0x858 <__fp_inf>
 682:	51 11       	cpse	r21, r1
 684:	34 c1       	rjmp	.+616    	; 0x8ee <__fp_szero>
 686:	ee c0       	rjmp	.+476    	; 0x864 <__fp_nan>

00000688 <__divsf3x>:
 688:	0f d1       	rcall	.+542    	; 0x8a8 <__fp_split3>
 68a:	98 f3       	brcs	.-26     	; 0x672 <__divsf3+0x4>

0000068c <__divsf3_pse>:
 68c:	99 23       	and	r25, r25
 68e:	c9 f3       	breq	.-14     	; 0x682 <__divsf3+0x14>
 690:	55 23       	and	r21, r21
 692:	b1 f3       	breq	.-20     	; 0x680 <__divsf3+0x12>
 694:	95 1b       	sub	r25, r21
 696:	55 0b       	sbc	r21, r21
 698:	bb 27       	eor	r27, r27
 69a:	aa 27       	eor	r26, r26
 69c:	62 17       	cp	r22, r18
 69e:	73 07       	cpc	r23, r19
 6a0:	84 07       	cpc	r24, r20
 6a2:	38 f0       	brcs	.+14     	; 0x6b2 <__divsf3_pse+0x26>
 6a4:	9f 5f       	subi	r25, 0xFF	; 255
 6a6:	5f 4f       	sbci	r21, 0xFF	; 255
 6a8:	22 0f       	add	r18, r18
 6aa:	33 1f       	adc	r19, r19
 6ac:	44 1f       	adc	r20, r20
 6ae:	aa 1f       	adc	r26, r26
 6b0:	a9 f3       	breq	.-22     	; 0x69c <__divsf3_pse+0x10>
 6b2:	33 d0       	rcall	.+102    	; 0x71a <__divsf3_pse+0x8e>
 6b4:	0e 2e       	mov	r0, r30
 6b6:	3a f0       	brmi	.+14     	; 0x6c6 <__divsf3_pse+0x3a>
 6b8:	e0 e8       	ldi	r30, 0x80	; 128
 6ba:	30 d0       	rcall	.+96     	; 0x71c <__divsf3_pse+0x90>
 6bc:	91 50       	subi	r25, 0x01	; 1
 6be:	50 40       	sbci	r21, 0x00	; 0
 6c0:	e6 95       	lsr	r30
 6c2:	00 1c       	adc	r0, r0
 6c4:	ca f7       	brpl	.-14     	; 0x6b8 <__divsf3_pse+0x2c>
 6c6:	29 d0       	rcall	.+82     	; 0x71a <__divsf3_pse+0x8e>
 6c8:	fe 2f       	mov	r31, r30
 6ca:	27 d0       	rcall	.+78     	; 0x71a <__divsf3_pse+0x8e>
 6cc:	66 0f       	add	r22, r22
 6ce:	77 1f       	adc	r23, r23
 6d0:	88 1f       	adc	r24, r24
 6d2:	bb 1f       	adc	r27, r27
 6d4:	26 17       	cp	r18, r22
 6d6:	37 07       	cpc	r19, r23
 6d8:	48 07       	cpc	r20, r24
 6da:	ab 07       	cpc	r26, r27
 6dc:	b0 e8       	ldi	r27, 0x80	; 128
 6de:	09 f0       	breq	.+2      	; 0x6e2 <__divsf3_pse+0x56>
 6e0:	bb 0b       	sbc	r27, r27
 6e2:	80 2d       	mov	r24, r0
 6e4:	bf 01       	movw	r22, r30
 6e6:	ff 27       	eor	r31, r31
 6e8:	93 58       	subi	r25, 0x83	; 131
 6ea:	5f 4f       	sbci	r21, 0xFF	; 255
 6ec:	2a f0       	brmi	.+10     	; 0x6f8 <__divsf3_pse+0x6c>
 6ee:	9e 3f       	cpi	r25, 0xFE	; 254
 6f0:	51 05       	cpc	r21, r1
 6f2:	68 f0       	brcs	.+26     	; 0x70e <__divsf3_pse+0x82>
 6f4:	b1 c0       	rjmp	.+354    	; 0x858 <__fp_inf>
 6f6:	fb c0       	rjmp	.+502    	; 0x8ee <__fp_szero>
 6f8:	5f 3f       	cpi	r21, 0xFF	; 255
 6fa:	ec f3       	brlt	.-6      	; 0x6f6 <__divsf3_pse+0x6a>
 6fc:	98 3e       	cpi	r25, 0xE8	; 232
 6fe:	dc f3       	brlt	.-10     	; 0x6f6 <__divsf3_pse+0x6a>
 700:	86 95       	lsr	r24
 702:	77 95       	ror	r23
 704:	67 95       	ror	r22
 706:	b7 95       	ror	r27
 708:	f7 95       	ror	r31
 70a:	9f 5f       	subi	r25, 0xFF	; 255
 70c:	c9 f7       	brne	.-14     	; 0x700 <__divsf3_pse+0x74>
 70e:	88 0f       	add	r24, r24
 710:	91 1d       	adc	r25, r1
 712:	96 95       	lsr	r25
 714:	87 95       	ror	r24
 716:	97 f9       	bld	r25, 7
 718:	08 95       	ret
 71a:	e1 e0       	ldi	r30, 0x01	; 1
 71c:	66 0f       	add	r22, r22
 71e:	77 1f       	adc	r23, r23
 720:	88 1f       	adc	r24, r24
 722:	bb 1f       	adc	r27, r27
 724:	62 17       	cp	r22, r18
 726:	73 07       	cpc	r23, r19
 728:	84 07       	cpc	r24, r20
 72a:	ba 07       	cpc	r27, r26
 72c:	20 f0       	brcs	.+8      	; 0x736 <__divsf3_pse+0xaa>
 72e:	62 1b       	sub	r22, r18
 730:	73 0b       	sbc	r23, r19
 732:	84 0b       	sbc	r24, r20
 734:	ba 0b       	sbc	r27, r26
 736:	ee 1f       	adc	r30, r30
 738:	88 f7       	brcc	.-30     	; 0x71c <__divsf3_pse+0x90>
 73a:	e0 95       	com	r30
 73c:	08 95       	ret

0000073e <__fixunssfsi>:
 73e:	bc d0       	rcall	.+376    	; 0x8b8 <__fp_splitA>
 740:	88 f0       	brcs	.+34     	; 0x764 <__fixunssfsi+0x26>
 742:	9f 57       	subi	r25, 0x7F	; 127
 744:	90 f0       	brcs	.+36     	; 0x76a <__fixunssfsi+0x2c>
 746:	b9 2f       	mov	r27, r25
 748:	99 27       	eor	r25, r25
 74a:	b7 51       	subi	r27, 0x17	; 23
 74c:	a0 f0       	brcs	.+40     	; 0x776 <__fixunssfsi+0x38>
 74e:	d1 f0       	breq	.+52     	; 0x784 <__fixunssfsi+0x46>
 750:	66 0f       	add	r22, r22
 752:	77 1f       	adc	r23, r23
 754:	88 1f       	adc	r24, r24
 756:	99 1f       	adc	r25, r25
 758:	1a f0       	brmi	.+6      	; 0x760 <__fixunssfsi+0x22>
 75a:	ba 95       	dec	r27
 75c:	c9 f7       	brne	.-14     	; 0x750 <__fixunssfsi+0x12>
 75e:	12 c0       	rjmp	.+36     	; 0x784 <__fixunssfsi+0x46>
 760:	b1 30       	cpi	r27, 0x01	; 1
 762:	81 f0       	breq	.+32     	; 0x784 <__fixunssfsi+0x46>
 764:	c3 d0       	rcall	.+390    	; 0x8ec <__fp_zero>
 766:	b1 e0       	ldi	r27, 0x01	; 1
 768:	08 95       	ret
 76a:	c0 c0       	rjmp	.+384    	; 0x8ec <__fp_zero>
 76c:	67 2f       	mov	r22, r23
 76e:	78 2f       	mov	r23, r24
 770:	88 27       	eor	r24, r24
 772:	b8 5f       	subi	r27, 0xF8	; 248
 774:	39 f0       	breq	.+14     	; 0x784 <__fixunssfsi+0x46>
 776:	b9 3f       	cpi	r27, 0xF9	; 249
 778:	cc f3       	brlt	.-14     	; 0x76c <__fixunssfsi+0x2e>
 77a:	86 95       	lsr	r24
 77c:	77 95       	ror	r23
 77e:	67 95       	ror	r22
 780:	b3 95       	inc	r27
 782:	d9 f7       	brne	.-10     	; 0x77a <__fixunssfsi+0x3c>
 784:	3e f4       	brtc	.+14     	; 0x794 <__fixunssfsi+0x56>
 786:	90 95       	com	r25
 788:	80 95       	com	r24
 78a:	70 95       	com	r23
 78c:	61 95       	neg	r22
 78e:	7f 4f       	sbci	r23, 0xFF	; 255
 790:	8f 4f       	sbci	r24, 0xFF	; 255
 792:	9f 4f       	sbci	r25, 0xFF	; 255
 794:	08 95       	ret

00000796 <__floatunsisf>:
 796:	e8 94       	clt
 798:	09 c0       	rjmp	.+18     	; 0x7ac <__floatsisf+0x12>

0000079a <__floatsisf>:
 79a:	97 fb       	bst	r25, 7
 79c:	3e f4       	brtc	.+14     	; 0x7ac <__floatsisf+0x12>
 79e:	90 95       	com	r25
 7a0:	80 95       	com	r24
 7a2:	70 95       	com	r23
 7a4:	61 95       	neg	r22
 7a6:	7f 4f       	sbci	r23, 0xFF	; 255
 7a8:	8f 4f       	sbci	r24, 0xFF	; 255
 7aa:	9f 4f       	sbci	r25, 0xFF	; 255
 7ac:	99 23       	and	r25, r25
 7ae:	a9 f0       	breq	.+42     	; 0x7da <__floatsisf+0x40>
 7b0:	f9 2f       	mov	r31, r25
 7b2:	96 e9       	ldi	r25, 0x96	; 150
 7b4:	bb 27       	eor	r27, r27
 7b6:	93 95       	inc	r25
 7b8:	f6 95       	lsr	r31
 7ba:	87 95       	ror	r24
 7bc:	77 95       	ror	r23
 7be:	67 95       	ror	r22
 7c0:	b7 95       	ror	r27
 7c2:	f1 11       	cpse	r31, r1
 7c4:	f8 cf       	rjmp	.-16     	; 0x7b6 <__floatsisf+0x1c>
 7c6:	fa f4       	brpl	.+62     	; 0x806 <__floatsisf+0x6c>
 7c8:	bb 0f       	add	r27, r27
 7ca:	11 f4       	brne	.+4      	; 0x7d0 <__floatsisf+0x36>
 7cc:	60 ff       	sbrs	r22, 0
 7ce:	1b c0       	rjmp	.+54     	; 0x806 <__floatsisf+0x6c>
 7d0:	6f 5f       	subi	r22, 0xFF	; 255
 7d2:	7f 4f       	sbci	r23, 0xFF	; 255
 7d4:	8f 4f       	sbci	r24, 0xFF	; 255
 7d6:	9f 4f       	sbci	r25, 0xFF	; 255
 7d8:	16 c0       	rjmp	.+44     	; 0x806 <__floatsisf+0x6c>
 7da:	88 23       	and	r24, r24
 7dc:	11 f0       	breq	.+4      	; 0x7e2 <__floatsisf+0x48>
 7de:	96 e9       	ldi	r25, 0x96	; 150
 7e0:	11 c0       	rjmp	.+34     	; 0x804 <__floatsisf+0x6a>
 7e2:	77 23       	and	r23, r23
 7e4:	21 f0       	breq	.+8      	; 0x7ee <__floatsisf+0x54>
 7e6:	9e e8       	ldi	r25, 0x8E	; 142
 7e8:	87 2f       	mov	r24, r23
 7ea:	76 2f       	mov	r23, r22
 7ec:	05 c0       	rjmp	.+10     	; 0x7f8 <__floatsisf+0x5e>
 7ee:	66 23       	and	r22, r22
 7f0:	71 f0       	breq	.+28     	; 0x80e <__floatsisf+0x74>
 7f2:	96 e8       	ldi	r25, 0x86	; 134
 7f4:	86 2f       	mov	r24, r22
 7f6:	70 e0       	ldi	r23, 0x00	; 0
 7f8:	60 e0       	ldi	r22, 0x00	; 0
 7fa:	2a f0       	brmi	.+10     	; 0x806 <__floatsisf+0x6c>
 7fc:	9a 95       	dec	r25
 7fe:	66 0f       	add	r22, r22
 800:	77 1f       	adc	r23, r23
 802:	88 1f       	adc	r24, r24
 804:	da f7       	brpl	.-10     	; 0x7fc <__floatsisf+0x62>
 806:	88 0f       	add	r24, r24
 808:	96 95       	lsr	r25
 80a:	87 95       	ror	r24
 80c:	97 f9       	bld	r25, 7
 80e:	08 95       	ret

00000810 <__fp_cmp>:
 810:	99 0f       	add	r25, r25
 812:	00 08       	sbc	r0, r0
 814:	55 0f       	add	r21, r21
 816:	aa 0b       	sbc	r26, r26
 818:	e0 e8       	ldi	r30, 0x80	; 128
 81a:	fe ef       	ldi	r31, 0xFE	; 254
 81c:	16 16       	cp	r1, r22
 81e:	17 06       	cpc	r1, r23
 820:	e8 07       	cpc	r30, r24
 822:	f9 07       	cpc	r31, r25
 824:	c0 f0       	brcs	.+48     	; 0x856 <__fp_cmp+0x46>
 826:	12 16       	cp	r1, r18
 828:	13 06       	cpc	r1, r19
 82a:	e4 07       	cpc	r30, r20
 82c:	f5 07       	cpc	r31, r21
 82e:	98 f0       	brcs	.+38     	; 0x856 <__fp_cmp+0x46>
 830:	62 1b       	sub	r22, r18
 832:	73 0b       	sbc	r23, r19
 834:	84 0b       	sbc	r24, r20
 836:	95 0b       	sbc	r25, r21
 838:	39 f4       	brne	.+14     	; 0x848 <__fp_cmp+0x38>
 83a:	0a 26       	eor	r0, r26
 83c:	61 f0       	breq	.+24     	; 0x856 <__fp_cmp+0x46>
 83e:	23 2b       	or	r18, r19
 840:	24 2b       	or	r18, r20
 842:	25 2b       	or	r18, r21
 844:	21 f4       	brne	.+8      	; 0x84e <__fp_cmp+0x3e>
 846:	08 95       	ret
 848:	0a 26       	eor	r0, r26
 84a:	09 f4       	brne	.+2      	; 0x84e <__fp_cmp+0x3e>
 84c:	a1 40       	sbci	r26, 0x01	; 1
 84e:	a6 95       	lsr	r26
 850:	8f ef       	ldi	r24, 0xFF	; 255
 852:	81 1d       	adc	r24, r1
 854:	81 1d       	adc	r24, r1
 856:	08 95       	ret

00000858 <__fp_inf>:
 858:	97 f9       	bld	r25, 7
 85a:	9f 67       	ori	r25, 0x7F	; 127
 85c:	80 e8       	ldi	r24, 0x80	; 128
 85e:	70 e0       	ldi	r23, 0x00	; 0
 860:	60 e0       	ldi	r22, 0x00	; 0
 862:	08 95       	ret

00000864 <__fp_nan>:
 864:	9f ef       	ldi	r25, 0xFF	; 255
 866:	80 ec       	ldi	r24, 0xC0	; 192
 868:	08 95       	ret

0000086a <__fp_pscA>:
 86a:	00 24       	eor	r0, r0
 86c:	0a 94       	dec	r0
 86e:	16 16       	cp	r1, r22
 870:	17 06       	cpc	r1, r23
 872:	18 06       	cpc	r1, r24
 874:	09 06       	cpc	r0, r25
 876:	08 95       	ret

00000878 <__fp_pscB>:
 878:	00 24       	eor	r0, r0
 87a:	0a 94       	dec	r0
 87c:	12 16       	cp	r1, r18
 87e:	13 06       	cpc	r1, r19
 880:	14 06       	cpc	r1, r20
 882:	05 06       	cpc	r0, r21
 884:	08 95       	ret

00000886 <__fp_round>:
 886:	09 2e       	mov	r0, r25
 888:	03 94       	inc	r0
 88a:	00 0c       	add	r0, r0
 88c:	11 f4       	brne	.+4      	; 0x892 <__fp_round+0xc>
 88e:	88 23       	and	r24, r24
 890:	52 f0       	brmi	.+20     	; 0x8a6 <__fp_round+0x20>
 892:	bb 0f       	add	r27, r27
 894:	40 f4       	brcc	.+16     	; 0x8a6 <__fp_round+0x20>
 896:	bf 2b       	or	r27, r31
 898:	11 f4       	brne	.+4      	; 0x89e <__fp_round+0x18>
 89a:	60 ff       	sbrs	r22, 0
 89c:	04 c0       	rjmp	.+8      	; 0x8a6 <__fp_round+0x20>
 89e:	6f 5f       	subi	r22, 0xFF	; 255
 8a0:	7f 4f       	sbci	r23, 0xFF	; 255
 8a2:	8f 4f       	sbci	r24, 0xFF	; 255
 8a4:	9f 4f       	sbci	r25, 0xFF	; 255
 8a6:	08 95       	ret

000008a8 <__fp_split3>:
 8a8:	57 fd       	sbrc	r21, 7
 8aa:	90 58       	subi	r25, 0x80	; 128
 8ac:	44 0f       	add	r20, r20
 8ae:	55 1f       	adc	r21, r21
 8b0:	59 f0       	breq	.+22     	; 0x8c8 <__fp_splitA+0x10>
 8b2:	5f 3f       	cpi	r21, 0xFF	; 255
 8b4:	71 f0       	breq	.+28     	; 0x8d2 <__fp_splitA+0x1a>
 8b6:	47 95       	ror	r20

000008b8 <__fp_splitA>:
 8b8:	88 0f       	add	r24, r24
 8ba:	97 fb       	bst	r25, 7
 8bc:	99 1f       	adc	r25, r25
 8be:	61 f0       	breq	.+24     	; 0x8d8 <__fp_splitA+0x20>
 8c0:	9f 3f       	cpi	r25, 0xFF	; 255
 8c2:	79 f0       	breq	.+30     	; 0x8e2 <__fp_splitA+0x2a>
 8c4:	87 95       	ror	r24
 8c6:	08 95       	ret
 8c8:	12 16       	cp	r1, r18
 8ca:	13 06       	cpc	r1, r19
 8cc:	14 06       	cpc	r1, r20
 8ce:	55 1f       	adc	r21, r21
 8d0:	f2 cf       	rjmp	.-28     	; 0x8b6 <__fp_split3+0xe>
 8d2:	46 95       	lsr	r20
 8d4:	f1 df       	rcall	.-30     	; 0x8b8 <__fp_splitA>
 8d6:	08 c0       	rjmp	.+16     	; 0x8e8 <__fp_splitA+0x30>
 8d8:	16 16       	cp	r1, r22
 8da:	17 06       	cpc	r1, r23
 8dc:	18 06       	cpc	r1, r24
 8de:	99 1f       	adc	r25, r25
 8e0:	f1 cf       	rjmp	.-30     	; 0x8c4 <__fp_splitA+0xc>
 8e2:	86 95       	lsr	r24
 8e4:	71 05       	cpc	r23, r1
 8e6:	61 05       	cpc	r22, r1
 8e8:	08 94       	sec
 8ea:	08 95       	ret

000008ec <__fp_zero>:
 8ec:	e8 94       	clt

000008ee <__fp_szero>:
 8ee:	bb 27       	eor	r27, r27
 8f0:	66 27       	eor	r22, r22
 8f2:	77 27       	eor	r23, r23
 8f4:	cb 01       	movw	r24, r22
 8f6:	97 f9       	bld	r25, 7
 8f8:	08 95       	ret

000008fa <__mulsf3>:
 8fa:	0b d0       	rcall	.+22     	; 0x912 <__mulsf3x>
 8fc:	c4 cf       	rjmp	.-120    	; 0x886 <__fp_round>
 8fe:	b5 df       	rcall	.-150    	; 0x86a <__fp_pscA>
 900:	28 f0       	brcs	.+10     	; 0x90c <__mulsf3+0x12>
 902:	ba df       	rcall	.-140    	; 0x878 <__fp_pscB>
 904:	18 f0       	brcs	.+6      	; 0x90c <__mulsf3+0x12>
 906:	95 23       	and	r25, r21
 908:	09 f0       	breq	.+2      	; 0x90c <__mulsf3+0x12>
 90a:	a6 cf       	rjmp	.-180    	; 0x858 <__fp_inf>
 90c:	ab cf       	rjmp	.-170    	; 0x864 <__fp_nan>
 90e:	11 24       	eor	r1, r1
 910:	ee cf       	rjmp	.-36     	; 0x8ee <__fp_szero>

00000912 <__mulsf3x>:
 912:	ca df       	rcall	.-108    	; 0x8a8 <__fp_split3>
 914:	a0 f3       	brcs	.-24     	; 0x8fe <__mulsf3+0x4>

00000916 <__mulsf3_pse>:
 916:	95 9f       	mul	r25, r21
 918:	d1 f3       	breq	.-12     	; 0x90e <__mulsf3+0x14>
 91a:	95 0f       	add	r25, r21
 91c:	50 e0       	ldi	r21, 0x00	; 0
 91e:	55 1f       	adc	r21, r21
 920:	62 9f       	mul	r22, r18
 922:	f0 01       	movw	r30, r0
 924:	72 9f       	mul	r23, r18
 926:	bb 27       	eor	r27, r27
 928:	f0 0d       	add	r31, r0
 92a:	b1 1d       	adc	r27, r1
 92c:	63 9f       	mul	r22, r19
 92e:	aa 27       	eor	r26, r26
 930:	f0 0d       	add	r31, r0
 932:	b1 1d       	adc	r27, r1
 934:	aa 1f       	adc	r26, r26
 936:	64 9f       	mul	r22, r20
 938:	66 27       	eor	r22, r22
 93a:	b0 0d       	add	r27, r0
 93c:	a1 1d       	adc	r26, r1
 93e:	66 1f       	adc	r22, r22
 940:	82 9f       	mul	r24, r18
 942:	22 27       	eor	r18, r18
 944:	b0 0d       	add	r27, r0
 946:	a1 1d       	adc	r26, r1
 948:	62 1f       	adc	r22, r18
 94a:	73 9f       	mul	r23, r19
 94c:	b0 0d       	add	r27, r0
 94e:	a1 1d       	adc	r26, r1
 950:	62 1f       	adc	r22, r18
 952:	83 9f       	mul	r24, r19
 954:	a0 0d       	add	r26, r0
 956:	61 1d       	adc	r22, r1
 958:	22 1f       	adc	r18, r18
 95a:	74 9f       	mul	r23, r20
 95c:	33 27       	eor	r19, r19
 95e:	a0 0d       	add	r26, r0
 960:	61 1d       	adc	r22, r1
 962:	23 1f       	adc	r18, r19
 964:	84 9f       	mul	r24, r20
 966:	60 0d       	add	r22, r0
 968:	21 1d       	adc	r18, r1
 96a:	82 2f       	mov	r24, r18
 96c:	76 2f       	mov	r23, r22
 96e:	6a 2f       	mov	r22, r26
 970:	11 24       	eor	r1, r1
 972:	9f 57       	subi	r25, 0x7F	; 127
 974:	50 40       	sbci	r21, 0x00	; 0
 976:	8a f0       	brmi	.+34     	; 0x99a <__mulsf3_pse+0x84>
 978:	e1 f0       	breq	.+56     	; 0x9b2 <__mulsf3_pse+0x9c>
 97a:	88 23       	and	r24, r24
 97c:	4a f0       	brmi	.+18     	; 0x990 <__mulsf3_pse+0x7a>
 97e:	ee 0f       	add	r30, r30
 980:	ff 1f       	adc	r31, r31
 982:	bb 1f       	adc	r27, r27
 984:	66 1f       	adc	r22, r22
 986:	77 1f       	adc	r23, r23
 988:	88 1f       	adc	r24, r24
 98a:	91 50       	subi	r25, 0x01	; 1
 98c:	50 40       	sbci	r21, 0x00	; 0
 98e:	a9 f7       	brne	.-22     	; 0x97a <__mulsf3_pse+0x64>
 990:	9e 3f       	cpi	r25, 0xFE	; 254
 992:	51 05       	cpc	r21, r1
 994:	70 f0       	brcs	.+28     	; 0x9b2 <__mulsf3_pse+0x9c>
 996:	60 cf       	rjmp	.-320    	; 0x858 <__fp_inf>
 998:	aa cf       	rjmp	.-172    	; 0x8ee <__fp_szero>
 99a:	5f 3f       	cpi	r21, 0xFF	; 255
 99c:	ec f3       	brlt	.-6      	; 0x998 <__mulsf3_pse+0x82>
 99e:	98 3e       	cpi	r25, 0xE8	; 232
 9a0:	dc f3       	brlt	.-10     	; 0x998 <__mulsf3_pse+0x82>
 9a2:	86 95       	lsr	r24
 9a4:	77 95       	ror	r23
 9a6:	67 95       	ror	r22
 9a8:	b7 95       	ror	r27
 9aa:	f7 95       	ror	r31
 9ac:	e7 95       	ror	r30
 9ae:	9f 5f       	subi	r25, 0xFF	; 255
 9b0:	c1 f7       	brne	.-16     	; 0x9a2 <__mulsf3_pse+0x8c>
 9b2:	fe 2b       	or	r31, r30
 9b4:	88 0f       	add	r24, r24
 9b6:	91 1d       	adc	r25, r1
 9b8:	96 95       	lsr	r25
 9ba:	87 95       	ror	r24
 9bc:	97 f9       	bld	r25, 7
 9be:	08 95       	ret

000009c0 <__udivmodsi4>:
 9c0:	a1 e2       	ldi	r26, 0x21	; 33
 9c2:	1a 2e       	mov	r1, r26
 9c4:	aa 1b       	sub	r26, r26
 9c6:	bb 1b       	sub	r27, r27
 9c8:	fd 01       	movw	r30, r26
 9ca:	0d c0       	rjmp	.+26     	; 0x9e6 <__udivmodsi4_ep>

000009cc <__udivmodsi4_loop>:
 9cc:	aa 1f       	adc	r26, r26
 9ce:	bb 1f       	adc	r27, r27
 9d0:	ee 1f       	adc	r30, r30
 9d2:	ff 1f       	adc	r31, r31
 9d4:	a2 17       	cp	r26, r18
 9d6:	b3 07       	cpc	r27, r19
 9d8:	e4 07       	cpc	r30, r20
 9da:	f5 07       	cpc	r31, r21
 9dc:	20 f0       	brcs	.+8      	; 0x9e6 <__udivmodsi4_ep>
 9de:	a2 1b       	sub	r26, r18
 9e0:	b3 0b       	sbc	r27, r19
 9e2:	e4 0b       	sbc	r30, r20
 9e4:	f5 0b       	sbc	r31, r21

000009e6 <__udivmodsi4_ep>:
 9e6:	66 1f       	adc	r22, r22
 9e8:	77 1f       	adc	r23, r23
 9ea:	88 1f       	adc	r24, r24
 9ec:	99 1f       	adc	r25, r25
 9ee:	1a 94       	dec	r1
 9f0:	69 f7       	brne	.-38     	; 0x9cc <__udivmodsi4_loop>
 9f2:	60 95       	com	r22
 9f4:	70 95       	com	r23
 9f6:	80 95       	com	r24
 9f8:	90 95       	com	r25
 9fa:	9b 01       	movw	r18, r22
 9fc:	ac 01       	movw	r20, r24
 9fe:	bd 01       	movw	r22, r26
 a00:	cf 01       	movw	r24, r30
 a02:	08 95       	ret

00000a04 <_exit>:
 a04:	f8 94       	cli

00000a06 <__stop_program>:
 a06:	ff cf       	rjmp	.-2      	; 0xa06 <__stop_program>
