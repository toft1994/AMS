
RobotSorter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800200  000028ba  0000294e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000145f  00800272  00800272  000029c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000029c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000029f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000510  00000000  00000000  00002a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000764a  00000000  00000000  00002f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000305f  00000000  00000000  0000a58a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002fa4  00000000  00000000  0000d5e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000fcc  00000000  00000000  00010590  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c47  00000000  00000000  0001155c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003c3d  00000000  00000000  000131a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000448  00000000  00000000  00016de0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	73 c0       	rjmp	.+230    	; 0xe8 <__dtors_end>
       2:	00 00       	nop
       4:	a1 c0       	rjmp	.+322    	; 0x148 <__bad_interrupt>
       6:	00 00       	nop
       8:	9f c0       	rjmp	.+318    	; 0x148 <__bad_interrupt>
       a:	00 00       	nop
       c:	9d c0       	rjmp	.+314    	; 0x148 <__bad_interrupt>
       e:	00 00       	nop
      10:	9b c0       	rjmp	.+310    	; 0x148 <__bad_interrupt>
      12:	00 00       	nop
      14:	99 c0       	rjmp	.+306    	; 0x148 <__bad_interrupt>
      16:	00 00       	nop
      18:	97 c0       	rjmp	.+302    	; 0x148 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	95 c0       	rjmp	.+298    	; 0x148 <__bad_interrupt>
      1e:	00 00       	nop
      20:	93 c0       	rjmp	.+294    	; 0x148 <__bad_interrupt>
      22:	00 00       	nop
      24:	91 c0       	rjmp	.+290    	; 0x148 <__bad_interrupt>
      26:	00 00       	nop
      28:	8f c0       	rjmp	.+286    	; 0x148 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8d c0       	rjmp	.+282    	; 0x148 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8b c0       	rjmp	.+278    	; 0x148 <__bad_interrupt>
      32:	00 00       	nop
      34:	89 c0       	rjmp	.+274    	; 0x148 <__bad_interrupt>
      36:	00 00       	nop
      38:	87 c0       	rjmp	.+270    	; 0x148 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	85 c0       	rjmp	.+266    	; 0x148 <__bad_interrupt>
      3e:	00 00       	nop
      40:	83 c0       	rjmp	.+262    	; 0x148 <__bad_interrupt>
      42:	00 00       	nop
      44:	81 c0       	rjmp	.+258    	; 0x148 <__bad_interrupt>
      46:	00 00       	nop
      48:	7f c0       	rjmp	.+254    	; 0x148 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7d c0       	rjmp	.+250    	; 0x148 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7b c0       	rjmp	.+246    	; 0x148 <__bad_interrupt>
      52:	00 00       	nop
      54:	79 c0       	rjmp	.+242    	; 0x148 <__bad_interrupt>
      56:	00 00       	nop
      58:	77 c0       	rjmp	.+238    	; 0x148 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	75 c0       	rjmp	.+234    	; 0x148 <__bad_interrupt>
      5e:	00 00       	nop
      60:	73 c0       	rjmp	.+230    	; 0x148 <__bad_interrupt>
      62:	00 00       	nop
      64:	71 c0       	rjmp	.+226    	; 0x148 <__bad_interrupt>
      66:	00 00       	nop
      68:	6f c0       	rjmp	.+222    	; 0x148 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6d c0       	rjmp	.+218    	; 0x148 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6b c0       	rjmp	.+214    	; 0x148 <__bad_interrupt>
      72:	00 00       	nop
      74:	69 c0       	rjmp	.+210    	; 0x148 <__bad_interrupt>
      76:	00 00       	nop
      78:	67 c0       	rjmp	.+206    	; 0x148 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	65 c0       	rjmp	.+202    	; 0x148 <__bad_interrupt>
      7e:	00 00       	nop
      80:	63 c0       	rjmp	.+198    	; 0x148 <__bad_interrupt>
      82:	00 00       	nop
      84:	61 c0       	rjmp	.+194    	; 0x148 <__bad_interrupt>
      86:	00 00       	nop
      88:	5f c0       	rjmp	.+190    	; 0x148 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5d c0       	rjmp	.+186    	; 0x148 <__bad_interrupt>
      8e:	00 00       	nop
      90:	5b c0       	rjmp	.+182    	; 0x148 <__bad_interrupt>
      92:	00 00       	nop
      94:	59 c0       	rjmp	.+178    	; 0x148 <__bad_interrupt>
      96:	00 00       	nop
      98:	57 c0       	rjmp	.+174    	; 0x148 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	55 c0       	rjmp	.+170    	; 0x148 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	53 c0       	rjmp	.+166    	; 0x148 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	28 c2       	rjmp	.+1104   	; 0x4f6 <__vector_41>
      a6:	00 00       	nop
      a8:	4f c0       	rjmp	.+158    	; 0x148 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4d c0       	rjmp	.+154    	; 0x148 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4b c0       	rjmp	.+150    	; 0x148 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	fb c1       	rjmp	.+1014   	; 0x4ac <__vector_45>
      b6:	00 00       	nop
      b8:	47 c0       	rjmp	.+142    	; 0x148 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__vector_47>
      c0:	43 c0       	rjmp	.+134    	; 0x148 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	41 c0       	rjmp	.+130    	; 0x148 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3f c0       	rjmp	.+126    	; 0x148 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3d c0       	rjmp	.+122    	; 0x148 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	3b c0       	rjmp	.+118    	; 0x148 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	39 c0       	rjmp	.+114    	; 0x148 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	37 c0       	rjmp	.+110    	; 0x148 <__bad_interrupt>
      da:	00 00       	nop
      dc:	35 c0       	rjmp	.+106    	; 0x148 <__bad_interrupt>
      de:	00 00       	nop
      e0:	33 c0       	rjmp	.+102    	; 0x148 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
      e4:	b4 03       	fmuls	r19, r20

000000e6 <__ctors_end>:
      e6:	ba 03       	fmulsu	r19, r18

000000e8 <__dtors_end>:
      e8:	11 24       	eor	r1, r1
      ea:	1f be       	out	0x3f, r1	; 63
      ec:	cf ef       	ldi	r28, 0xFF	; 255
      ee:	d1 e2       	ldi	r29, 0x21	; 33
      f0:	de bf       	out	0x3e, r29	; 62
      f2:	cd bf       	out	0x3d, r28	; 61
      f4:	00 e0       	ldi	r16, 0x00	; 0
      f6:	0c bf       	out	0x3c, r16	; 60

000000f8 <__do_copy_data>:
      f8:	12 e0       	ldi	r17, 0x02	; 2
      fa:	a0 e0       	ldi	r26, 0x00	; 0
      fc:	b2 e0       	ldi	r27, 0x02	; 2
      fe:	ea eb       	ldi	r30, 0xBA	; 186
     100:	f8 e2       	ldi	r31, 0x28	; 40
     102:	00 e0       	ldi	r16, 0x00	; 0
     104:	0b bf       	out	0x3b, r16	; 59
     106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x14>
     108:	07 90       	elpm	r0, Z+
     10a:	0d 92       	st	X+, r0
     10c:	a2 37       	cpi	r26, 0x72	; 114
     10e:	b1 07       	cpc	r27, r17
     110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0x10>

00000112 <__do_clear_bss>:
     112:	26 e1       	ldi	r18, 0x16	; 22
     114:	a2 e7       	ldi	r26, 0x72	; 114
     116:	b2 e0       	ldi	r27, 0x02	; 2
     118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
     11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
     11c:	a1 3d       	cpi	r26, 0xD1	; 209
     11e:	b2 07       	cpc	r27, r18
     120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>

00000122 <__do_global_ctors>:
     122:	10 e0       	ldi	r17, 0x00	; 0
     124:	c3 e7       	ldi	r28, 0x73	; 115
     126:	d0 e0       	ldi	r29, 0x00	; 0
     128:	00 e0       	ldi	r16, 0x00	; 0
     12a:	06 c0       	rjmp	.+12     	; 0x138 <__do_global_ctors+0x16>
     12c:	21 97       	sbiw	r28, 0x01	; 1
     12e:	01 09       	sbc	r16, r1
     130:	80 2f       	mov	r24, r16
     132:	fe 01       	movw	r30, r28
     134:	0e 94 0d 13 	call	0x261a	; 0x261a <__tablejump2__>
     138:	c2 37       	cpi	r28, 0x72	; 114
     13a:	d1 07       	cpc	r29, r17
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	08 07       	cpc	r16, r24
     140:	a9 f7       	brne	.-22     	; 0x12c <__do_global_ctors+0xa>
     142:	ef d2       	rcall	.+1502   	; 0x722 <main>
     144:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__do_global_dtors>

00000148 <__bad_interrupt>:
     148:	5b cf       	rjmp	.-330    	; 0x0 <__vectors>

0000014a <_ZN5ColorC1Ev>:
}

uint8_t Color::getColorIndex( void )
{
	return _colorIndex;
}
     14a:	08 95       	ret

0000014c <_ZN5ColorD1Ev>:
     14c:	08 95       	ret

0000014e <_ZN5Color9getRedPwmEv>:
     14e:	fc 01       	movw	r30, r24
     150:	60 81       	ld	r22, Z
     152:	71 81       	ldd	r23, Z+1	; 0x01
     154:	82 81       	ldd	r24, Z+2	; 0x02
     156:	93 81       	ldd	r25, Z+3	; 0x03
     158:	08 95       	ret

0000015a <_ZN5Color10getBluePwmEv>:
     15a:	fc 01       	movw	r30, r24
     15c:	64 81       	ldd	r22, Z+4	; 0x04
     15e:	75 81       	ldd	r23, Z+5	; 0x05
     160:	86 81       	ldd	r24, Z+6	; 0x06
     162:	97 81       	ldd	r25, Z+7	; 0x07
     164:	08 95       	ret

00000166 <_ZN5Color11getGreenPwmEv>:
     166:	fc 01       	movw	r30, r24
     168:	60 85       	ldd	r22, Z+8	; 0x08
     16a:	71 85       	ldd	r23, Z+9	; 0x09
     16c:	82 85       	ldd	r24, Z+10	; 0x0a
     16e:	93 85       	ldd	r25, Z+11	; 0x0b
     170:	08 95       	ret

00000172 <_ZN5Color9setRedPwmEm>:

void Color::setRedPwm( uint32_t redPwm )
{
	_redPwm = redPwm;
     172:	fc 01       	movw	r30, r24
     174:	40 83       	st	Z, r20
     176:	51 83       	std	Z+1, r21	; 0x01
     178:	62 83       	std	Z+2, r22	; 0x02
     17a:	73 83       	std	Z+3, r23	; 0x03
     17c:	08 95       	ret

0000017e <_ZN5Color10setBluePwmEm>:
}

void Color::setBluePwm( uint32_t bluePwm )
{
	_bluePwm = bluePwm;
     17e:	fc 01       	movw	r30, r24
     180:	44 83       	std	Z+4, r20	; 0x04
     182:	55 83       	std	Z+5, r21	; 0x05
     184:	66 83       	std	Z+6, r22	; 0x06
     186:	77 83       	std	Z+7, r23	; 0x07
     188:	08 95       	ret

0000018a <_ZN5Color11setGreenPwmEm>:
}

void Color::setGreenPwm( uint32_t greenPwm )
{
	_greenPwm = greenPwm;
     18a:	fc 01       	movw	r30, r24
     18c:	40 87       	std	Z+8, r20	; 0x08
     18e:	51 87       	std	Z+9, r21	; 0x09
     190:	62 87       	std	Z+10, r22	; 0x0a
     192:	73 87       	std	Z+11, r23	; 0x0b
     194:	08 95       	ret

00000196 <_ZN5Color13setColorIndexEh>:
}

void Color::setColorIndex( uint8_t index )
{
	_colorIndex = index;
     196:	fc 01       	movw	r30, r24
     198:	64 87       	std	Z+12, r22	; 0x0c
     19a:	08 95       	ret

0000019c <_ZN11ColorSensorD1Ev>:
			}
		}
	}

	return 255;
}
     19c:	0f 93       	push	r16
     19e:	1f 93       	push	r17
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	8c 01       	movw	r16, r24
     1a6:	ec 01       	movw	r28, r24
     1a8:	cd 57       	subi	r28, 0x7D	; 125
     1aa:	df 4f       	sbci	r29, 0xFF	; 255
     1ac:	ce 01       	movw	r24, r28
     1ae:	ce df       	rcall	.-100    	; 0x14c <_ZN5ColorD1Ev>
     1b0:	0f 5f       	subi	r16, 0xFF	; 255
     1b2:	1f 4f       	sbci	r17, 0xFF	; 255
     1b4:	39 f0       	breq	.+14     	; 0x1c4 <_ZN11ColorSensorD1Ev+0x28>
     1b6:	c0 17       	cp	r28, r16
     1b8:	d1 07       	cpc	r29, r17
     1ba:	21 f0       	breq	.+8      	; 0x1c4 <_ZN11ColorSensorD1Ev+0x28>
     1bc:	2d 97       	sbiw	r28, 0x0d	; 13
     1be:	ce 01       	movw	r24, r28
     1c0:	c5 df       	rcall	.-118    	; 0x14c <_ZN5ColorD1Ev>
     1c2:	f9 cf       	rjmp	.-14     	; 0x1b6 <_ZN11ColorSensorD1Ev+0x1a>
     1c4:	df 91       	pop	r29
     1c6:	cf 91       	pop	r28
     1c8:	1f 91       	pop	r17
     1ca:	0f 91       	pop	r16
     1cc:	08 95       	ret

000001ce <_ZN11ColorSensor9setFilterE6Filter>:
     1ce:	61 30       	cpi	r22, 0x01	; 1
     1d0:	31 f0       	breq	.+12     	; 0x1de <_ZN11ColorSensor9setFilterE6Filter+0x10>
     1d2:	d0 f0       	brcs	.+52     	; 0x208 <_ZN11ColorSensor9setFilterE6Filter+0x3a>
     1d4:	62 30       	cpi	r22, 0x02	; 2
     1d6:	89 f0       	breq	.+34     	; 0x1fa <_ZN11ColorSensor9setFilterE6Filter+0x2c>
     1d8:	63 30       	cpi	r22, 0x03	; 3
     1da:	41 f0       	breq	.+16     	; 0x1ec <_ZN11ColorSensor9setFilterE6Filter+0x1e>
     1dc:	08 95       	ret
     1de:	88 b1       	in	r24, 0x08	; 8
     1e0:	8b 7f       	andi	r24, 0xFB	; 251
     1e2:	88 b9       	out	0x08, r24	; 8
     1e4:	88 b1       	in	r24, 0x08	; 8
     1e6:	87 7f       	andi	r24, 0xF7	; 247
     1e8:	88 b9       	out	0x08, r24	; 8
     1ea:	08 95       	ret
     1ec:	88 b1       	in	r24, 0x08	; 8
     1ee:	8b 7f       	andi	r24, 0xFB	; 251
     1f0:	88 b9       	out	0x08, r24	; 8
     1f2:	88 b1       	in	r24, 0x08	; 8
     1f4:	88 60       	ori	r24, 0x08	; 8
     1f6:	88 b9       	out	0x08, r24	; 8
     1f8:	08 95       	ret
     1fa:	88 b1       	in	r24, 0x08	; 8
     1fc:	84 60       	ori	r24, 0x04	; 4
     1fe:	88 b9       	out	0x08, r24	; 8
     200:	88 b1       	in	r24, 0x08	; 8
     202:	88 60       	ori	r24, 0x08	; 8
     204:	88 b9       	out	0x08, r24	; 8
     206:	08 95       	ret
     208:	88 b1       	in	r24, 0x08	; 8
     20a:	84 60       	ori	r24, 0x04	; 4
     20c:	88 b9       	out	0x08, r24	; 8
     20e:	88 b1       	in	r24, 0x08	; 8
     210:	87 7f       	andi	r24, 0xF7	; 247
     212:	88 b9       	out	0x08, r24	; 8
     214:	08 95       	ret

00000216 <_ZN11ColorSensor18setBackgroundBasisEv>:

void ColorSensor::setBackgroundBasis( void )
{
     216:	0f 93       	push	r16
     218:	1f 93       	push	r17
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	ec 01       	movw	r28, r24
	setFilter(redFilter);
     220:	61 e0       	ldi	r22, 0x01	; 1
     222:	d5 df       	rcall	.-86     	; 0x1ce <_ZN11ColorSensor9setFilterE6Filter>
	_backgroundBasis.setRedPwm( frequency_.getPwm() - 1000U );
     224:	ce 01       	movw	r24, r28
     226:	13 d1       	rcall	.+550    	; 0x44e <_ZN6timer46getPwmEv>
     228:	20 e0       	ldi	r18, 0x00	; 0
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	4a e7       	ldi	r20, 0x7A	; 122
     22e:	54 e4       	ldi	r21, 0x44	; 68
     230:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <__subsf3>
     234:	0e 94 b9 11 	call	0x2372	; 0x2372 <__fixunssfsi>
     238:	ab 01       	movw	r20, r22
     23a:	bc 01       	movw	r22, r24
     23c:	8e 01       	movw	r16, r28
     23e:	0d 57       	subi	r16, 0x7D	; 125
     240:	1f 4f       	sbci	r17, 0xFF	; 255
     242:	c8 01       	movw	r24, r16
     244:	96 df       	rcall	.-212    	; 0x172 <_ZN5Color9setRedPwmEm>
	
	setFilter(blueFilter);
     246:	63 e0       	ldi	r22, 0x03	; 3
     248:	ce 01       	movw	r24, r28
     24a:	c1 df       	rcall	.-126    	; 0x1ce <_ZN11ColorSensor9setFilterE6Filter>
	_backgroundBasis.setBluePwm( frequency_.getPwm() - 1000U );
     24c:	ce 01       	movw	r24, r28
     24e:	ff d0       	rcall	.+510    	; 0x44e <_ZN6timer46getPwmEv>
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	4a e7       	ldi	r20, 0x7A	; 122
     256:	54 e4       	ldi	r21, 0x44	; 68
     258:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <__subsf3>
     25c:	0e 94 b9 11 	call	0x2372	; 0x2372 <__fixunssfsi>
     260:	ab 01       	movw	r20, r22
     262:	bc 01       	movw	r22, r24
     264:	c8 01       	movw	r24, r16
     266:	8b df       	rcall	.-234    	; 0x17e <_ZN5Color10setBluePwmEm>
	
	setFilter(greenFilter);
     268:	62 e0       	ldi	r22, 0x02	; 2
     26a:	ce 01       	movw	r24, r28
     26c:	b0 df       	rcall	.-160    	; 0x1ce <_ZN11ColorSensor9setFilterE6Filter>
     26e:	ce 01       	movw	r24, r28
	_backgroundBasis.setGreenPwm( frequency_.getPwm() - 1000U );
     270:	ee d0       	rcall	.+476    	; 0x44e <_ZN6timer46getPwmEv>
     272:	20 e0       	ldi	r18, 0x00	; 0
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	4a e7       	ldi	r20, 0x7A	; 122
     278:	54 e4       	ldi	r21, 0x44	; 68
     27a:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <__subsf3>
     27e:	0e 94 b9 11 	call	0x2372	; 0x2372 <__fixunssfsi>
     282:	ab 01       	movw	r20, r22
     284:	bc 01       	movw	r22, r24
     286:	c8 01       	movw	r24, r16
     288:	80 df       	rcall	.-256    	; 0x18a <_ZN5Color11setGreenPwmEm>
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
}
     28e:	1f 91       	pop	r17
     290:	0f 91       	pop	r16
     292:	08 95       	ret

00000294 <_ZN11ColorSensor17addCalibrateColorEh>:
     294:	8f 92       	push	r8
     296:	9f 92       	push	r9

void ColorSensor::addCalibrateColor( uint8_t colorIndex )
{
     298:	af 92       	push	r10
     29a:	bf 92       	push	r11
     29c:	cf 92       	push	r12
     29e:	df 92       	push	r13
     2a0:	ef 92       	push	r14
     2a2:	ff 92       	push	r15
     2a4:	1f 93       	push	r17
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
	if ( colorIndex < 10U )
     2aa:	6a 30       	cpi	r22, 0x0A	; 10
     2ac:	08 f0       	brcs	.+2      	; 0x2b0 <_ZN11ColorSensor17addCalibrateColorEh+0x1c>
     2ae:	55 c0       	rjmp	.+170    	; 0x35a <_ZN11ColorSensor17addCalibrateColorEh+0xc6>
     2b0:	16 2f       	mov	r17, r22
     2b2:	ec 01       	movw	r28, r24
	{
		// Set all colors
		setFilter( redFilter );
     2b4:	61 e0       	ldi	r22, 0x01	; 1
     2b6:	8b df       	rcall	.-234    	; 0x1ce <_ZN11ColorSensor9setFilterE6Filter>
		_colors[colorIndex].setRedPwm( frequency_.getPwm() - _backgroundBasis.getRedPwm() );
     2b8:	ce 01       	movw	r24, r28
     2ba:	c9 d0       	rcall	.+402    	; 0x44e <_ZN6timer46getPwmEv>
     2bc:	4b 01       	movw	r8, r22
     2be:	5c 01       	movw	r10, r24
     2c0:	6e 01       	movw	r12, r28
     2c2:	23 e8       	ldi	r18, 0x83	; 131
     2c4:	c2 0e       	add	r12, r18
     2c6:	d1 1c       	adc	r13, r1
     2c8:	c6 01       	movw	r24, r12
     2ca:	41 df       	rcall	.-382    	; 0x14e <_ZN5Color9getRedPwmEv>
     2cc:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__floatunsisf>
     2d0:	9b 01       	movw	r18, r22
     2d2:	ac 01       	movw	r20, r24
     2d4:	c5 01       	movw	r24, r10
     2d6:	b4 01       	movw	r22, r8
     2d8:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <__subsf3>
     2dc:	0e 94 b9 11 	call	0x2372	; 0x2372 <__fixunssfsi>
     2e0:	ab 01       	movw	r20, r22
     2e2:	bc 01       	movw	r22, r24
     2e4:	2d e0       	ldi	r18, 0x0D	; 13
     2e6:	12 9f       	mul	r17, r18
     2e8:	c0 01       	movw	r24, r0
     2ea:	11 24       	eor	r1, r1
     2ec:	01 96       	adiw	r24, 0x01	; 1
     2ee:	7e 01       	movw	r14, r28
     2f0:	e8 0e       	add	r14, r24
     2f2:	f9 1e       	adc	r15, r25
     2f4:	c7 01       	movw	r24, r14
     2f6:	3d df       	rcall	.-390    	; 0x172 <_ZN5Color9setRedPwmEm>

		setFilter( blueFilter );
     2f8:	63 e0       	ldi	r22, 0x03	; 3
     2fa:	ce 01       	movw	r24, r28
     2fc:	68 df       	rcall	.-304    	; 0x1ce <_ZN11ColorSensor9setFilterE6Filter>
		_colors[colorIndex].setBluePwm( frequency_.getPwm() - _backgroundBasis.getBluePwm() );
     2fe:	ce 01       	movw	r24, r28
     300:	a6 d0       	rcall	.+332    	; 0x44e <_ZN6timer46getPwmEv>
     302:	4b 01       	movw	r8, r22
     304:	5c 01       	movw	r10, r24
     306:	c6 01       	movw	r24, r12
     308:	28 df       	rcall	.-432    	; 0x15a <_ZN5Color10getBluePwmEv>
     30a:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__floatunsisf>
     30e:	9b 01       	movw	r18, r22
     310:	ac 01       	movw	r20, r24
     312:	c5 01       	movw	r24, r10
     314:	b4 01       	movw	r22, r8
     316:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <__subsf3>
     31a:	0e 94 b9 11 	call	0x2372	; 0x2372 <__fixunssfsi>
     31e:	ab 01       	movw	r20, r22
     320:	bc 01       	movw	r22, r24
     322:	c7 01       	movw	r24, r14
		
		setFilter( greenFilter );
     324:	2c df       	rcall	.-424    	; 0x17e <_ZN5Color10setBluePwmEm>
     326:	62 e0       	ldi	r22, 0x02	; 2
     328:	ce 01       	movw	r24, r28
		_colors[colorIndex].setGreenPwm( frequency_.getPwm() - _backgroundBasis.getGreenPwm() );
     32a:	51 df       	rcall	.-350    	; 0x1ce <_ZN11ColorSensor9setFilterE6Filter>
     32c:	ce 01       	movw	r24, r28
     32e:	8f d0       	rcall	.+286    	; 0x44e <_ZN6timer46getPwmEv>
     330:	4b 01       	movw	r8, r22
     332:	5c 01       	movw	r10, r24
     334:	c6 01       	movw	r24, r12
     336:	17 df       	rcall	.-466    	; 0x166 <_ZN5Color11getGreenPwmEv>
     338:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__floatunsisf>
     33c:	9b 01       	movw	r18, r22
     33e:	ac 01       	movw	r20, r24
     340:	c5 01       	movw	r24, r10
     342:	b4 01       	movw	r22, r8
     344:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <__subsf3>
     348:	0e 94 b9 11 	call	0x2372	; 0x2372 <__fixunssfsi>
     34c:	ab 01       	movw	r20, r22
     34e:	bc 01       	movw	r22, r24
     350:	c7 01       	movw	r24, r14
     352:	1b df       	rcall	.-458    	; 0x18a <_ZN5Color11setGreenPwmEm>
		
		// Set index
		_colors[colorIndex].setColorIndex(colorIndex);
     354:	61 2f       	mov	r22, r17
     356:	c7 01       	movw	r24, r14
     358:	1e df       	rcall	.-452    	; 0x196 <_ZN5Color13setColorIndexEh>
     35a:	df 91       	pop	r29
	}
	else
	{
		/* Cant add more colors. Increase size of array. */
	}
}
     35c:	cf 91       	pop	r28
     35e:	1f 91       	pop	r17
     360:	ff 90       	pop	r15
     362:	ef 90       	pop	r14
     364:	df 90       	pop	r13
     366:	cf 90       	pop	r12
     368:	bf 90       	pop	r11
     36a:	af 90       	pop	r10
     36c:	9f 90       	pop	r9
     36e:	8f 90       	pop	r8
     370:	08 95       	ret

00000372 <_ZN11ColorSensor19setFrequencyscalingE16FrequencyScaling>:
     372:	61 30       	cpi	r22, 0x01	; 1
	}	
}

void ColorSensor::setFrequencyscaling( FrequencyScaling scaling )
{
	switch (scaling)
     374:	69 f0       	breq	.+26     	; 0x390 <_ZN11ColorSensor19setFrequencyscalingE16FrequencyScaling+0x1e>
     376:	28 f0       	brcs	.+10     	; 0x382 <_ZN11ColorSensor19setFrequencyscalingE16FrequencyScaling+0x10>
     378:	62 30       	cpi	r22, 0x02	; 2
     37a:	89 f0       	breq	.+34     	; 0x39e <_ZN11ColorSensor19setFrequencyscalingE16FrequencyScaling+0x2c>
     37c:	63 30       	cpi	r22, 0x03	; 3
     37e:	b1 f0       	breq	.+44     	; 0x3ac <_ZN11ColorSensor19setFrequencyscalingE16FrequencyScaling+0x3a>
     380:	08 95       	ret
	{
	case powerDown:
		COLORSENSOR_S0_PORT &= ~( COLORSENSOR_S0_PIN );
     382:	88 b1       	in	r24, 0x08	; 8
     384:	8e 7f       	andi	r24, 0xFE	; 254
     386:	88 b9       	out	0x08, r24	; 8
		COLORSENSOR_S1_PORT &= ~( COLORSENSOR_S1_PIN );
     388:	88 b1       	in	r24, 0x08	; 8
     38a:	8d 7f       	andi	r24, 0xFD	; 253
     38c:	88 b9       	out	0x08, r24	; 8
		break;
     38e:	08 95       	ret

	case twoPercent:
		COLORSENSOR_S0_PORT &= ~( COLORSENSOR_S0_PIN );
     390:	88 b1       	in	r24, 0x08	; 8
     392:	8e 7f       	andi	r24, 0xFE	; 254
     394:	88 b9       	out	0x08, r24	; 8
		COLORSENSOR_S1_PORT |= COLORSENSOR_S1_PIN;
     396:	88 b1       	in	r24, 0x08	; 8
     398:	82 60       	ori	r24, 0x02	; 2
     39a:	88 b9       	out	0x08, r24	; 8
		break;
     39c:	08 95       	ret

	case twentyPercent:
		COLORSENSOR_S0_PORT |= COLORSENSOR_S0_PIN;
     39e:	88 b1       	in	r24, 0x08	; 8
     3a0:	81 60       	ori	r24, 0x01	; 1
     3a2:	88 b9       	out	0x08, r24	; 8
		COLORSENSOR_S1_PORT &= ~( COLORSENSOR_S1_PIN );
     3a4:	88 b1       	in	r24, 0x08	; 8
     3a6:	8d 7f       	andi	r24, 0xFD	; 253
     3a8:	88 b9       	out	0x08, r24	; 8
		break;
     3aa:	08 95       	ret

	case hundredPercent:
		COLORSENSOR_S0_PORT |= COLORSENSOR_S0_PIN;
     3ac:	88 b1       	in	r24, 0x08	; 8
     3ae:	81 60       	ori	r24, 0x01	; 1
     3b0:	88 b9       	out	0x08, r24	; 8
		COLORSENSOR_S1_PORT |= COLORSENSOR_S1_PIN;
     3b2:	88 b1       	in	r24, 0x08	; 8
     3b4:	82 60       	ori	r24, 0x02	; 2
     3b6:	88 b9       	out	0x08, r24	; 8
     3b8:	08 95       	ret

000003ba <_ZN11ColorSensorC1E16FrequencyScaling>:
#include "ColorSensor.h"
#include "timer4.h"
#include <avr/io.h>

// default constructor
ColorSensor::ColorSensor( FrequencyScaling scaling )
     3ba:	bf 92       	push	r11
     3bc:	cf 92       	push	r12
     3be:	df 92       	push	r13
     3c0:	ef 92       	push	r14
     3c2:	ff 92       	push	r15
     3c4:	0f 93       	push	r16
     3c6:	1f 93       	push	r17
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	1f 92       	push	r1
     3ce:	cd b7       	in	r28, 0x3d	; 61
     3d0:	de b7       	in	r29, 0x3e	; 62
     3d2:	6c 01       	movw	r12, r24
     3d4:	b6 2e       	mov	r11, r22
     3d6:	2d d0       	rcall	.+90     	; 0x432 <_ZN6timer4C1Ev>
     3d8:	76 01       	movw	r14, r12
     3da:	8f ef       	ldi	r24, 0xFF	; 255
     3dc:	e8 1a       	sub	r14, r24
     3de:	f8 0a       	sbc	r15, r24
     3e0:	09 e0       	ldi	r16, 0x09	; 9
     3e2:	10 e0       	ldi	r17, 0x00	; 0
     3e4:	0f 3f       	cpi	r16, 0xFF	; 255
     3e6:	8f ef       	ldi	r24, 0xFF	; 255
     3e8:	18 07       	cpc	r17, r24
     3ea:	41 f0       	breq	.+16     	; 0x3fc <_ZN11ColorSensorC1E16FrequencyScaling+0x42>
     3ec:	c7 01       	movw	r24, r14
     3ee:	ad de       	rcall	.-678    	; 0x14a <_ZN5ColorC1Ev>
     3f0:	8d e0       	ldi	r24, 0x0D	; 13
     3f2:	e8 0e       	add	r14, r24
     3f4:	f1 1c       	adc	r15, r1
     3f6:	01 50       	subi	r16, 0x01	; 1
     3f8:	11 09       	sbc	r17, r1
     3fa:	f4 cf       	rjmp	.-24     	; 0x3e4 <_ZN11ColorSensorC1E16FrequencyScaling+0x2a>
     3fc:	c6 01       	movw	r24, r12
     3fe:	8d 57       	subi	r24, 0x7D	; 125
     400:	9f 4f       	sbci	r25, 0xFF	; 255
     402:	a3 de       	rcall	.-698    	; 0x14a <_ZN5ColorC1Ev>
{
	DDRC = 0xFF;
     404:	8f ef       	ldi	r24, 0xFF	; 255
     406:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x00;
	frequency_ = timer4();
     408:	1a b8       	out	0x0a, r1	; 10
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1

	setFilter( noFilter );
     40e:	11 d0       	rcall	.+34     	; 0x432 <_ZN6timer4C1Ev>
     410:	60 e0       	ldi	r22, 0x00	; 0
     412:	c6 01       	movw	r24, r12
	setFrequencyscaling( scaling );
     414:	dc de       	rcall	.-584    	; 0x1ce <_ZN11ColorSensor9setFilterE6Filter>
     416:	6b 2d       	mov	r22, r11
     418:	c6 01       	movw	r24, r12
     41a:	ab df       	rcall	.-170    	; 0x372 <_ZN11ColorSensor19setFrequencyscalingE16FrequencyScaling>
}
     41c:	0f 90       	pop	r0
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	1f 91       	pop	r17
     424:	0f 91       	pop	r16
     426:	ff 90       	pop	r15
     428:	ef 90       	pop	r14
     42a:	df 90       	pop	r13
     42c:	cf 90       	pop	r12
     42e:	bf 90       	pop	r11
     430:	08 95       	ret

00000432 <_ZN6timer4C1Ev>:
//volatile float tick = 0.000064;

timer4::timer4()
{
	// Setup timer to normal mode and pre scaler to 1
	TCCR4A = 0U;
     432:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
	TCCR4B = ( 1 << ICNC4 ) | ( 1 << ICES4 ) | ( 1 << CS40 );
     436:	81 ec       	ldi	r24, 0xC1	; 193
     438:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
	TCCR4C = 0U;
     43c:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	
	// Clear flags and set counter to zero
	TIFR4 = ( 0 << ICF4 ) | ( 0 << TOV4 );
     440:	19 ba       	out	0x19, r1	; 25
	TCNT4 = 0;        
     442:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
     446:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>

	// Enable global interrupts
    sei();
     44a:	78 94       	sei
     44c:	08 95       	ret

0000044e <_ZN6timer46getPwmEv>:
}

float timer4::getPwm( void )
{
	// Reset all needed values
	first = true;
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <first>
	oldValue = 0U;
     454:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <oldValue>
     458:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <oldValue+0x1>
     45c:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <oldValue+0x2>
     460:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <oldValue+0x3>
	freq = 0U;
     464:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <__data_end>
     468:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <__data_end+0x1>
     46c:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <__data_end+0x2>
     470:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <__data_end+0x3>
	
	// Enable interrupt and clear pending
	TIFR4 = ( 0 << ICF4 ) | ( 0 << TOV4 );	
     474:	19 ba       	out	0x19, r1	; 25
	TIMSK4 = ( 1 << ICIE4 ) | ( 1 << TOIE4 );	
     476:	81 e2       	ldi	r24, 0x21	; 33
     478:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
	
	// Wait until measurement has been taken
	while ( freq == 0 )
     47c:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <__data_end>
     480:	70 91 73 02 	lds	r23, 0x0273	; 0x800273 <__data_end+0x1>
     484:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <__data_end+0x2>
     488:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <__data_end+0x3>
     48c:	20 e0       	ldi	r18, 0x00	; 0
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	a9 01       	movw	r20, r18
     492:	0e 94 4d 11 	call	0x229a	; 0x229a <__cmpsf2>
     496:	88 23       	and	r24, r24
     498:	89 f3       	breq	.-30     	; 0x47c <_ZN6timer46getPwmEv+0x2e>
	{}
	
	return freq;
     49a:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <__data_end>
     49e:	70 91 73 02 	lds	r23, 0x0273	; 0x800273 <__data_end+0x1>
     4a2:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <__data_end+0x2>
     4a6:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <__data_end+0x3>
}
     4aa:	08 95       	ret

000004ac <__vector_45>:

ISR(TIMER4_OVF_vect)
{
     4ac:	1f 92       	push	r1
     4ae:	0f 92       	push	r0
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	0f 92       	push	r0
     4b4:	11 24       	eor	r1, r1
     4b6:	8f 93       	push	r24
     4b8:	9f 93       	push	r25
     4ba:	af 93       	push	r26
     4bc:	bf 93       	push	r27
	timeroverflow++;
     4be:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <timeroverflow>
     4c2:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <timeroverflow+0x1>
     4c6:	a0 91 78 02 	lds	r26, 0x0278	; 0x800278 <timeroverflow+0x2>
     4ca:	b0 91 79 02 	lds	r27, 0x0279	; 0x800279 <timeroverflow+0x3>
     4ce:	01 96       	adiw	r24, 0x01	; 1
     4d0:	a1 1d       	adc	r26, r1
     4d2:	b1 1d       	adc	r27, r1
     4d4:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <timeroverflow>
     4d8:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <timeroverflow+0x1>
     4dc:	a0 93 78 02 	sts	0x0278, r26	; 0x800278 <timeroverflow+0x2>
     4e0:	b0 93 79 02 	sts	0x0279, r27	; 0x800279 <timeroverflow+0x3>
}
     4e4:	bf 91       	pop	r27
     4e6:	af 91       	pop	r26
     4e8:	9f 91       	pop	r25
     4ea:	8f 91       	pop	r24
     4ec:	0f 90       	pop	r0
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	0f 90       	pop	r0
     4f2:	1f 90       	pop	r1
     4f4:	18 95       	reti

000004f6 <__vector_41>:

ISR(TIMER4_CAPT_vect, ISR_BLOCK)
{
     4f6:	1f 92       	push	r1
     4f8:	0f 92       	push	r0
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	0f 92       	push	r0
     4fe:	11 24       	eor	r1, r1
     500:	0b b6       	in	r0, 0x3b	; 59
     502:	0f 92       	push	r0
     504:	cf 92       	push	r12
     506:	df 92       	push	r13
     508:	ef 92       	push	r14
     50a:	ff 92       	push	r15
     50c:	0f 93       	push	r16
     50e:	1f 93       	push	r17
     510:	2f 93       	push	r18
     512:	3f 93       	push	r19
     514:	4f 93       	push	r20
     516:	5f 93       	push	r21
     518:	6f 93       	push	r22
     51a:	7f 93       	push	r23
     51c:	8f 93       	push	r24
     51e:	9f 93       	push	r25
     520:	af 93       	push	r26
     522:	bf 93       	push	r27
     524:	ef 93       	push	r30
     526:	ff 93       	push	r31
	uint16_t readValue = ICR4;
     528:	60 91 a6 00 	lds	r22, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
     52c:	70 91 a7 00 	lds	r23, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>

	if ( first == true )
     530:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <first>
     534:	88 23       	and	r24, r24
     536:	c1 f0       	breq	.+48     	; 0x568 <__vector_41+0x72>
	{
		timeroverflow = 0U;
     538:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <timeroverflow>
     53c:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <timeroverflow+0x1>
     540:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <timeroverflow+0x2>
     544:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <timeroverflow+0x3>
		oldValue = readValue;
     548:	cb 01       	movw	r24, r22
     54a:	a0 e0       	ldi	r26, 0x00	; 0
     54c:	b0 e0       	ldi	r27, 0x00	; 0
     54e:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <oldValue>
     552:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <oldValue+0x1>
     556:	a0 93 7c 02 	sts	0x027C, r26	; 0x80027c <oldValue+0x2>
     55a:	b0 93 7d 02 	sts	0x027D, r27	; 0x80027d <oldValue+0x3>
		first = false;
     55e:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <first>
		TIFR4 = 1;
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	89 bb       	out	0x19, r24	; 25
		return;
     566:	8e c0       	rjmp	.+284    	; 0x684 <__vector_41+0x18e>
	}
	
	// Disable interrupt and clear pending
	TIMSK4 = 0U;	
     568:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
	TIFR4 = 0U;		
     56c:	19 ba       	out	0x19, r1	; 25
			
	uint32_t diff = 0U;

	if ( readValue < oldValue )
     56e:	cb 01       	movw	r24, r22
     570:	a0 e0       	ldi	r26, 0x00	; 0
     572:	b0 e0       	ldi	r27, 0x00	; 0
     574:	00 91 7a 02 	lds	r16, 0x027A	; 0x80027a <oldValue>
     578:	10 91 7b 02 	lds	r17, 0x027B	; 0x80027b <oldValue+0x1>
     57c:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <oldValue+0x2>
     580:	30 91 7d 02 	lds	r19, 0x027D	; 0x80027d <oldValue+0x3>
     584:	80 17       	cp	r24, r16
     586:	91 07       	cpc	r25, r17
     588:	a2 07       	cpc	r26, r18
     58a:	b3 07       	cpc	r27, r19
     58c:	80 f5       	brcc	.+96     	; 0x5ee <__vector_41+0xf8>
	{
		if ( timeroverflow != 0 )
     58e:	00 91 76 02 	lds	r16, 0x0276	; 0x800276 <timeroverflow>
     592:	10 91 77 02 	lds	r17, 0x0277	; 0x800277 <timeroverflow+0x1>
     596:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <timeroverflow+0x2>
     59a:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <timeroverflow+0x3>
     59e:	01 2b       	or	r16, r17
     5a0:	02 2b       	or	r16, r18
     5a2:	03 2b       	or	r16, r19
     5a4:	a1 f0       	breq	.+40     	; 0x5ce <__vector_41+0xd8>
		{
			timeroverflow--;
     5a6:	00 91 76 02 	lds	r16, 0x0276	; 0x800276 <timeroverflow>
     5aa:	10 91 77 02 	lds	r17, 0x0277	; 0x800277 <timeroverflow+0x1>
     5ae:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <timeroverflow+0x2>
     5b2:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <timeroverflow+0x3>
     5b6:	01 50       	subi	r16, 0x01	; 1
     5b8:	11 09       	sbc	r17, r1
     5ba:	21 09       	sbc	r18, r1
     5bc:	31 09       	sbc	r19, r1
     5be:	00 93 76 02 	sts	0x0276, r16	; 0x800276 <timeroverflow>
     5c2:	10 93 77 02 	sts	0x0277, r17	; 0x800277 <timeroverflow+0x1>
     5c6:	20 93 78 02 	sts	0x0278, r18	; 0x800278 <timeroverflow+0x2>
     5ca:	30 93 79 02 	sts	0x0279, r19	; 0x800279 <timeroverflow+0x3>
		}
		diff = ( 0xFFFF - oldValue ) + readValue;
     5ce:	00 91 7a 02 	lds	r16, 0x027A	; 0x80027a <oldValue>
     5d2:	10 91 7b 02 	lds	r17, 0x027B	; 0x80027b <oldValue+0x1>
     5d6:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <oldValue+0x2>
     5da:	30 91 7d 02 	lds	r19, 0x027D	; 0x80027d <oldValue+0x3>
     5de:	80 1b       	sub	r24, r16
     5e0:	91 0b       	sbc	r25, r17
     5e2:	a2 0b       	sbc	r26, r18
     5e4:	b3 0b       	sbc	r27, r19
     5e6:	01 97       	sbiw	r24, 0x01	; 1
     5e8:	af 4f       	sbci	r26, 0xFF	; 255
     5ea:	bf 4f       	sbci	r27, 0xFF	; 255
     5ec:	0c c0       	rjmp	.+24     	; 0x606 <__vector_41+0x110>
	}
	else
	{
		diff = readValue - oldValue;
     5ee:	00 91 7a 02 	lds	r16, 0x027A	; 0x80027a <oldValue>
     5f2:	10 91 7b 02 	lds	r17, 0x027B	; 0x80027b <oldValue+0x1>
     5f6:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <oldValue+0x2>
     5fa:	30 91 7d 02 	lds	r19, 0x027D	; 0x80027d <oldValue+0x3>
     5fe:	80 1b       	sub	r24, r16
     600:	91 0b       	sbc	r25, r17
     602:	a2 0b       	sbc	r26, r18
     604:	b3 0b       	sbc	r27, r19
	}
	
	// Add timeroverflow to total diff
	diff += timeroverflow << 16U;
     606:	00 91 76 02 	lds	r16, 0x0276	; 0x800276 <timeroverflow>
     60a:	10 91 77 02 	lds	r17, 0x0277	; 0x800277 <timeroverflow+0x1>
     60e:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <timeroverflow+0x2>
     612:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <timeroverflow+0x3>
     616:	98 01       	movw	r18, r16
     618:	11 27       	eor	r17, r17
     61a:	00 27       	eor	r16, r16
     61c:	bc 01       	movw	r22, r24
     61e:	cd 01       	movw	r24, r26
     620:	60 0f       	add	r22, r16
     622:	71 1f       	adc	r23, r17
     624:	82 1f       	adc	r24, r18
     626:	93 1f       	adc	r25, r19
	
	// Calculate frequency
	freq = 1 / ( (float)diff * tick );
     628:	c0 90 06 02 	lds	r12, 0x0206	; 0x800206 <tick>
     62c:	d0 90 07 02 	lds	r13, 0x0207	; 0x800207 <tick+0x1>
     630:	e0 90 08 02 	lds	r14, 0x0208	; 0x800208 <tick+0x2>
     634:	f0 90 09 02 	lds	r15, 0x0209	; 0x800209 <tick+0x3>
     638:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__floatunsisf>
     63c:	a7 01       	movw	r20, r14
     63e:	96 01       	movw	r18, r12
     640:	0e 94 9b 12 	call	0x2536	; 0x2536 <__mulsf3>
     644:	9b 01       	movw	r18, r22
     646:	ac 01       	movw	r20, r24
     648:	60 e0       	ldi	r22, 0x00	; 0
     64a:	70 e0       	ldi	r23, 0x00	; 0
     64c:	80 e8       	ldi	r24, 0x80	; 128
     64e:	9f e3       	ldi	r25, 0x3F	; 63
     650:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__divsf3>
     654:	60 93 72 02 	sts	0x0272, r22	; 0x800272 <__data_end>
     658:	70 93 73 02 	sts	0x0273, r23	; 0x800273 <__data_end+0x1>
     65c:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <__data_end+0x2>
     660:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <__data_end+0x3>
	
	// Reset timeroverflow and old value
	timeroverflow = 0U;
     664:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <timeroverflow>
     668:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <timeroverflow+0x1>
     66c:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <timeroverflow+0x2>
     670:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <timeroverflow+0x3>
	oldValue = 0U;
     674:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <oldValue>
     678:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <oldValue+0x1>
     67c:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <oldValue+0x2>
     680:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <oldValue+0x3>
     684:	ff 91       	pop	r31
     686:	ef 91       	pop	r30
     688:	bf 91       	pop	r27
     68a:	af 91       	pop	r26
     68c:	9f 91       	pop	r25
     68e:	8f 91       	pop	r24
     690:	7f 91       	pop	r23
     692:	6f 91       	pop	r22
     694:	5f 91       	pop	r21
     696:	4f 91       	pop	r20
     698:	3f 91       	pop	r19
     69a:	2f 91       	pop	r18
     69c:	1f 91       	pop	r17
     69e:	0f 91       	pop	r16
     6a0:	ff 90       	pop	r15
     6a2:	ef 90       	pop	r14
     6a4:	df 90       	pop	r13
     6a6:	cf 90       	pop	r12
     6a8:	0f 90       	pop	r0
     6aa:	0b be       	out	0x3b, r0	; 59
     6ac:	0f 90       	pop	r0
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	0f 90       	pop	r0
     6b2:	1f 90       	pop	r1
     6b4:	18 95       	reti

000006b6 <_Z9FirstTaskPv>:
extern "C" void __cxa_pure_virtual() { while (1); }
	
ColorSensor csensor = ColorSensor( hundredPercent );

void FirstTask( void *pvParameters )
{
     6b6:	ec 01       	movw	r28, r24
	Robotarm* armptr = (Robotarm*) pvParameters;	 

	csensor.setBackgroundBasis();
     6b8:	8e e7       	ldi	r24, 0x7E	; 126
     6ba:	92 e0       	ldi	r25, 0x02	; 2
     6bc:	ac dd       	rcall	.-1192   	; 0x216 <_ZN11ColorSensor18setBackgroundBasisEv>
	csensor.addCalibrateColor( 0U );
     6be:	60 e0       	ldi	r22, 0x00	; 0
     6c0:	8e e7       	ldi	r24, 0x7E	; 126
     6c2:	92 e0       	ldi	r25, 0x02	; 2
     6c4:	e7 dd       	rcall	.-1074   	; 0x294 <_ZN11ColorSensor17addCalibrateColorEh>
	csensor.addCalibrateColor( 1U );
     6c6:	61 e0       	ldi	r22, 0x01	; 1
     6c8:	8e e7       	ldi	r24, 0x7E	; 126
     6ca:	92 e0       	ldi	r25, 0x02	; 2
	{		
		uint8_t color = 1U;//csensor.getColor();
		switch ( color )
		{
			case 1U:
				armptr->grabBlock();
     6cc:	e3 dd       	rcall	.-1082   	; 0x294 <_ZN11ColorSensor17addCalibrateColorEh>
     6ce:	ce 01       	movw	r24, r28
     6d0:	ca d4       	rcall	.+2452   	; 0x1066 <_ZN8Robotarm9grabBlockEv>
				vTaskDelay( 5000 / portTICK_RATE_MS );
     6d2:	88 e8       	ldi	r24, 0x88	; 136
     6d4:	93 e1       	ldi	r25, 0x13	; 19
     6d6:	0e 94 72 10 	call	0x20e4	; 0x20e4 <vTaskDelay>
				armptr->moveBlockToZoneOne();
     6da:	ce 01       	movw	r24, r28
     6dc:	5e d6       	rcall	.+3260   	; 0x139a <_ZN8Robotarm18moveBlockToZoneOneEv>
				vTaskDelay( 5000 / portTICK_RATE_MS );
     6de:	88 e8       	ldi	r24, 0x88	; 136
     6e0:	93 e1       	ldi	r25, 0x13	; 19
     6e2:	0e 94 72 10 	call	0x20e4	; 0x20e4 <vTaskDelay>
     6e6:	f3 cf       	rjmp	.-26     	; 0x6ce <_Z9FirstTaskPv+0x18>

000006e8 <_Z41__static_initialization_and_destruction_0ii>:
			//SendChar(UART0, '\n');
		//}
//
		//_delay_ms(100);
    //}
}
     6e8:	0f 93       	push	r16
     6ea:	1f 93       	push	r17
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	ec 01       	movw	r28, r24
     6f2:	8b 01       	movw	r16, r22
     6f4:	01 97       	sbiw	r24, 0x01	; 1
     6f6:	39 f4       	brne	.+14     	; 0x706 <_Z41__static_initialization_and_destruction_0ii+0x1e>
     6f8:	6f 3f       	cpi	r22, 0xFF	; 255
     6fa:	7f 4f       	sbci	r23, 0xFF	; 255
     6fc:	21 f4       	brne	.+8      	; 0x706 <_Z41__static_initialization_and_destruction_0ii+0x1e>
#include "task.h"
#include "portmacro.h"

extern "C" void __cxa_pure_virtual() { while (1); }
	
ColorSensor csensor = ColorSensor( hundredPercent );
     6fe:	63 e0       	ldi	r22, 0x03	; 3
     700:	8e e7       	ldi	r24, 0x7E	; 126
     702:	92 e0       	ldi	r25, 0x02	; 2
     704:	5a de       	rcall	.-844    	; 0x3ba <_ZN11ColorSensorC1E16FrequencyScaling>
     706:	cd 2b       	or	r28, r29
     708:	31 f4       	brne	.+12     	; 0x716 <_Z41__static_initialization_and_destruction_0ii+0x2e>
     70a:	0f 3f       	cpi	r16, 0xFF	; 255
     70c:	1f 4f       	sbci	r17, 0xFF	; 255
     70e:	19 f4       	brne	.+6      	; 0x716 <_Z41__static_initialization_and_destruction_0ii+0x2e>
     710:	8e e7       	ldi	r24, 0x7E	; 126
     712:	92 e0       	ldi	r25, 0x02	; 2
     714:	43 dd       	rcall	.-1402   	; 0x19c <_ZN11ColorSensorD1Ev>
			//SendChar(UART0, '\n');
		//}
//
		//_delay_ms(100);
    //}
}
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	08 95       	ret

00000720 <__cxa_pure_virtual>:
/* RTOS include */
#include "FreeRTOS.h"
#include "task.h"
#include "portmacro.h"

extern "C" void __cxa_pure_virtual() { while (1); }
     720:	ff cf       	rjmp	.-2      	; 0x720 <__cxa_pure_virtual>

00000722 <main>:
		}
	}
}

int main(void)
{
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	ce 59       	subi	r28, 0x9E	; 158
     72c:	d1 09       	sbc	r29, r1
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	f8 94       	cli
     732:	de bf       	out	0x3e, r29	; 62
     734:	0f be       	out	0x3f, r0	; 63
     736:	cd bf       	out	0x3d, r28	; 61
	Robotarm arm = Robotarm();
     738:	ce 01       	movw	r24, r28
     73a:	01 96       	adiw	r24, 0x01	; 1
     73c:	1c d4       	rcall	.+2104   	; 0xf76 <_ZN8RobotarmC1Ev>

	xTaskCreate(FirstTask,  ( signed char * ) "Task", configMINIMAL_STACK_SIZE, &arm, tskIDLE_PRIORITY, NULL);
     73e:	a1 2c       	mov	r10, r1
     740:	b1 2c       	mov	r11, r1
     742:	c1 2c       	mov	r12, r1
     744:	d1 2c       	mov	r13, r1
     746:	e1 2c       	mov	r14, r1
     748:	f1 2c       	mov	r15, r1
     74a:	00 e0       	ldi	r16, 0x00	; 0
     74c:	9e 01       	movw	r18, r28
     74e:	2f 5f       	subi	r18, 0xFF	; 255
     750:	3f 4f       	sbci	r19, 0xFF	; 255
     752:	45 e5       	ldi	r20, 0x55	; 85
     754:	50 e0       	ldi	r21, 0x00	; 0
     756:	6d e0       	ldi	r22, 0x0D	; 13
     758:	72 e0       	ldi	r23, 0x02	; 2
     75a:	8b e5       	ldi	r24, 0x5B	; 91
     75c:	93 e0       	ldi	r25, 0x03	; 3
     75e:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <xTaskGenericCreate>
	vTaskStartScheduler();
     762:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <vTaskStartScheduler>
     766:	ff cf       	rjmp	.-2      	; 0x766 <main+0x44>

00000768 <_GLOBAL__sub_I___cxa_pure_virtual>:
			//SendChar(UART0, '\n');
		//}
//
		//_delay_ms(100);
    //}
}
     768:	6f ef       	ldi	r22, 0xFF	; 255
     76a:	7f ef       	ldi	r23, 0xFF	; 255
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	bb cf       	rjmp	.-138    	; 0x6e8 <_Z41__static_initialization_and_destruction_0ii>
     772:	08 95       	ret

00000774 <_GLOBAL__sub_D___cxa_pure_virtual>:
     774:	6f ef       	ldi	r22, 0xFF	; 255
     776:	7f ef       	ldi	r23, 0xFF	; 255
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	b5 cf       	rjmp	.-150    	; 0x6e8 <_Z41__static_initialization_and_destruction_0ii>
     77e:	08 95       	ret

00000780 <_ZN5Motor10SetDegreesEh>:
{
//functions
public:
	virtual ~Motor() {};
	virtual void TurnMotor() = 0;
	virtual void SetDegrees( uint8_t degrees )
     780:	cf 92       	push	r12
     782:	df 92       	push	r13
     784:	ef 92       	push	r14
     786:	ff 92       	push	r15
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	ec 01       	movw	r28, r24
	{
		percent_ = percentPrDeg * degrees + startpercent_;
     78e:	ce 80       	ldd	r12, Y+6	; 0x06
     790:	df 80       	ldd	r13, Y+7	; 0x07
     792:	e8 84       	ldd	r14, Y+8	; 0x08
     794:	f9 84       	ldd	r15, Y+9	; 0x09
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 e7 11 	call	0x23ce	; 0x23ce <__floatsisf>
     7a0:	a7 01       	movw	r20, r14
     7a2:	96 01       	movw	r18, r12
     7a4:	0e 94 9b 12 	call	0x2536	; 0x2536 <__mulsf3>
     7a8:	2a 89       	ldd	r18, Y+18	; 0x12
     7aa:	3b 89       	ldd	r19, Y+19	; 0x13
     7ac:	4c 89       	ldd	r20, Y+20	; 0x14
     7ae:	5d 89       	ldd	r21, Y+21	; 0x15
     7b0:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__addsf3>
     7b4:	6a 87       	std	Y+10, r22	; 0x0a
     7b6:	7b 87       	std	Y+11, r23	; 0x0b
     7b8:	8c 87       	std	Y+12, r24	; 0x0c
     7ba:	9d 87       	std	Y+13, r25	; 0x0d
	}
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	ff 90       	pop	r15
     7c2:	ef 90       	pop	r14
     7c4:	df 90       	pop	r13
     7c6:	cf 90       	pop	r12
     7c8:	08 95       	ret

000007ca <_ZN2M1D1Ev>:

class Motor
{
//functions
public:
	virtual ~Motor() {};
     7ca:	26 e1       	ldi	r18, 0x16	; 22
     7cc:	32 e0       	ldi	r19, 0x02	; 2
     7ce:	fc 01       	movw	r30, r24
     7d0:	31 83       	std	Z+1, r19	; 0x01
     7d2:	20 83       	st	Z, r18
     7d4:	08 95       	ret

000007d6 <_ZN2M1D0Ev>:
	SetDegrees( 90 );
	tmr1Ptr_->setDutyCycleComA( percent_ );
	oldPercent_ = percent_;
} 

M1::~M1()
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	ec 01       	movw	r28, r24
{
}
     7dc:	f6 df       	rcall	.-20     	; 0x7ca <_ZN2M1D1Ev>
		return p;
	}

	void operator delete(void * p) // or delete(void *, std::size_t)
	{
		free(p);
     7de:	ce 01       	movw	r24, r28
     7e0:	0e 94 ad 13 	call	0x275a	; 0x275a <free>
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	08 95       	ret

000007ea <_ZN2M19TurnMotorEv>:

void M1::TurnMotor()
{
     7ea:	4f 92       	push	r4
     7ec:	5f 92       	push	r5
     7ee:	6f 92       	push	r6
     7f0:	7f 92       	push	r7
     7f2:	8f 92       	push	r8
     7f4:	9f 92       	push	r9
     7f6:	af 92       	push	r10
     7f8:	bf 92       	push	r11
     7fa:	cf 92       	push	r12
     7fc:	df 92       	push	r13
     7fe:	ef 92       	push	r14
     800:	ff 92       	push	r15
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
     806:	ec 01       	movw	r28, r24
	if ( percent_ > oldPercent_ + PERCENT_PR_TICK )
     808:	8a 84       	ldd	r8, Y+10	; 0x0a
     80a:	9b 84       	ldd	r9, Y+11	; 0x0b
     80c:	ac 84       	ldd	r10, Y+12	; 0x0c
     80e:	bd 84       	ldd	r11, Y+13	; 0x0d
     810:	ce 84       	ldd	r12, Y+14	; 0x0e
     812:	df 84       	ldd	r13, Y+15	; 0x0f
     814:	e8 88       	ldd	r14, Y+16	; 0x10
     816:	f9 88       	ldd	r15, Y+17	; 0x11
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	40 e8       	ldi	r20, 0x80	; 128
     81e:	5d e3       	ldi	r21, 0x3D	; 61
     820:	c7 01       	movw	r24, r14
     822:	b6 01       	movw	r22, r12
     824:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__addsf3>
     828:	2b 01       	movw	r4, r22
     82a:	3c 01       	movw	r6, r24
     82c:	9b 01       	movw	r18, r22
     82e:	ac 01       	movw	r20, r24
     830:	c5 01       	movw	r24, r10
     832:	b4 01       	movw	r22, r8
     834:	0e 94 97 12 	call	0x252e	; 0x252e <__gesf2>
     838:	18 16       	cp	r1, r24
     83a:	74 f4       	brge	.+28     	; 0x858 <_ZN2M19TurnMotorEv+0x6e>
	{
		oldPercent_ += PERCENT_PR_TICK;
     83c:	4e 86       	std	Y+14, r4	; 0x0e
     83e:	5f 86       	std	Y+15, r5	; 0x0f
     840:	68 8a       	std	Y+16, r6	; 0x10
     842:	79 8a       	std	Y+17, r7	; 0x11
		tmr1Ptr_->setDutyCycleComA( oldPercent_ );
     844:	b3 01       	movw	r22, r6
     846:	a2 01       	movw	r20, r4
     848:	8a 81       	ldd	r24, Y+2	; 0x02
     84a:	9b 81       	ldd	r25, Y+3	; 0x03
     84c:	df d5       	rcall	.+3006   	; 0x140c <_ZN6Timer116setDutyCycleComAEf>
		vTaskDelay( delay_ / portTICK_RATE_MS );
     84e:	8e 89       	ldd	r24, Y+22	; 0x16
     850:	9f 89       	ldd	r25, Y+23	; 0x17
     852:	0e 94 72 10 	call	0x20e4	; 0x20e4 <vTaskDelay>
     856:	1d c0       	rjmp	.+58     	; 0x892 <_ZN2M19TurnMotorEv+0xa8>
	}
	else if ( percent_ < oldPercent_ )
     858:	a7 01       	movw	r20, r14
     85a:	96 01       	movw	r18, r12
     85c:	c5 01       	movw	r24, r10
     85e:	b4 01       	movw	r22, r8
     860:	0e 94 4d 11 	call	0x229a	; 0x229a <__cmpsf2>
     864:	88 23       	and	r24, r24
     866:	ac f4       	brge	.+42     	; 0x892 <_ZN2M19TurnMotorEv+0xa8>
	{
		oldPercent_ -= PERCENT_PR_TICK;
     868:	20 e0       	ldi	r18, 0x00	; 0
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	40 e8       	ldi	r20, 0x80	; 128
     86e:	5d e3       	ldi	r21, 0x3D	; 61
     870:	c7 01       	movw	r24, r14
     872:	b6 01       	movw	r22, r12
     874:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <__subsf3>
     878:	ab 01       	movw	r20, r22
     87a:	bc 01       	movw	r22, r24
     87c:	4e 87       	std	Y+14, r20	; 0x0e
     87e:	5f 87       	std	Y+15, r21	; 0x0f
     880:	68 8b       	std	Y+16, r22	; 0x10
     882:	79 8b       	std	Y+17, r23	; 0x11
		tmr1Ptr_->setDutyCycleComA( oldPercent_ );
     884:	8a 81       	ldd	r24, Y+2	; 0x02
     886:	9b 81       	ldd	r25, Y+3	; 0x03
     888:	c1 d5       	rcall	.+2946   	; 0x140c <_ZN6Timer116setDutyCycleComAEf>
		vTaskDelay( delay_ / portTICK_RATE_MS );
     88a:	8e 89       	ldd	r24, Y+22	; 0x16
     88c:	9f 89       	ldd	r25, Y+23	; 0x17
     88e:	0e 94 72 10 	call	0x20e4	; 0x20e4 <vTaskDelay>
	}
}
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	ff 90       	pop	r15
     898:	ef 90       	pop	r14
     89a:	df 90       	pop	r13
     89c:	cf 90       	pop	r12
     89e:	bf 90       	pop	r11
     8a0:	af 90       	pop	r10
     8a2:	9f 90       	pop	r9
     8a4:	8f 90       	pop	r8
     8a6:	7f 90       	pop	r7
     8a8:	6f 90       	pop	r6
     8aa:	5f 90       	pop	r5
     8ac:	4f 90       	pop	r4
     8ae:	08 95       	ret

000008b0 <_ZN2M1C1EP6Timer1>:
* Author: jespe
*/

#include "M1.h"

M1::M1( Timer1* tmr )
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	ec 01       	movw	r28, r24
     8b6:	cb 01       	movw	r24, r22
     8b8:	22 e2       	ldi	r18, 0x22	; 34
     8ba:	32 e0       	ldi	r19, 0x02	; 2
     8bc:	39 83       	std	Y+1, r19	; 0x01
     8be:	28 83       	st	Y, r18
{
	/* Store timer pointer */
	tmr1Ptr_ = tmr;
     8c0:	7b 83       	std	Y+3, r23	; 0x03
     8c2:	6a 83       	std	Y+2, r22	; 0x02
	
	/* This value is number of percent to add or subtract pr degree. */
	percentPrDeg = 0.0555555555555556;
     8c4:	49 e3       	ldi	r20, 0x39	; 57
     8c6:	5e e8       	ldi	r21, 0x8E	; 142
     8c8:	63 e6       	ldi	r22, 0x63	; 99
     8ca:	7d e3       	ldi	r23, 0x3D	; 61
     8cc:	4e 83       	std	Y+6, r20	; 0x06
     8ce:	5f 83       	std	Y+7, r21	; 0x07
     8d0:	68 87       	std	Y+8, r22	; 0x08
     8d2:	79 87       	std	Y+9, r23	; 0x09
	
	/* This value is the lowest duty cycle percentage needed to make motor turn. */
	startpercent_ = 2.5;
     8d4:	40 e0       	ldi	r20, 0x00	; 0
     8d6:	50 e0       	ldi	r21, 0x00	; 0
     8d8:	60 e2       	ldi	r22, 0x20	; 32
     8da:	70 e4       	ldi	r23, 0x40	; 64
     8dc:	4a 8b       	std	Y+18, r20	; 0x12
     8de:	5b 8b       	std	Y+19, r21	; 0x13
     8e0:	6c 8b       	std	Y+20, r22	; 0x14
     8e2:	7d 8b       	std	Y+21, r23	; 0x15
	
	/* This value is the delay on motor. A lower value makes motors go faster and higher value makes motors go slower. */
	delay_ = 1;
     8e4:	21 e0       	ldi	r18, 0x01	; 1
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	3f 8b       	std	Y+23, r19	; 0x17
     8ea:	2e 8b       	std	Y+22, r18	; 0x16
	virtual void TurnMotor() = 0;
	virtual void SetDegrees( uint8_t degrees )
	{
		percent_ = percentPrDeg * degrees + startpercent_;
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	50 e0       	ldi	r21, 0x00	; 0
     8f0:	60 ef       	ldi	r22, 0xF0	; 240
     8f2:	70 e4       	ldi	r23, 0x40	; 64
     8f4:	4a 87       	std	Y+10, r20	; 0x0a
     8f6:	5b 87       	std	Y+11, r21	; 0x0b
     8f8:	6c 87       	std	Y+12, r22	; 0x0c
     8fa:	7d 87       	std	Y+13, r23	; 0x0d
	
	/* Set motor to default startup value */
	SetDegrees( 90 );
	tmr1Ptr_->setDutyCycleComA( percent_ );
     8fc:	87 d5       	rcall	.+2830   	; 0x140c <_ZN6Timer116setDutyCycleComAEf>
	oldPercent_ = percent_;
     8fe:	8a 85       	ldd	r24, Y+10	; 0x0a
     900:	9b 85       	ldd	r25, Y+11	; 0x0b
     902:	ac 85       	ldd	r26, Y+12	; 0x0c
     904:	bd 85       	ldd	r27, Y+13	; 0x0d
     906:	8e 87       	std	Y+14, r24	; 0x0e
     908:	9f 87       	std	Y+15, r25	; 0x0f
     90a:	a8 8b       	std	Y+16, r26	; 0x10
     90c:	b9 8b       	std	Y+17, r27	; 0x11
} 
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	08 95       	ret

00000914 <_ZN2M2D1Ev>:

class Motor
{
//functions
public:
	virtual ~Motor() {};
     914:	26 e1       	ldi	r18, 0x16	; 22
     916:	32 e0       	ldi	r19, 0x02	; 2
     918:	fc 01       	movw	r30, r24
     91a:	31 83       	std	Z+1, r19	; 0x01
     91c:	20 83       	st	Z, r18
     91e:	08 95       	ret

00000920 <_ZN2M2D0Ev>:
	SetDegrees( 90 );
	tmr1Ptr_->setDutyCycleComB( percent_ );
	oldPercent_ = percent_;
}

M2::~M2()
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
     924:	ec 01       	movw	r28, r24
{
} 
     926:	f6 df       	rcall	.-20     	; 0x914 <_ZN2M2D1Ev>
		return p;
	}

	void operator delete( void * p ) // or delete(void *, std::size_t)
	{
		free( p );
     928:	ce 01       	movw	r24, r28
     92a:	0e 94 ad 13 	call	0x275a	; 0x275a <free>
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	08 95       	ret

00000934 <_ZN2M29TurnMotorEv>:

void M2::TurnMotor()
{
     934:	4f 92       	push	r4
     936:	5f 92       	push	r5
     938:	6f 92       	push	r6
     93a:	7f 92       	push	r7
     93c:	8f 92       	push	r8
     93e:	9f 92       	push	r9
     940:	af 92       	push	r10
     942:	bf 92       	push	r11
     944:	cf 92       	push	r12
     946:	df 92       	push	r13
     948:	ef 92       	push	r14
     94a:	ff 92       	push	r15
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	ec 01       	movw	r28, r24
	if ( percent_ > oldPercent_ + PERCENT_PR_TICK )
     952:	8a 84       	ldd	r8, Y+10	; 0x0a
     954:	9b 84       	ldd	r9, Y+11	; 0x0b
     956:	ac 84       	ldd	r10, Y+12	; 0x0c
     958:	bd 84       	ldd	r11, Y+13	; 0x0d
     95a:	ce 84       	ldd	r12, Y+14	; 0x0e
     95c:	df 84       	ldd	r13, Y+15	; 0x0f
     95e:	e8 88       	ldd	r14, Y+16	; 0x10
     960:	f9 88       	ldd	r15, Y+17	; 0x11
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	40 e8       	ldi	r20, 0x80	; 128
     968:	5d e3       	ldi	r21, 0x3D	; 61
     96a:	c7 01       	movw	r24, r14
     96c:	b6 01       	movw	r22, r12
     96e:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__addsf3>
     972:	2b 01       	movw	r4, r22
     974:	3c 01       	movw	r6, r24
     976:	9b 01       	movw	r18, r22
     978:	ac 01       	movw	r20, r24
     97a:	c5 01       	movw	r24, r10
     97c:	b4 01       	movw	r22, r8
     97e:	0e 94 97 12 	call	0x252e	; 0x252e <__gesf2>
     982:	18 16       	cp	r1, r24
     984:	74 f4       	brge	.+28     	; 0x9a2 <_ZN2M29TurnMotorEv+0x6e>
	{
		oldPercent_ += PERCENT_PR_TICK;
     986:	4e 86       	std	Y+14, r4	; 0x0e
     988:	5f 86       	std	Y+15, r5	; 0x0f
     98a:	68 8a       	std	Y+16, r6	; 0x10
     98c:	79 8a       	std	Y+17, r7	; 0x11
		tmr1Ptr_->setDutyCycleComB( oldPercent_ );
     98e:	b3 01       	movw	r22, r6
     990:	a2 01       	movw	r20, r4
     992:	8a 81       	ldd	r24, Y+2	; 0x02
     994:	9b 81       	ldd	r25, Y+3	; 0x03
     996:	79 d5       	rcall	.+2802   	; 0x148a <_ZN6Timer116setDutyCycleComBEf>
		vTaskDelay( delay_ / portTICK_RATE_MS );
     998:	8e 89       	ldd	r24, Y+22	; 0x16
     99a:	9f 89       	ldd	r25, Y+23	; 0x17
     99c:	0e 94 72 10 	call	0x20e4	; 0x20e4 <vTaskDelay>
     9a0:	1d c0       	rjmp	.+58     	; 0x9dc <_ZN2M29TurnMotorEv+0xa8>
	}
	else if ( percent_ < oldPercent_ )
     9a2:	a7 01       	movw	r20, r14
     9a4:	96 01       	movw	r18, r12
     9a6:	c5 01       	movw	r24, r10
     9a8:	b4 01       	movw	r22, r8
     9aa:	0e 94 4d 11 	call	0x229a	; 0x229a <__cmpsf2>
     9ae:	88 23       	and	r24, r24
     9b0:	ac f4       	brge	.+42     	; 0x9dc <_ZN2M29TurnMotorEv+0xa8>
	{
		oldPercent_ -= PERCENT_PR_TICK;
     9b2:	20 e0       	ldi	r18, 0x00	; 0
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	40 e8       	ldi	r20, 0x80	; 128
     9b8:	5d e3       	ldi	r21, 0x3D	; 61
     9ba:	c7 01       	movw	r24, r14
     9bc:	b6 01       	movw	r22, r12
     9be:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <__subsf3>
     9c2:	ab 01       	movw	r20, r22
     9c4:	bc 01       	movw	r22, r24
     9c6:	4e 87       	std	Y+14, r20	; 0x0e
     9c8:	5f 87       	std	Y+15, r21	; 0x0f
     9ca:	68 8b       	std	Y+16, r22	; 0x10
     9cc:	79 8b       	std	Y+17, r23	; 0x11
		tmr1Ptr_->setDutyCycleComB( oldPercent_ );
     9ce:	8a 81       	ldd	r24, Y+2	; 0x02
     9d0:	9b 81       	ldd	r25, Y+3	; 0x03
     9d2:	5b d5       	rcall	.+2742   	; 0x148a <_ZN6Timer116setDutyCycleComBEf>
		vTaskDelay( delay_ / portTICK_RATE_MS );
     9d4:	8e 89       	ldd	r24, Y+22	; 0x16
     9d6:	9f 89       	ldd	r25, Y+23	; 0x17
     9d8:	0e 94 72 10 	call	0x20e4	; 0x20e4 <vTaskDelay>
	}
}
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	ff 90       	pop	r15
     9e2:	ef 90       	pop	r14
     9e4:	df 90       	pop	r13
     9e6:	cf 90       	pop	r12
     9e8:	bf 90       	pop	r11
     9ea:	af 90       	pop	r10
     9ec:	9f 90       	pop	r9
     9ee:	8f 90       	pop	r8
     9f0:	7f 90       	pop	r7
     9f2:	6f 90       	pop	r6
     9f4:	5f 90       	pop	r5
     9f6:	4f 90       	pop	r4
     9f8:	08 95       	ret

000009fa <_ZN2M2C1EP6Timer1>:
* Author: jespe
*/

#include "M2.h"

M2::M2( Timer1* tmr )
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	ec 01       	movw	r28, r24
     a00:	cb 01       	movw	r24, r22
     a02:	2e e2       	ldi	r18, 0x2E	; 46
     a04:	32 e0       	ldi	r19, 0x02	; 2
     a06:	39 83       	std	Y+1, r19	; 0x01
     a08:	28 83       	st	Y, r18
{
	/* Store timer pointer */
	tmr1Ptr_ = tmr;
     a0a:	7b 83       	std	Y+3, r23	; 0x03
     a0c:	6a 83       	std	Y+2, r22	; 0x02
	
	/* This value is number of percent to add or subtract pr degree. */
	percentPrDeg = 0.06;
     a0e:	4f e8       	ldi	r20, 0x8F	; 143
     a10:	52 ec       	ldi	r21, 0xC2	; 194
     a12:	65 e7       	ldi	r22, 0x75	; 117
     a14:	7d e3       	ldi	r23, 0x3D	; 61
     a16:	4e 83       	std	Y+6, r20	; 0x06
     a18:	5f 83       	std	Y+7, r21	; 0x07
     a1a:	68 87       	std	Y+8, r22	; 0x08
     a1c:	79 87       	std	Y+9, r23	; 0x09

	/* This value is the lowest duty cycle percentage needed to make motor turn. */
	startpercent_ = 3;
     a1e:	40 e0       	ldi	r20, 0x00	; 0
     a20:	50 e0       	ldi	r21, 0x00	; 0
     a22:	60 e4       	ldi	r22, 0x40	; 64
     a24:	70 e4       	ldi	r23, 0x40	; 64
     a26:	4a 8b       	std	Y+18, r20	; 0x12
     a28:	5b 8b       	std	Y+19, r21	; 0x13
     a2a:	6c 8b       	std	Y+20, r22	; 0x14
     a2c:	7d 8b       	std	Y+21, r23	; 0x15

	/* This value is the delay on motor. A lower value makes motors go faster and higher value makes motors go slower. Value is in MS */
	delay_ = 10;
     a2e:	2a e0       	ldi	r18, 0x0A	; 10
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	3f 8b       	std	Y+23, r19	; 0x17
     a34:	2e 8b       	std	Y+22, r18	; 0x16
	virtual void TurnMotor() = 0;
	virtual void SetDegrees( uint8_t degrees )
	{
		percent_ = percentPrDeg * degrees + startpercent_;
     a36:	46 e6       	ldi	r20, 0x66	; 102
     a38:	56 e6       	ldi	r21, 0x66	; 102
     a3a:	66 e0       	ldi	r22, 0x06	; 6
     a3c:	71 e4       	ldi	r23, 0x41	; 65
     a3e:	4a 87       	std	Y+10, r20	; 0x0a
     a40:	5b 87       	std	Y+11, r21	; 0x0b
     a42:	6c 87       	std	Y+12, r22	; 0x0c
     a44:	7d 87       	std	Y+13, r23	; 0x0d

	/* Set motor to default startup value */
	SetDegrees( 90 );
	tmr1Ptr_->setDutyCycleComB( percent_ );
     a46:	21 d5       	rcall	.+2626   	; 0x148a <_ZN6Timer116setDutyCycleComBEf>
	oldPercent_ = percent_;
     a48:	8a 85       	ldd	r24, Y+10	; 0x0a
     a4a:	9b 85       	ldd	r25, Y+11	; 0x0b
     a4c:	ac 85       	ldd	r26, Y+12	; 0x0c
     a4e:	bd 85       	ldd	r27, Y+13	; 0x0d
     a50:	8e 87       	std	Y+14, r24	; 0x0e
     a52:	9f 87       	std	Y+15, r25	; 0x0f
     a54:	a8 8b       	std	Y+16, r26	; 0x10
     a56:	b9 8b       	std	Y+17, r27	; 0x11
}
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	08 95       	ret

00000a5e <_ZN2M3D1Ev>:

class Motor
{
//functions
public:
	virtual ~Motor() {};
     a5e:	26 e1       	ldi	r18, 0x16	; 22
     a60:	32 e0       	ldi	r19, 0x02	; 2
     a62:	fc 01       	movw	r30, r24
     a64:	31 83       	std	Z+1, r19	; 0x01
     a66:	20 83       	st	Z, r18
     a68:	08 95       	ret

00000a6a <_ZN2M3D0Ev>:
	SetDegrees(90);
	tmr1Ptr_->setDutyCycleComC( percent_ );
	oldPercent_ = percent_;	
}

M3::~M3()
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	ec 01       	movw	r28, r24
{
}
     a70:	f6 df       	rcall	.-20     	; 0xa5e <_ZN2M3D1Ev>
		return p;
	}

	void operator delete( void * p ) // or delete(void *, std::size_t)
	{
		free( p );
     a72:	ce 01       	movw	r24, r28
     a74:	0e 94 ad 13 	call	0x275a	; 0x275a <free>
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	08 95       	ret

00000a7e <_ZN2M39TurnMotorEv>:

void M3::TurnMotor()
{
     a7e:	4f 92       	push	r4
     a80:	5f 92       	push	r5
     a82:	6f 92       	push	r6
     a84:	7f 92       	push	r7
     a86:	8f 92       	push	r8
     a88:	9f 92       	push	r9
     a8a:	af 92       	push	r10
     a8c:	bf 92       	push	r11
     a8e:	cf 92       	push	r12
     a90:	df 92       	push	r13
     a92:	ef 92       	push	r14
     a94:	ff 92       	push	r15
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	ec 01       	movw	r28, r24
	if ( percent_ > oldPercent_ + PERCENT_PR_TICK )
     a9c:	8a 84       	ldd	r8, Y+10	; 0x0a
     a9e:	9b 84       	ldd	r9, Y+11	; 0x0b
     aa0:	ac 84       	ldd	r10, Y+12	; 0x0c
     aa2:	bd 84       	ldd	r11, Y+13	; 0x0d
     aa4:	ce 84       	ldd	r12, Y+14	; 0x0e
     aa6:	df 84       	ldd	r13, Y+15	; 0x0f
     aa8:	e8 88       	ldd	r14, Y+16	; 0x10
     aaa:	f9 88       	ldd	r15, Y+17	; 0x11
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	40 e8       	ldi	r20, 0x80	; 128
     ab2:	5d e3       	ldi	r21, 0x3D	; 61
     ab4:	c7 01       	movw	r24, r14
     ab6:	b6 01       	movw	r22, r12
     ab8:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__addsf3>
     abc:	2b 01       	movw	r4, r22
     abe:	3c 01       	movw	r6, r24
     ac0:	9b 01       	movw	r18, r22
     ac2:	ac 01       	movw	r20, r24
     ac4:	c5 01       	movw	r24, r10
     ac6:	b4 01       	movw	r22, r8
     ac8:	0e 94 97 12 	call	0x252e	; 0x252e <__gesf2>
     acc:	18 16       	cp	r1, r24
     ace:	74 f4       	brge	.+28     	; 0xaec <_ZN2M39TurnMotorEv+0x6e>
	{
		oldPercent_ += PERCENT_PR_TICK;
     ad0:	4e 86       	std	Y+14, r4	; 0x0e
     ad2:	5f 86       	std	Y+15, r5	; 0x0f
     ad4:	68 8a       	std	Y+16, r6	; 0x10
     ad6:	79 8a       	std	Y+17, r7	; 0x11
		tmr1Ptr_->setDutyCycleComC( oldPercent_ );
     ad8:	b3 01       	movw	r22, r6
     ada:	a2 01       	movw	r20, r4
     adc:	8a 81       	ldd	r24, Y+2	; 0x02
     ade:	9b 81       	ldd	r25, Y+3	; 0x03
     ae0:	13 d5       	rcall	.+2598   	; 0x1508 <_ZN6Timer116setDutyCycleComCEf>
		vTaskDelay( delay_ / portTICK_RATE_MS );
     ae2:	8e 89       	ldd	r24, Y+22	; 0x16
     ae4:	9f 89       	ldd	r25, Y+23	; 0x17
     ae6:	0e 94 72 10 	call	0x20e4	; 0x20e4 <vTaskDelay>
     aea:	1d c0       	rjmp	.+58     	; 0xb26 <_ZN2M39TurnMotorEv+0xa8>
	}
	else if ( percent_ < oldPercent_ )
     aec:	a7 01       	movw	r20, r14
     aee:	96 01       	movw	r18, r12
     af0:	c5 01       	movw	r24, r10
     af2:	b4 01       	movw	r22, r8
     af4:	0e 94 4d 11 	call	0x229a	; 0x229a <__cmpsf2>
     af8:	88 23       	and	r24, r24
     afa:	ac f4       	brge	.+42     	; 0xb26 <_ZN2M39TurnMotorEv+0xa8>
	{
		oldPercent_ -= PERCENT_PR_TICK;
     afc:	20 e0       	ldi	r18, 0x00	; 0
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	40 e8       	ldi	r20, 0x80	; 128
     b02:	5d e3       	ldi	r21, 0x3D	; 61
     b04:	c7 01       	movw	r24, r14
     b06:	b6 01       	movw	r22, r12
     b08:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <__subsf3>
     b0c:	ab 01       	movw	r20, r22
     b0e:	bc 01       	movw	r22, r24
     b10:	4e 87       	std	Y+14, r20	; 0x0e
     b12:	5f 87       	std	Y+15, r21	; 0x0f
     b14:	68 8b       	std	Y+16, r22	; 0x10
     b16:	79 8b       	std	Y+17, r23	; 0x11
		tmr1Ptr_->setDutyCycleComC( oldPercent_ );
     b18:	8a 81       	ldd	r24, Y+2	; 0x02
     b1a:	9b 81       	ldd	r25, Y+3	; 0x03
     b1c:	f5 d4       	rcall	.+2538   	; 0x1508 <_ZN6Timer116setDutyCycleComCEf>
		vTaskDelay( delay_ / portTICK_RATE_MS );
     b1e:	8e 89       	ldd	r24, Y+22	; 0x16
     b20:	9f 89       	ldd	r25, Y+23	; 0x17
     b22:	0e 94 72 10 	call	0x20e4	; 0x20e4 <vTaskDelay>
	}
}
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	ff 90       	pop	r15
     b2c:	ef 90       	pop	r14
     b2e:	df 90       	pop	r13
     b30:	cf 90       	pop	r12
     b32:	bf 90       	pop	r11
     b34:	af 90       	pop	r10
     b36:	9f 90       	pop	r9
     b38:	8f 90       	pop	r8
     b3a:	7f 90       	pop	r7
     b3c:	6f 90       	pop	r6
     b3e:	5f 90       	pop	r5
     b40:	4f 90       	pop	r4
     b42:	08 95       	ret

00000b44 <_ZN2M3C1EP6Timer1>:
* Author: jespe
*/

#include "M3.h"

M3::M3( Timer1* tmr )
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	ec 01       	movw	r28, r24
     b4a:	cb 01       	movw	r24, r22
     b4c:	2a e3       	ldi	r18, 0x3A	; 58
     b4e:	32 e0       	ldi	r19, 0x02	; 2
     b50:	39 83       	std	Y+1, r19	; 0x01
     b52:	28 83       	st	Y, r18
{
	/* Store timer pointer */
	tmr1Ptr_ = tmr;
     b54:	7b 83       	std	Y+3, r23	; 0x03
     b56:	6a 83       	std	Y+2, r22	; 0x02
		
	/* This value is number of percent to add or subtract pr degree. */
	percentPrDeg = 0.0555555555555556;
     b58:	49 e3       	ldi	r20, 0x39	; 57
     b5a:	5e e8       	ldi	r21, 0x8E	; 142
     b5c:	63 e6       	ldi	r22, 0x63	; 99
     b5e:	7d e3       	ldi	r23, 0x3D	; 61
     b60:	4e 83       	std	Y+6, r20	; 0x06
     b62:	5f 83       	std	Y+7, r21	; 0x07
     b64:	68 87       	std	Y+8, r22	; 0x08
     b66:	79 87       	std	Y+9, r23	; 0x09
	
	/* This value is the lowest duty cycle percentage needed to make motor turn. */
	startpercent_ = 2.5;
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	60 e2       	ldi	r22, 0x20	; 32
     b6e:	70 e4       	ldi	r23, 0x40	; 64
     b70:	4a 8b       	std	Y+18, r20	; 0x12
     b72:	5b 8b       	std	Y+19, r21	; 0x13
     b74:	6c 8b       	std	Y+20, r22	; 0x14
     b76:	7d 8b       	std	Y+21, r23	; 0x15

	/* This value is the delay on motor. A lower value makes motors go faster and higher value makes motors go slower. Value is in MS */
	delay_ = 7;
     b78:	27 e0       	ldi	r18, 0x07	; 7
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	3f 8b       	std	Y+23, r19	; 0x17
     b7e:	2e 8b       	std	Y+22, r18	; 0x16
	virtual void TurnMotor() = 0;
	virtual void SetDegrees( uint8_t degrees )
	{
		percent_ = percentPrDeg * degrees + startpercent_;
     b80:	40 e0       	ldi	r20, 0x00	; 0
     b82:	50 e0       	ldi	r21, 0x00	; 0
     b84:	60 ef       	ldi	r22, 0xF0	; 240
     b86:	70 e4       	ldi	r23, 0x40	; 64
     b88:	4a 87       	std	Y+10, r20	; 0x0a
     b8a:	5b 87       	std	Y+11, r21	; 0x0b
     b8c:	6c 87       	std	Y+12, r22	; 0x0c
     b8e:	7d 87       	std	Y+13, r23	; 0x0d
	
	/* Set motor to default startup value */
	SetDegrees(90);
	tmr1Ptr_->setDutyCycleComC( percent_ );
     b90:	bb d4       	rcall	.+2422   	; 0x1508 <_ZN6Timer116setDutyCycleComCEf>
	oldPercent_ = percent_;	
     b92:	8a 85       	ldd	r24, Y+10	; 0x0a
     b94:	9b 85       	ldd	r25, Y+11	; 0x0b
     b96:	ac 85       	ldd	r26, Y+12	; 0x0c
     b98:	bd 85       	ldd	r27, Y+13	; 0x0d
     b9a:	8e 87       	std	Y+14, r24	; 0x0e
     b9c:	9f 87       	std	Y+15, r25	; 0x0f
     b9e:	a8 8b       	std	Y+16, r26	; 0x10
     ba0:	b9 8b       	std	Y+17, r27	; 0x11
}
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	08 95       	ret

00000ba8 <_ZN2M4D1Ev>:

class Motor
{
//functions
public:
	virtual ~Motor() {};
     ba8:	26 e1       	ldi	r18, 0x16	; 22
     baa:	32 e0       	ldi	r19, 0x02	; 2
     bac:	fc 01       	movw	r30, r24
     bae:	31 83       	std	Z+1, r19	; 0x01
     bb0:	20 83       	st	Z, r18
     bb2:	08 95       	ret

00000bb4 <_ZN2M4D0Ev>:
	SetDegrees(90);
	tmr3Ptr_->setDutyCycleComA( percent_ );
	oldPercent_ = percent_;
}

M4::~M4()
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	ec 01       	movw	r28, r24
{
} 
     bba:	f6 df       	rcall	.-20     	; 0xba8 <_ZN2M4D1Ev>
		return p;
	}

	void operator delete( void * p ) // or delete(void *, std::size_t)
	{
		free( p );
     bbc:	ce 01       	movw	r24, r28
     bbe:	0e 94 ad 13 	call	0x275a	; 0x275a <free>
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	08 95       	ret

00000bc8 <_ZN2M49TurnMotorEv>:

void M4::TurnMotor()
{
     bc8:	4f 92       	push	r4
     bca:	5f 92       	push	r5
     bcc:	6f 92       	push	r6
     bce:	7f 92       	push	r7
     bd0:	8f 92       	push	r8
     bd2:	9f 92       	push	r9
     bd4:	af 92       	push	r10
     bd6:	bf 92       	push	r11
     bd8:	cf 92       	push	r12
     bda:	df 92       	push	r13
     bdc:	ef 92       	push	r14
     bde:	ff 92       	push	r15
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	ec 01       	movw	r28, r24
	if ( percent_ > oldPercent_ + PERCENT_PR_TICK )
     be6:	8a 84       	ldd	r8, Y+10	; 0x0a
     be8:	9b 84       	ldd	r9, Y+11	; 0x0b
     bea:	ac 84       	ldd	r10, Y+12	; 0x0c
     bec:	bd 84       	ldd	r11, Y+13	; 0x0d
     bee:	ce 84       	ldd	r12, Y+14	; 0x0e
     bf0:	df 84       	ldd	r13, Y+15	; 0x0f
     bf2:	e8 88       	ldd	r14, Y+16	; 0x10
     bf4:	f9 88       	ldd	r15, Y+17	; 0x11
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	40 e8       	ldi	r20, 0x80	; 128
     bfc:	5d e3       	ldi	r21, 0x3D	; 61
     bfe:	c7 01       	movw	r24, r14
     c00:	b6 01       	movw	r22, r12
     c02:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__addsf3>
     c06:	2b 01       	movw	r4, r22
     c08:	3c 01       	movw	r6, r24
     c0a:	9b 01       	movw	r18, r22
     c0c:	ac 01       	movw	r20, r24
     c0e:	c5 01       	movw	r24, r10
     c10:	b4 01       	movw	r22, r8
     c12:	0e 94 97 12 	call	0x252e	; 0x252e <__gesf2>
     c16:	18 16       	cp	r1, r24
     c18:	74 f4       	brge	.+28     	; 0xc36 <_ZN2M49TurnMotorEv+0x6e>
	{
		oldPercent_ += PERCENT_PR_TICK;
     c1a:	4e 86       	std	Y+14, r4	; 0x0e
     c1c:	5f 86       	std	Y+15, r5	; 0x0f
     c1e:	68 8a       	std	Y+16, r6	; 0x10
     c20:	79 8a       	std	Y+17, r7	; 0x11
		tmr3Ptr_->setDutyCycleComA( oldPercent_ );
     c22:	b3 01       	movw	r22, r6
     c24:	a2 01       	movw	r20, r4
     c26:	8c 81       	ldd	r24, Y+4	; 0x04
     c28:	9d 81       	ldd	r25, Y+5	; 0x05
     c2a:	ca d4       	rcall	.+2452   	; 0x15c0 <_ZN6Timer316setDutyCycleComAEf>
		vTaskDelay( 10 / portTICK_RATE_MS );
     c2c:	8a e0       	ldi	r24, 0x0A	; 10
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0e 94 72 10 	call	0x20e4	; 0x20e4 <vTaskDelay>
     c34:	1d c0       	rjmp	.+58     	; 0xc70 <_ZN2M49TurnMotorEv+0xa8>
	}
	else if ( percent_ < oldPercent_ )
     c36:	a7 01       	movw	r20, r14
     c38:	96 01       	movw	r18, r12
     c3a:	c5 01       	movw	r24, r10
     c3c:	b4 01       	movw	r22, r8
     c3e:	0e 94 4d 11 	call	0x229a	; 0x229a <__cmpsf2>
     c42:	88 23       	and	r24, r24
     c44:	ac f4       	brge	.+42     	; 0xc70 <_ZN2M49TurnMotorEv+0xa8>
	{
		oldPercent_ -= PERCENT_PR_TICK;
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	40 e8       	ldi	r20, 0x80	; 128
     c4c:	5d e3       	ldi	r21, 0x3D	; 61
     c4e:	c7 01       	movw	r24, r14
     c50:	b6 01       	movw	r22, r12
     c52:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <__subsf3>
     c56:	ab 01       	movw	r20, r22
     c58:	bc 01       	movw	r22, r24
     c5a:	4e 87       	std	Y+14, r20	; 0x0e
     c5c:	5f 87       	std	Y+15, r21	; 0x0f
     c5e:	68 8b       	std	Y+16, r22	; 0x10
     c60:	79 8b       	std	Y+17, r23	; 0x11
		tmr3Ptr_->setDutyCycleComA( oldPercent_ );
     c62:	8c 81       	ldd	r24, Y+4	; 0x04
     c64:	9d 81       	ldd	r25, Y+5	; 0x05
     c66:	ac d4       	rcall	.+2392   	; 0x15c0 <_ZN6Timer316setDutyCycleComAEf>
		vTaskDelay( 10 / portTICK_RATE_MS );
     c68:	8a e0       	ldi	r24, 0x0A	; 10
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	0e 94 72 10 	call	0x20e4	; 0x20e4 <vTaskDelay>
	}
}
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	cf 90       	pop	r12
     c7c:	bf 90       	pop	r11
     c7e:	af 90       	pop	r10
     c80:	9f 90       	pop	r9
     c82:	8f 90       	pop	r8
     c84:	7f 90       	pop	r7
     c86:	6f 90       	pop	r6
     c88:	5f 90       	pop	r5
     c8a:	4f 90       	pop	r4
     c8c:	08 95       	ret

00000c8e <_ZN2M4C1EP6Timer3>:
* Author: jespe
*/

#include "M4.h"

M4::M4( Timer3* tmr )
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	ec 01       	movw	r28, r24
     c94:	cb 01       	movw	r24, r22
     c96:	26 e4       	ldi	r18, 0x46	; 70
     c98:	32 e0       	ldi	r19, 0x02	; 2
     c9a:	39 83       	std	Y+1, r19	; 0x01
     c9c:	28 83       	st	Y, r18
{
	/* Store timer pointer */
	tmr3Ptr_ = tmr;
     c9e:	7d 83       	std	Y+5, r23	; 0x05
     ca0:	6c 83       	std	Y+4, r22	; 0x04
	
	/* This value is number of percent to add or subtract pr degree. */
	percentPrDeg = 0.0555555555555556;
     ca2:	49 e3       	ldi	r20, 0x39	; 57
     ca4:	5e e8       	ldi	r21, 0x8E	; 142
     ca6:	63 e6       	ldi	r22, 0x63	; 99
     ca8:	7d e3       	ldi	r23, 0x3D	; 61
     caa:	4e 83       	std	Y+6, r20	; 0x06
     cac:	5f 83       	std	Y+7, r21	; 0x07
     cae:	68 87       	std	Y+8, r22	; 0x08
     cb0:	79 87       	std	Y+9, r23	; 0x09
	
	/* This value is the lowest duty cycle percentage needed to make motor turn. */
	startpercent_ = 2.5;
     cb2:	40 e0       	ldi	r20, 0x00	; 0
     cb4:	50 e0       	ldi	r21, 0x00	; 0
     cb6:	60 e2       	ldi	r22, 0x20	; 32
     cb8:	70 e4       	ldi	r23, 0x40	; 64
     cba:	4a 8b       	std	Y+18, r20	; 0x12
     cbc:	5b 8b       	std	Y+19, r21	; 0x13
     cbe:	6c 8b       	std	Y+20, r22	; 0x14
     cc0:	7d 8b       	std	Y+21, r23	; 0x15
		
	/* This value is the delay on motor. A lower value makes motors go faster and higher value makes motors go slower. Value is in MS */
	delay_ = 5;
     cc2:	25 e0       	ldi	r18, 0x05	; 5
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	3f 8b       	std	Y+23, r19	; 0x17
     cc8:	2e 8b       	std	Y+22, r18	; 0x16
	virtual void TurnMotor() = 0;
	virtual void SetDegrees( uint8_t degrees )
	{
		percent_ = percentPrDeg * degrees + startpercent_;
     cca:	40 e0       	ldi	r20, 0x00	; 0
     ccc:	50 e0       	ldi	r21, 0x00	; 0
     cce:	60 ef       	ldi	r22, 0xF0	; 240
     cd0:	70 e4       	ldi	r23, 0x40	; 64
     cd2:	4a 87       	std	Y+10, r20	; 0x0a
     cd4:	5b 87       	std	Y+11, r21	; 0x0b
     cd6:	6c 87       	std	Y+12, r22	; 0x0c
     cd8:	7d 87       	std	Y+13, r23	; 0x0d
	
	/* Set motor to default startup value */
	SetDegrees(90);
	tmr3Ptr_->setDutyCycleComA( percent_ );
     cda:	72 d4       	rcall	.+2276   	; 0x15c0 <_ZN6Timer316setDutyCycleComAEf>
	oldPercent_ = percent_;
     cdc:	8a 85       	ldd	r24, Y+10	; 0x0a
     cde:	9b 85       	ldd	r25, Y+11	; 0x0b
     ce0:	ac 85       	ldd	r26, Y+12	; 0x0c
     ce2:	bd 85       	ldd	r27, Y+13	; 0x0d
     ce4:	8e 87       	std	Y+14, r24	; 0x0e
     ce6:	9f 87       	std	Y+15, r25	; 0x0f
     ce8:	a8 8b       	std	Y+16, r26	; 0x10
     cea:	b9 8b       	std	Y+17, r27	; 0x11
}
     cec:	df 91       	pop	r29
     cee:	cf 91       	pop	r28
     cf0:	08 95       	ret

00000cf2 <_ZN2M5D1Ev>:

class Motor
{
//functions
public:
	virtual ~Motor() {};
     cf2:	26 e1       	ldi	r18, 0x16	; 22
     cf4:	32 e0       	ldi	r19, 0x02	; 2
     cf6:	fc 01       	movw	r30, r24
     cf8:	31 83       	std	Z+1, r19	; 0x01
     cfa:	20 83       	st	Z, r18
     cfc:	08 95       	ret

00000cfe <_ZN2M5D0Ev>:
	SetDegrees(0);
	tmr3Ptr_->setDutyCycleComB( percent_ );
	oldPercent_ = percent_;
}

M5::~M5()
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
     d02:	ec 01       	movw	r28, r24
{
}
     d04:	f6 df       	rcall	.-20     	; 0xcf2 <_ZN2M5D1Ev>
		return p;
	}

	void operator delete( void * p ) // or delete(void *, std::size_t)
	{
		free( p );
     d06:	ce 01       	movw	r24, r28
     d08:	0e 94 ad 13 	call	0x275a	; 0x275a <free>
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	08 95       	ret

00000d12 <_ZN2M59TurnMotorEv>:

void M5::TurnMotor()
{
     d12:	4f 92       	push	r4
     d14:	5f 92       	push	r5
     d16:	6f 92       	push	r6
     d18:	7f 92       	push	r7
     d1a:	8f 92       	push	r8
     d1c:	9f 92       	push	r9
     d1e:	af 92       	push	r10
     d20:	bf 92       	push	r11
     d22:	cf 92       	push	r12
     d24:	df 92       	push	r13
     d26:	ef 92       	push	r14
     d28:	ff 92       	push	r15
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	ec 01       	movw	r28, r24
	if ( percent_ > oldPercent_ + PERCENT_PR_TICK )
     d30:	8a 84       	ldd	r8, Y+10	; 0x0a
     d32:	9b 84       	ldd	r9, Y+11	; 0x0b
     d34:	ac 84       	ldd	r10, Y+12	; 0x0c
     d36:	bd 84       	ldd	r11, Y+13	; 0x0d
     d38:	ce 84       	ldd	r12, Y+14	; 0x0e
     d3a:	df 84       	ldd	r13, Y+15	; 0x0f
     d3c:	e8 88       	ldd	r14, Y+16	; 0x10
     d3e:	f9 88       	ldd	r15, Y+17	; 0x11
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	40 e8       	ldi	r20, 0x80	; 128
     d46:	5d e3       	ldi	r21, 0x3D	; 61
     d48:	c7 01       	movw	r24, r14
     d4a:	b6 01       	movw	r22, r12
     d4c:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__addsf3>
     d50:	2b 01       	movw	r4, r22
     d52:	3c 01       	movw	r6, r24
     d54:	9b 01       	movw	r18, r22
     d56:	ac 01       	movw	r20, r24
     d58:	c5 01       	movw	r24, r10
     d5a:	b4 01       	movw	r22, r8
     d5c:	0e 94 97 12 	call	0x252e	; 0x252e <__gesf2>
     d60:	18 16       	cp	r1, r24
     d62:	74 f4       	brge	.+28     	; 0xd80 <_ZN2M59TurnMotorEv+0x6e>
	{
		oldPercent_ += PERCENT_PR_TICK;
     d64:	4e 86       	std	Y+14, r4	; 0x0e
     d66:	5f 86       	std	Y+15, r5	; 0x0f
     d68:	68 8a       	std	Y+16, r6	; 0x10
     d6a:	79 8a       	std	Y+17, r7	; 0x11
		tmr3Ptr_->setDutyCycleComB( oldPercent_ );
     d6c:	b3 01       	movw	r22, r6
     d6e:	a2 01       	movw	r20, r4
     d70:	8c 81       	ldd	r24, Y+4	; 0x04
     d72:	9d 81       	ldd	r25, Y+5	; 0x05
     d74:	63 d4       	rcall	.+2246   	; 0x163c <_ZN6Timer316setDutyCycleComBEf>
		vTaskDelay( delay_ / portTICK_RATE_MS );
     d76:	8e 89       	ldd	r24, Y+22	; 0x16
     d78:	9f 89       	ldd	r25, Y+23	; 0x17
     d7a:	0e 94 72 10 	call	0x20e4	; 0x20e4 <vTaskDelay>
     d7e:	1d c0       	rjmp	.+58     	; 0xdba <_ZN2M59TurnMotorEv+0xa8>
	}
	else if ( percent_ < oldPercent_ )
     d80:	a7 01       	movw	r20, r14
     d82:	96 01       	movw	r18, r12
     d84:	c5 01       	movw	r24, r10
     d86:	b4 01       	movw	r22, r8
     d88:	0e 94 4d 11 	call	0x229a	; 0x229a <__cmpsf2>
     d8c:	88 23       	and	r24, r24
     d8e:	ac f4       	brge	.+42     	; 0xdba <_ZN2M59TurnMotorEv+0xa8>
	{
		oldPercent_ -= PERCENT_PR_TICK;
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	40 e8       	ldi	r20, 0x80	; 128
     d96:	5d e3       	ldi	r21, 0x3D	; 61
     d98:	c7 01       	movw	r24, r14
     d9a:	b6 01       	movw	r22, r12
     d9c:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <__subsf3>
     da0:	ab 01       	movw	r20, r22
     da2:	bc 01       	movw	r22, r24
     da4:	4e 87       	std	Y+14, r20	; 0x0e
     da6:	5f 87       	std	Y+15, r21	; 0x0f
     da8:	68 8b       	std	Y+16, r22	; 0x10
     daa:	79 8b       	std	Y+17, r23	; 0x11
		tmr3Ptr_->setDutyCycleComB( oldPercent_ );
     dac:	8c 81       	ldd	r24, Y+4	; 0x04
     dae:	9d 81       	ldd	r25, Y+5	; 0x05
     db0:	45 d4       	rcall	.+2186   	; 0x163c <_ZN6Timer316setDutyCycleComBEf>
		vTaskDelay( delay_ / portTICK_RATE_MS );
     db2:	8e 89       	ldd	r24, Y+22	; 0x16
     db4:	9f 89       	ldd	r25, Y+23	; 0x17
     db6:	0e 94 72 10 	call	0x20e4	; 0x20e4 <vTaskDelay>
	}
}
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	ff 90       	pop	r15
     dc0:	ef 90       	pop	r14
     dc2:	df 90       	pop	r13
     dc4:	cf 90       	pop	r12
     dc6:	bf 90       	pop	r11
     dc8:	af 90       	pop	r10
     dca:	9f 90       	pop	r9
     dcc:	8f 90       	pop	r8
     dce:	7f 90       	pop	r7
     dd0:	6f 90       	pop	r6
     dd2:	5f 90       	pop	r5
     dd4:	4f 90       	pop	r4
     dd6:	08 95       	ret

00000dd8 <_ZN2M5C1EP6Timer3>:
* Author: jespe
*/

#include "M5.h"

M5::M5( Timer3* tmr )
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	ec 01       	movw	r28, r24
     dde:	cb 01       	movw	r24, r22
     de0:	22 e5       	ldi	r18, 0x52	; 82
     de2:	32 e0       	ldi	r19, 0x02	; 2
     de4:	39 83       	std	Y+1, r19	; 0x01
     de6:	28 83       	st	Y, r18
{
	/* Store timer pointer */
	tmr3Ptr_ = tmr;
     de8:	7d 83       	std	Y+5, r23	; 0x05
     dea:	6c 83       	std	Y+4, r22	; 0x04
	
	/* This value is number of percent to add or subtract pr degree. */
	percentPrDeg = 0.0555555555555556;
     dec:	49 e3       	ldi	r20, 0x39	; 57
     dee:	5e e8       	ldi	r21, 0x8E	; 142
     df0:	63 e6       	ldi	r22, 0x63	; 99
     df2:	7d e3       	ldi	r23, 0x3D	; 61
     df4:	4e 83       	std	Y+6, r20	; 0x06
     df6:	5f 83       	std	Y+7, r21	; 0x07
     df8:	68 87       	std	Y+8, r22	; 0x08
     dfa:	79 87       	std	Y+9, r23	; 0x09
	
	/* This value is the lowest duty cycle percentage needed to make motor turn. */
	startpercent_ = 2.5;
     dfc:	40 e0       	ldi	r20, 0x00	; 0
     dfe:	50 e0       	ldi	r21, 0x00	; 0
     e00:	60 e2       	ldi	r22, 0x20	; 32
     e02:	70 e4       	ldi	r23, 0x40	; 64
     e04:	4a 8b       	std	Y+18, r20	; 0x12
     e06:	5b 8b       	std	Y+19, r21	; 0x13
     e08:	6c 8b       	std	Y+20, r22	; 0x14
     e0a:	7d 8b       	std	Y+21, r23	; 0x15
	
	/* This value is the delay on motor. A lower value makes motors go faster and higher value makes motors go slower. Value is in MS */
	delay_ = 1;
     e0c:	21 e0       	ldi	r18, 0x01	; 1
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	3f 8b       	std	Y+23, r19	; 0x17
     e12:	2e 8b       	std	Y+22, r18	; 0x16
	virtual void TurnMotor() = 0;
	virtual void SetDegrees( uint8_t degrees )
	{
		percent_ = percentPrDeg * degrees + startpercent_;
     e14:	4a 87       	std	Y+10, r20	; 0x0a
     e16:	5b 87       	std	Y+11, r21	; 0x0b
     e18:	6c 87       	std	Y+12, r22	; 0x0c
     e1a:	7d 87       	std	Y+13, r23	; 0x0d
	
	/* Set motor to default startup value */
	SetDegrees(0);
	tmr3Ptr_->setDutyCycleComB( percent_ );
     e1c:	0f d4       	rcall	.+2078   	; 0x163c <_ZN6Timer316setDutyCycleComBEf>
	oldPercent_ = percent_;
     e1e:	8a 85       	ldd	r24, Y+10	; 0x0a
     e20:	9b 85       	ldd	r25, Y+11	; 0x0b
     e22:	ac 85       	ldd	r26, Y+12	; 0x0c
     e24:	bd 85       	ldd	r27, Y+13	; 0x0d
     e26:	8e 87       	std	Y+14, r24	; 0x0e
     e28:	9f 87       	std	Y+15, r25	; 0x0f
     e2a:	a8 8b       	std	Y+16, r26	; 0x10
     e2c:	b9 8b       	std	Y+17, r27	; 0x11
}
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	08 95       	ret

00000e34 <_ZN2M6D1Ev>:

class Motor
{
//functions
public:
	virtual ~Motor() {};
     e34:	26 e1       	ldi	r18, 0x16	; 22
     e36:	32 e0       	ldi	r19, 0x02	; 2
     e38:	fc 01       	movw	r30, r24
     e3a:	31 83       	std	Z+1, r19	; 0x01
     e3c:	20 83       	st	Z, r18
     e3e:	08 95       	ret

00000e40 <_ZN2M6D0Ev>:
	SetDegrees(0);
	tmr3Ptr_->setDutyCycleComC( percent_ );
	oldPercent_ = percent_;
}

M6::~M6()
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	ec 01       	movw	r28, r24
{
}
     e46:	f6 df       	rcall	.-20     	; 0xe34 <_ZN2M6D1Ev>
		return p;
	}

	void operator delete( void * p ) // or delete(void *, std::size_t)
	{
		free( p );
     e48:	ce 01       	movw	r24, r28
     e4a:	0e 94 ad 13 	call	0x275a	; 0x275a <free>
     e4e:	df 91       	pop	r29
     e50:	cf 91       	pop	r28
     e52:	08 95       	ret

00000e54 <_ZN2M69TurnMotorEv>:

void M6::TurnMotor()
{
     e54:	4f 92       	push	r4
     e56:	5f 92       	push	r5
     e58:	6f 92       	push	r6
     e5a:	7f 92       	push	r7
     e5c:	8f 92       	push	r8
     e5e:	9f 92       	push	r9
     e60:	af 92       	push	r10
     e62:	bf 92       	push	r11
     e64:	cf 92       	push	r12
     e66:	df 92       	push	r13
     e68:	ef 92       	push	r14
     e6a:	ff 92       	push	r15
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	ec 01       	movw	r28, r24
	if ( percent_ > oldPercent_ + PERCENT_PR_TICK )
     e72:	8a 84       	ldd	r8, Y+10	; 0x0a
     e74:	9b 84       	ldd	r9, Y+11	; 0x0b
     e76:	ac 84       	ldd	r10, Y+12	; 0x0c
     e78:	bd 84       	ldd	r11, Y+13	; 0x0d
     e7a:	ce 84       	ldd	r12, Y+14	; 0x0e
     e7c:	df 84       	ldd	r13, Y+15	; 0x0f
     e7e:	e8 88       	ldd	r14, Y+16	; 0x10
     e80:	f9 88       	ldd	r15, Y+17	; 0x11
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	40 e8       	ldi	r20, 0x80	; 128
     e88:	5d e3       	ldi	r21, 0x3D	; 61
     e8a:	c7 01       	movw	r24, r14
     e8c:	b6 01       	movw	r22, r12
     e8e:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__addsf3>
     e92:	2b 01       	movw	r4, r22
     e94:	3c 01       	movw	r6, r24
     e96:	9b 01       	movw	r18, r22
     e98:	ac 01       	movw	r20, r24
     e9a:	c5 01       	movw	r24, r10
     e9c:	b4 01       	movw	r22, r8
     e9e:	0e 94 97 12 	call	0x252e	; 0x252e <__gesf2>
     ea2:	18 16       	cp	r1, r24
     ea4:	74 f4       	brge	.+28     	; 0xec2 <_ZN2M69TurnMotorEv+0x6e>
	{
		oldPercent_ += 0.0625;
     ea6:	4e 86       	std	Y+14, r4	; 0x0e
     ea8:	5f 86       	std	Y+15, r5	; 0x0f
     eaa:	68 8a       	std	Y+16, r6	; 0x10
     eac:	79 8a       	std	Y+17, r7	; 0x11
		tmr3Ptr_->setDutyCycleComC( oldPercent_ );
     eae:	b3 01       	movw	r22, r6
     eb0:	a2 01       	movw	r20, r4
     eb2:	8c 81       	ldd	r24, Y+4	; 0x04
     eb4:	9d 81       	ldd	r25, Y+5	; 0x05
     eb6:	ff d3       	rcall	.+2046   	; 0x16b6 <_ZN6Timer316setDutyCycleComCEf>
		vTaskDelay( delay_ / portTICK_RATE_MS );
     eb8:	8e 89       	ldd	r24, Y+22	; 0x16
     eba:	9f 89       	ldd	r25, Y+23	; 0x17
     ebc:	0e 94 72 10 	call	0x20e4	; 0x20e4 <vTaskDelay>
     ec0:	1d c0       	rjmp	.+58     	; 0xefc <_ZN2M69TurnMotorEv+0xa8>
	}
	else if ( percent_ < oldPercent_ )
     ec2:	a7 01       	movw	r20, r14
     ec4:	96 01       	movw	r18, r12
     ec6:	c5 01       	movw	r24, r10
     ec8:	b4 01       	movw	r22, r8
     eca:	0e 94 4d 11 	call	0x229a	; 0x229a <__cmpsf2>
     ece:	88 23       	and	r24, r24
     ed0:	ac f4       	brge	.+42     	; 0xefc <_ZN2M69TurnMotorEv+0xa8>
	{
		oldPercent_ -= 0.0625;
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	40 e8       	ldi	r20, 0x80	; 128
     ed8:	5d e3       	ldi	r21, 0x3D	; 61
     eda:	c7 01       	movw	r24, r14
     edc:	b6 01       	movw	r22, r12
     ede:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <__subsf3>
     ee2:	ab 01       	movw	r20, r22
     ee4:	bc 01       	movw	r22, r24
     ee6:	4e 87       	std	Y+14, r20	; 0x0e
     ee8:	5f 87       	std	Y+15, r21	; 0x0f
     eea:	68 8b       	std	Y+16, r22	; 0x10
     eec:	79 8b       	std	Y+17, r23	; 0x11
		tmr3Ptr_->setDutyCycleComC( oldPercent_ );
     eee:	8c 81       	ldd	r24, Y+4	; 0x04
     ef0:	9d 81       	ldd	r25, Y+5	; 0x05
     ef2:	e1 d3       	rcall	.+1986   	; 0x16b6 <_ZN6Timer316setDutyCycleComCEf>
		vTaskDelay( delay_ / portTICK_RATE_MS );
     ef4:	8e 89       	ldd	r24, Y+22	; 0x16
     ef6:	9f 89       	ldd	r25, Y+23	; 0x17
     ef8:	0e 94 72 10 	call	0x20e4	; 0x20e4 <vTaskDelay>
	}
}
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	ff 90       	pop	r15
     f02:	ef 90       	pop	r14
     f04:	df 90       	pop	r13
     f06:	cf 90       	pop	r12
     f08:	bf 90       	pop	r11
     f0a:	af 90       	pop	r10
     f0c:	9f 90       	pop	r9
     f0e:	8f 90       	pop	r8
     f10:	7f 90       	pop	r7
     f12:	6f 90       	pop	r6
     f14:	5f 90       	pop	r5
     f16:	4f 90       	pop	r4
     f18:	08 95       	ret

00000f1a <_ZN2M6C1EP6Timer3>:
* Author: jespe
*/

#include "M6.h"

M6::M6( Timer3* tmr )
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	ec 01       	movw	r28, r24
     f20:	cb 01       	movw	r24, r22
     f22:	2e e5       	ldi	r18, 0x5E	; 94
     f24:	32 e0       	ldi	r19, 0x02	; 2
     f26:	39 83       	std	Y+1, r19	; 0x01
     f28:	28 83       	st	Y, r18
{
	/* Store timer pointer */
	tmr3Ptr_ = tmr;
     f2a:	7d 83       	std	Y+5, r23	; 0x05
     f2c:	6c 83       	std	Y+4, r22	; 0x04
	
	/* This value is number of percent to add or subtract pr degree. */
	percentPrDeg = 0.07936507936507;
     f2e:	49 e2       	ldi	r20, 0x29	; 41
     f30:	5a e8       	ldi	r21, 0x8A	; 138
     f32:	62 ea       	ldi	r22, 0xA2	; 162
     f34:	7d e3       	ldi	r23, 0x3D	; 61
     f36:	4e 83       	std	Y+6, r20	; 0x06
     f38:	5f 83       	std	Y+7, r21	; 0x07
     f3a:	68 87       	std	Y+8, r22	; 0x08
     f3c:	79 87       	std	Y+9, r23	; 0x09
	
	/* This value is the lowest duty cycle percentage needed to make motor turn. */
	startpercent_ = 2.5;
     f3e:	40 e0       	ldi	r20, 0x00	; 0
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	60 e2       	ldi	r22, 0x20	; 32
     f44:	70 e4       	ldi	r23, 0x40	; 64
     f46:	4a 8b       	std	Y+18, r20	; 0x12
     f48:	5b 8b       	std	Y+19, r21	; 0x13
     f4a:	6c 8b       	std	Y+20, r22	; 0x14
     f4c:	7d 8b       	std	Y+21, r23	; 0x15
	
	/* This value is the delay on motor. A lower value makes motors go faster and higher value makes motors go slower. Value is in MS */
	delay_ = 1;
     f4e:	21 e0       	ldi	r18, 0x01	; 1
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	3f 8b       	std	Y+23, r19	; 0x17
     f54:	2e 8b       	std	Y+22, r18	; 0x16
	virtual void TurnMotor() = 0;
	virtual void SetDegrees( uint8_t degrees )
	{
		percent_ = percentPrDeg * degrees + startpercent_;
     f56:	4a 87       	std	Y+10, r20	; 0x0a
     f58:	5b 87       	std	Y+11, r21	; 0x0b
     f5a:	6c 87       	std	Y+12, r22	; 0x0c
     f5c:	7d 87       	std	Y+13, r23	; 0x0d
	
	/* Set motor to default startup value */
	SetDegrees(0);
	tmr3Ptr_->setDutyCycleComC( percent_ );
     f5e:	ab d3       	rcall	.+1878   	; 0x16b6 <_ZN6Timer316setDutyCycleComCEf>
	oldPercent_ = percent_;
     f60:	8a 85       	ldd	r24, Y+10	; 0x0a
     f62:	9b 85       	ldd	r25, Y+11	; 0x0b
     f64:	ac 85       	ldd	r26, Y+12	; 0x0c
     f66:	bd 85       	ldd	r27, Y+13	; 0x0d
     f68:	8e 87       	std	Y+14, r24	; 0x0e
     f6a:	9f 87       	std	Y+15, r25	; 0x0f
     f6c:	a8 8b       	std	Y+16, r26	; 0x10
     f6e:	b9 8b       	std	Y+17, r27	; 0x11
}
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	08 95       	ret

00000f76 <_ZN8RobotarmC1Ev>:
/* RTOS include */
#include "FreeRTOS.h"
#include "task.h"
#include "portmacro.h"

Robotarm::Robotarm() : tmr1_(), tmr3_(), motor1_( &tmr1_ ), motor2_( &tmr1_ ), motor3_( &tmr1_ ), motor4_( &tmr3_ ), motor5_( &tmr3_ ), motor6_( &tmr3_ )
     f76:	4f 92       	push	r4
     f78:	5f 92       	push	r5
     f7a:	6f 92       	push	r6
     f7c:	7f 92       	push	r7
     f7e:	8f 92       	push	r8
     f80:	9f 92       	push	r9
     f82:	af 92       	push	r10
     f84:	bf 92       	push	r11
     f86:	cf 92       	push	r12
     f88:	df 92       	push	r13
     f8a:	ef 92       	push	r14
     f8c:	ff 92       	push	r15
     f8e:	0f 93       	push	r16
     f90:	1f 93       	push	r17
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	ec 01       	movw	r28, r24
     f98:	1b d2       	rcall	.+1078   	; 0x13d0 <_ZN6Timer1C1Ev>
     f9a:	8e 01       	movw	r16, r28
     f9c:	0f 5f       	subi	r16, 0xFF	; 255
     f9e:	1f 4f       	sbci	r17, 0xFF	; 255
     fa0:	c8 01       	movw	r24, r16
     fa2:	f0 d2       	rcall	.+1504   	; 0x1584 <_ZN6Timer3C1Ev>
     fa4:	5e 01       	movw	r10, r28
     fa6:	82 e0       	ldi	r24, 0x02	; 2
     fa8:	a8 0e       	add	r10, r24
     faa:	b1 1c       	adc	r11, r1
     fac:	be 01       	movw	r22, r28
     fae:	c5 01       	movw	r24, r10
     fb0:	7f dc       	rcall	.-1794   	; 0x8b0 <_ZN2M1C1EP6Timer1>
     fb2:	6e 01       	movw	r12, r28
     fb4:	8a e1       	ldi	r24, 0x1A	; 26
     fb6:	c8 0e       	add	r12, r24
     fb8:	d1 1c       	adc	r13, r1
     fba:	be 01       	movw	r22, r28
     fbc:	c6 01       	movw	r24, r12
     fbe:	1d dd       	rcall	.-1478   	; 0x9fa <_ZN2M2C1EP6Timer1>
     fc0:	7e 01       	movw	r14, r28
     fc2:	82 e3       	ldi	r24, 0x32	; 50
     fc4:	e8 0e       	add	r14, r24
     fc6:	f1 1c       	adc	r15, r1
     fc8:	be 01       	movw	r22, r28
     fca:	c7 01       	movw	r24, r14
     fcc:	bb dd       	rcall	.-1162   	; 0xb44 <_ZN2M3C1EP6Timer1>
     fce:	4e 01       	movw	r8, r28
     fd0:	8a e4       	ldi	r24, 0x4A	; 74
     fd2:	88 0e       	add	r8, r24
     fd4:	91 1c       	adc	r9, r1
     fd6:	b8 01       	movw	r22, r16
     fd8:	c4 01       	movw	r24, r8
     fda:	59 de       	rcall	.-846    	; 0xc8e <_ZN2M4C1EP6Timer3>
     fdc:	3e 01       	movw	r6, r28
     fde:	82 e6       	ldi	r24, 0x62	; 98
     fe0:	68 0e       	add	r6, r24
     fe2:	71 1c       	adc	r7, r1
     fe4:	b8 01       	movw	r22, r16
     fe6:	c3 01       	movw	r24, r6
     fe8:	f7 de       	rcall	.-530    	; 0xdd8 <_ZN2M5C1EP6Timer3>
     fea:	2e 01       	movw	r4, r28
     fec:	8a e7       	ldi	r24, 0x7A	; 122
     fee:	48 0e       	add	r4, r24
     ff0:	51 1c       	adc	r5, r1
     ff2:	b8 01       	movw	r22, r16
     ff4:	c2 01       	movw	r24, r4
     ff6:	91 df       	rcall	.-222    	; 0xf1a <_ZN2M6C1EP6Timer3>
{
	DDRB = DDRB | ( 1 << 4 );
     ff8:	84 b1       	in	r24, 0x04	; 4
     ffa:	80 61       	ori	r24, 0x10	; 16
     ffc:	84 b9       	out	0x04, r24	; 4
	//PORTB =  ( 1 << 4 );
	motors_[0] = &motor1_;
     ffe:	fe 01       	movw	r30, r28
    1000:	ee 56       	subi	r30, 0x6E	; 110
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	b1 82       	std	Z+1, r11	; 0x01
    1006:	a0 82       	st	Z, r10
	motors_[1] = &motor2_;
    1008:	32 96       	adiw	r30, 0x02	; 2
    100a:	d1 82       	std	Z+1, r13	; 0x01
    100c:	c0 82       	st	Z, r12
	motors_[2] = &motor3_;
    100e:	32 96       	adiw	r30, 0x02	; 2
    1010:	f1 82       	std	Z+1, r15	; 0x01
    1012:	e0 82       	st	Z, r14
	motors_[3] = &motor4_;
    1014:	32 96       	adiw	r30, 0x02	; 2
    1016:	91 82       	std	Z+1, r9	; 0x01
    1018:	80 82       	st	Z, r8
	motors_[4] = &motor5_;
    101a:	32 96       	adiw	r30, 0x02	; 2
    101c:	71 82       	std	Z+1, r7	; 0x01
    101e:	60 82       	st	Z, r6
	motors_[5] = &motor6_;
    1020:	32 96       	adiw	r30, 0x02	; 2
    1022:	51 82       	std	Z+1, r5	; 0x01
    1024:	40 82       	st	Z, r4
	
	xTaskCreate(this->startMotorImpl,  ( signed char * ) "Motors", configMINIMAL_STACK_SIZE, this, 1U, NULL);
    1026:	a1 2c       	mov	r10, r1
    1028:	b1 2c       	mov	r11, r1
    102a:	c1 2c       	mov	r12, r1
    102c:	d1 2c       	mov	r13, r1
    102e:	e1 2c       	mov	r14, r1
    1030:	f1 2c       	mov	r15, r1
    1032:	01 e0       	ldi	r16, 0x01	; 1
    1034:	9e 01       	movw	r18, r28
    1036:	45 e5       	ldi	r20, 0x55	; 85
    1038:	50 e0       	ldi	r21, 0x00	; 0
    103a:	66 e6       	ldi	r22, 0x66	; 102
    103c:	72 e0       	ldi	r23, 0x02	; 2
    103e:	83 e3       	ldi	r24, 0x33	; 51
    1040:	99 e0       	ldi	r25, 0x09	; 9
    1042:	51 d6       	rcall	.+3234   	; 0x1ce6 <xTaskGenericCreate>
}
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	1f 91       	pop	r17
    104a:	0f 91       	pop	r16
    104c:	ff 90       	pop	r15
    104e:	ef 90       	pop	r14
    1050:	df 90       	pop	r13
    1052:	cf 90       	pop	r12
    1054:	bf 90       	pop	r11
    1056:	af 90       	pop	r10
    1058:	9f 90       	pop	r9
    105a:	8f 90       	pop	r8
    105c:	7f 90       	pop	r7
    105e:	6f 90       	pop	r6
    1060:	5f 90       	pop	r5
    1062:	4f 90       	pop	r4
    1064:	08 95       	ret

00001066 <_ZN8Robotarm9grabBlockEv>:

void Robotarm::grabBlock()
{
    1066:	cf 92       	push	r12
    1068:	df 92       	push	r13
    106a:	ef 92       	push	r14
    106c:	ff 92       	push	r15
    106e:	0f 93       	push	r16
    1070:	1f 93       	push	r17
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	ec 01       	movw	r28, r24
    1078:	8c 01       	movw	r16, r24
    107a:	06 5b       	subi	r16, 0xB6	; 182
    107c:	1f 4f       	sbci	r17, 0xFF	; 255
    107e:	f8 01       	movw	r30, r16
    1080:	66 81       	ldd	r22, Z+6	; 0x06
    1082:	77 81       	ldd	r23, Z+7	; 0x07
    1084:	80 85       	ldd	r24, Z+8	; 0x08
    1086:	91 85       	ldd	r25, Z+9	; 0x09
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	40 e2       	ldi	r20, 0x20	; 32
    108e:	52 e4       	ldi	r21, 0x42	; 66
    1090:	0e 94 9b 12 	call	0x2536	; 0x2536 <__mulsf3>
    1094:	f8 01       	movw	r30, r16
    1096:	22 89       	ldd	r18, Z+18	; 0x12
    1098:	33 89       	ldd	r19, Z+19	; 0x13
    109a:	44 89       	ldd	r20, Z+20	; 0x14
    109c:	55 89       	ldd	r21, Z+21	; 0x15
    109e:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__addsf3>
    10a2:	f8 01       	movw	r30, r16
    10a4:	62 87       	std	Z+10, r22	; 0x0a
    10a6:	73 87       	std	Z+11, r23	; 0x0b
    10a8:	84 87       	std	Z+12, r24	; 0x0c
    10aa:	95 87       	std	Z+13, r25	; 0x0d
    10ac:	7e 01       	movw	r14, r28
    10ae:	f2 e6       	ldi	r31, 0x62	; 98
    10b0:	ef 0e       	add	r14, r31
    10b2:	f1 1c       	adc	r15, r1
    10b4:	f7 01       	movw	r30, r14
    10b6:	66 81       	ldd	r22, Z+6	; 0x06
    10b8:	77 81       	ldd	r23, Z+7	; 0x07
    10ba:	80 85       	ldd	r24, Z+8	; 0x08
    10bc:	91 85       	ldd	r25, Z+9	; 0x09
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	44 eb       	ldi	r20, 0xB4	; 180
    10c4:	52 e4       	ldi	r21, 0x42	; 66
    10c6:	0e 94 9b 12 	call	0x2536	; 0x2536 <__mulsf3>
    10ca:	f7 01       	movw	r30, r14
    10cc:	22 89       	ldd	r18, Z+18	; 0x12
    10ce:	33 89       	ldd	r19, Z+19	; 0x13
    10d0:	44 89       	ldd	r20, Z+20	; 0x14
    10d2:	55 89       	ldd	r21, Z+21	; 0x15
    10d4:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__addsf3>
    10d8:	f7 01       	movw	r30, r14
    10da:	62 87       	std	Z+10, r22	; 0x0a
    10dc:	73 87       	std	Z+11, r23	; 0x0b
    10de:	84 87       	std	Z+12, r24	; 0x0c
    10e0:	95 87       	std	Z+13, r25	; 0x0d
    10e2:	68 85       	ldd	r22, Y+8	; 0x08
    10e4:	79 85       	ldd	r23, Y+9	; 0x09
    10e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    10e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	a9 01       	movw	r20, r18
    10f0:	0e 94 9b 12 	call	0x2536	; 0x2536 <__mulsf3>
    10f4:	2c 89       	ldd	r18, Y+20	; 0x14
    10f6:	3d 89       	ldd	r19, Y+21	; 0x15
    10f8:	4e 89       	ldd	r20, Y+22	; 0x16
    10fa:	5f 89       	ldd	r21, Y+23	; 0x17
    10fc:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__addsf3>
    1100:	6c 87       	std	Y+12, r22	; 0x0c
    1102:	7d 87       	std	Y+13, r23	; 0x0d
    1104:	8e 87       	std	Y+14, r24	; 0x0e
    1106:	9f 87       	std	Y+15, r25	; 0x0f
	motor4_.SetDegrees(40);
	motor5_.SetDegrees(90);
	motor1_.SetDegrees(0);
	vTaskDelay( 1500 / portTICK_RATE_MS );
    1108:	8c ed       	ldi	r24, 0xDC	; 220
    110a:	95 e0       	ldi	r25, 0x05	; 5
    110c:	eb d7       	rcall	.+4054   	; 0x20e4 <vTaskDelay>
    110e:	68 a1       	ldd	r22, Y+32	; 0x20
    1110:	79 a1       	ldd	r23, Y+33	; 0x21
    1112:	8a a1       	ldd	r24, Y+34	; 0x22
    1114:	9b a1       	ldd	r25, Y+35	; 0x23
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	4c e0       	ldi	r20, 0x0C	; 12
    111c:	52 e4       	ldi	r21, 0x42	; 66
    111e:	0e 94 9b 12 	call	0x2536	; 0x2536 <__mulsf3>
    1122:	2c a5       	ldd	r18, Y+44	; 0x2c
    1124:	3d a5       	ldd	r19, Y+45	; 0x2d
    1126:	4e a5       	ldd	r20, Y+46	; 0x2e
    1128:	5f a5       	ldd	r21, Y+47	; 0x2f
    112a:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__addsf3>
    112e:	6c a3       	std	Y+36, r22	; 0x24
    1130:	7d a3       	std	Y+37, r23	; 0x25
    1132:	8e a3       	std	Y+38, r24	; 0x26
    1134:	9f a3       	std	Y+39, r25	; 0x27
    1136:	68 ad       	ldd	r22, Y+56	; 0x38
    1138:	79 ad       	ldd	r23, Y+57	; 0x39
    113a:	8a ad       	ldd	r24, Y+58	; 0x3a
    113c:	9b ad       	ldd	r25, Y+59	; 0x3b
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	4c e7       	ldi	r20, 0x7C	; 124
    1144:	52 e4       	ldi	r21, 0x42	; 66
    1146:	0e 94 9b 12 	call	0x2536	; 0x2536 <__mulsf3>
    114a:	6e 01       	movw	r12, r28
    114c:	f4 e4       	ldi	r31, 0x44	; 68
    114e:	cf 0e       	add	r12, r31
    1150:	d1 1c       	adc	r13, r1
    1152:	f6 01       	movw	r30, r12
    1154:	20 81       	ld	r18, Z
    1156:	31 81       	ldd	r19, Z+1	; 0x01
    1158:	42 81       	ldd	r20, Z+2	; 0x02
    115a:	53 81       	ldd	r21, Z+3	; 0x03
    115c:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__addsf3>
    1160:	6c af       	std	Y+60, r22	; 0x3c
    1162:	7d af       	std	Y+61, r23	; 0x3d
    1164:	8e af       	std	Y+62, r24	; 0x3e
    1166:	9f af       	std	Y+63, r25	; 0x3f
	motor2_.SetDegrees(35);
	motor3_.SetDegrees(63);
	vTaskDelay( 1500 / portTICK_RATE_MS );
    1168:	8c ed       	ldi	r24, 0xDC	; 220
    116a:	95 e0       	ldi	r25, 0x05	; 5
    116c:	bb d7       	rcall	.+3958   	; 0x20e4 <vTaskDelay>
    116e:	7e 01       	movw	r14, r28
    1170:	fa e7       	ldi	r31, 0x7A	; 122
    1172:	ef 0e       	add	r14, r31
    1174:	f1 1c       	adc	r15, r1
    1176:	f7 01       	movw	r30, r14
    1178:	66 81       	ldd	r22, Z+6	; 0x06
    117a:	77 81       	ldd	r23, Z+7	; 0x07
    117c:	80 85       	ldd	r24, Z+8	; 0x08
    117e:	91 85       	ldd	r25, Z+9	; 0x09
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	42 e8       	ldi	r20, 0x82	; 130
    1186:	52 e4       	ldi	r21, 0x42	; 66
    1188:	0e 94 9b 12 	call	0x2536	; 0x2536 <__mulsf3>
    118c:	f7 01       	movw	r30, r14
    118e:	22 89       	ldd	r18, Z+18	; 0x12
    1190:	33 89       	ldd	r19, Z+19	; 0x13
    1192:	44 89       	ldd	r20, Z+20	; 0x14
    1194:	55 89       	ldd	r21, Z+21	; 0x15
    1196:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__addsf3>
    119a:	f7 01       	movw	r30, r14
    119c:	62 87       	std	Z+10, r22	; 0x0a
    119e:	73 87       	std	Z+11, r23	; 0x0b
    11a0:	84 87       	std	Z+12, r24	; 0x0c
    11a2:	95 87       	std	Z+13, r25	; 0x0d
	motor6_.SetDegrees(65);
	vTaskDelay( 250 / portTICK_RATE_MS );
    11a4:	8a ef       	ldi	r24, 0xFA	; 250
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	9d d7       	rcall	.+3898   	; 0x20e4 <vTaskDelay>
    11aa:	68 a1       	ldd	r22, Y+32	; 0x20
    11ac:	79 a1       	ldd	r23, Y+33	; 0x21
    11ae:	8a a1       	ldd	r24, Y+34	; 0x22
    11b0:	9b a1       	ldd	r25, Y+35	; 0x23
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	4c e8       	ldi	r20, 0x8C	; 140
    11b8:	52 e4       	ldi	r21, 0x42	; 66
    11ba:	0e 94 9b 12 	call	0x2536	; 0x2536 <__mulsf3>
    11be:	2c a5       	ldd	r18, Y+44	; 0x2c
    11c0:	3d a5       	ldd	r19, Y+45	; 0x2d
    11c2:	4e a5       	ldd	r20, Y+46	; 0x2e
    11c4:	5f a5       	ldd	r21, Y+47	; 0x2f
    11c6:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__addsf3>
    11ca:	6c a3       	std	Y+36, r22	; 0x24
    11cc:	7d a3       	std	Y+37, r23	; 0x25
    11ce:	8e a3       	std	Y+38, r24	; 0x26
    11d0:	9f a3       	std	Y+39, r25	; 0x27
    11d2:	68 ad       	ldd	r22, Y+56	; 0x38
    11d4:	79 ad       	ldd	r23, Y+57	; 0x39
    11d6:	8a ad       	ldd	r24, Y+58	; 0x3a
    11d8:	9b ad       	ldd	r25, Y+59	; 0x3b
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	4c e8       	ldi	r20, 0x8C	; 140
    11e0:	52 e4       	ldi	r21, 0x42	; 66
    11e2:	0e 94 9b 12 	call	0x2536	; 0x2536 <__mulsf3>
    11e6:	f6 01       	movw	r30, r12
    11e8:	20 81       	ld	r18, Z
    11ea:	31 81       	ldd	r19, Z+1	; 0x01
    11ec:	42 81       	ldd	r20, Z+2	; 0x02
    11ee:	53 81       	ldd	r21, Z+3	; 0x03
    11f0:	f0 d7       	rcall	.+4064   	; 0x21d2 <__addsf3>
    11f2:	6c af       	std	Y+60, r22	; 0x3c
    11f4:	7d af       	std	Y+61, r23	; 0x3d
    11f6:	8e af       	std	Y+62, r24	; 0x3e
    11f8:	9f af       	std	Y+63, r25	; 0x3f
    11fa:	f8 01       	movw	r30, r16
    11fc:	66 81       	ldd	r22, Z+6	; 0x06
    11fe:	77 81       	ldd	r23, Z+7	; 0x07
    1200:	80 85       	ldd	r24, Z+8	; 0x08
    1202:	91 85       	ldd	r25, Z+9	; 0x09
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	4c e8       	ldi	r20, 0x8C	; 140
    120a:	52 e4       	ldi	r21, 0x42	; 66
    120c:	0e 94 9b 12 	call	0x2536	; 0x2536 <__mulsf3>
    1210:	f8 01       	movw	r30, r16
    1212:	22 89       	ldd	r18, Z+18	; 0x12
    1214:	33 89       	ldd	r19, Z+19	; 0x13
    1216:	44 89       	ldd	r20, Z+20	; 0x14
    1218:	55 89       	ldd	r21, Z+21	; 0x15
    121a:	db d7       	rcall	.+4022   	; 0x21d2 <__addsf3>
    121c:	f8 01       	movw	r30, r16
    121e:	62 87       	std	Z+10, r22	; 0x0a
    1220:	73 87       	std	Z+11, r23	; 0x0b
    1222:	84 87       	std	Z+12, r24	; 0x0c
    1224:	95 87       	std	Z+13, r25	; 0x0d
	motor2_.SetDegrees(70);
	motor3_.SetDegrees(70);
	motor4_.SetDegrees(70);
}
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	1f 91       	pop	r17
    122c:	0f 91       	pop	r16
    122e:	ff 90       	pop	r15
    1230:	ef 90       	pop	r14
    1232:	df 90       	pop	r13
    1234:	cf 90       	pop	r12
    1236:	08 95       	ret

00001238 <_ZN8Robotarm20MotorSpeedControllerEv>:
	Robotarm* ptr = (Robotarm*) _this;
	ptr->MotorSpeedController();
}

void Robotarm::MotorSpeedController()
{
    1238:	8c 01       	movw	r16, r24
	while(1)
	{
		for ( uint8_t i = 0U; i < 6U; i++ )
    123a:	c0 e0       	ldi	r28, 0x00	; 0
    123c:	c6 30       	cpi	r28, 0x06	; 6
    123e:	e8 f7       	brcc	.-6      	; 0x123a <_ZN8Robotarm20MotorSpeedControllerEv+0x2>
		{
			motors_[i]->TurnMotor();
    1240:	ec 2f       	mov	r30, r28
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	e7 5b       	subi	r30, 0xB7	; 183
    1246:	ff 4f       	sbci	r31, 0xFF	; 255
    1248:	ee 0f       	add	r30, r30
    124a:	ff 1f       	adc	r31, r31
    124c:	e0 0f       	add	r30, r16
    124e:	f1 1f       	adc	r31, r17
    1250:	80 81       	ld	r24, Z
    1252:	91 81       	ldd	r25, Z+1	; 0x01
    1254:	dc 01       	movw	r26, r24
    1256:	ed 91       	ld	r30, X+
    1258:	fc 91       	ld	r31, X
    125a:	04 80       	ldd	r0, Z+4	; 0x04
    125c:	f5 81       	ldd	r31, Z+5	; 0x05
    125e:	e0 2d       	mov	r30, r0
    1260:	19 95       	eicall

void Robotarm::MotorSpeedController()
{
	while(1)
	{
		for ( uint8_t i = 0U; i < 6U; i++ )
    1262:	cf 5f       	subi	r28, 0xFF	; 255
    1264:	eb cf       	rjmp	.-42     	; 0x123c <_ZN8Robotarm20MotorSpeedControllerEv+0x4>

00001266 <_ZN8Robotarm14startMotorImplEPv>:
}

void Robotarm::startMotorImpl( void *_this )
{
	Robotarm* ptr = (Robotarm*) _this;
	ptr->MotorSpeedController();
    1266:	e8 df       	rcall	.-48     	; 0x1238 <_ZN8Robotarm20MotorSpeedControllerEv>

00001268 <_ZN8Robotarm18ArmDownReleaseItemEv>:
		}
	}
}

void Robotarm::ArmDownReleaseItem()
{
    1268:	ef 92       	push	r14
    126a:	ff 92       	push	r15
    126c:	0f 93       	push	r16
    126e:	1f 93       	push	r17
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	ec 01       	movw	r28, r24
	vTaskDelay( 1500 / portTICK_RATE_MS );
    1276:	8c ed       	ldi	r24, 0xDC	; 220
    1278:	95 e0       	ldi	r25, 0x05	; 5
    127a:	34 d7       	rcall	.+3688   	; 0x20e4 <vTaskDelay>
    127c:	68 a1       	ldd	r22, Y+32	; 0x20
    127e:	79 a1       	ldd	r23, Y+33	; 0x21
    1280:	8a a1       	ldd	r24, Y+34	; 0x22
    1282:	9b a1       	ldd	r25, Y+35	; 0x23
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	4c e0       	ldi	r20, 0x0C	; 12
    128a:	52 e4       	ldi	r21, 0x42	; 66
    128c:	0e 94 9b 12 	call	0x2536	; 0x2536 <__mulsf3>
    1290:	2c a5       	ldd	r18, Y+44	; 0x2c
    1292:	3d a5       	ldd	r19, Y+45	; 0x2d
    1294:	4e a5       	ldd	r20, Y+46	; 0x2e
    1296:	5f a5       	ldd	r21, Y+47	; 0x2f
    1298:	9c d7       	rcall	.+3896   	; 0x21d2 <__addsf3>
    129a:	6c a3       	std	Y+36, r22	; 0x24
    129c:	7d a3       	std	Y+37, r23	; 0x25
    129e:	8e a3       	std	Y+38, r24	; 0x26
    12a0:	9f a3       	std	Y+39, r25	; 0x27
    12a2:	68 ad       	ldd	r22, Y+56	; 0x38
    12a4:	79 ad       	ldd	r23, Y+57	; 0x39
    12a6:	8a ad       	ldd	r24, Y+58	; 0x3a
    12a8:	9b ad       	ldd	r25, Y+59	; 0x3b
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	40 e2       	ldi	r20, 0x20	; 32
    12b0:	52 e4       	ldi	r21, 0x42	; 66
    12b2:	0e 94 9b 12 	call	0x2536	; 0x2536 <__mulsf3>
    12b6:	7e 01       	movw	r14, r28
    12b8:	24 e4       	ldi	r18, 0x44	; 68
    12ba:	e2 0e       	add	r14, r18
    12bc:	f1 1c       	adc	r15, r1
    12be:	f7 01       	movw	r30, r14
    12c0:	20 81       	ld	r18, Z
    12c2:	31 81       	ldd	r19, Z+1	; 0x01
    12c4:	42 81       	ldd	r20, Z+2	; 0x02
    12c6:	53 81       	ldd	r21, Z+3	; 0x03
    12c8:	84 d7       	rcall	.+3848   	; 0x21d2 <__addsf3>
    12ca:	6c af       	std	Y+60, r22	; 0x3c
    12cc:	7d af       	std	Y+61, r23	; 0x3d
    12ce:	8e af       	std	Y+62, r24	; 0x3e
    12d0:	9f af       	std	Y+63, r25	; 0x3f
	motor2_.SetDegrees(35);
	motor3_.SetDegrees(40);
	vTaskDelay( 1500 / portTICK_RATE_MS );
    12d2:	8c ed       	ldi	r24, 0xDC	; 220
    12d4:	95 e0       	ldi	r25, 0x05	; 5
    12d6:	06 d7       	rcall	.+3596   	; 0x20e4 <vTaskDelay>
    12d8:	8e 01       	movw	r16, r28
    12da:	06 58       	subi	r16, 0x86	; 134
    12dc:	1f 4f       	sbci	r17, 0xFF	; 255
    12de:	f8 01       	movw	r30, r16
    12e0:	66 81       	ldd	r22, Z+6	; 0x06
    12e2:	77 81       	ldd	r23, Z+7	; 0x07
    12e4:	80 85       	ldd	r24, Z+8	; 0x08
    12e6:	91 85       	ldd	r25, Z+9	; 0x09
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	a9 01       	movw	r20, r18
    12ee:	0e 94 9b 12 	call	0x2536	; 0x2536 <__mulsf3>
    12f2:	f8 01       	movw	r30, r16
    12f4:	22 89       	ldd	r18, Z+18	; 0x12
    12f6:	33 89       	ldd	r19, Z+19	; 0x13
    12f8:	44 89       	ldd	r20, Z+20	; 0x14
    12fa:	55 89       	ldd	r21, Z+21	; 0x15
    12fc:	6a d7       	rcall	.+3796   	; 0x21d2 <__addsf3>
    12fe:	f8 01       	movw	r30, r16
    1300:	62 87       	std	Z+10, r22	; 0x0a
    1302:	73 87       	std	Z+11, r23	; 0x0b
    1304:	84 87       	std	Z+12, r24	; 0x0c
    1306:	95 87       	std	Z+13, r25	; 0x0d
	motor6_.SetDegrees(0);
	vTaskDelay( 250 / portTICK_RATE_MS );
    1308:	8a ef       	ldi	r24, 0xFA	; 250
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	eb d6       	rcall	.+3542   	; 0x20e4 <vTaskDelay>
    130e:	68 a1       	ldd	r22, Y+32	; 0x20
    1310:	79 a1       	ldd	r23, Y+33	; 0x21
    1312:	8a a1       	ldd	r24, Y+34	; 0x22
    1314:	9b a1       	ldd	r25, Y+35	; 0x23
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	44 eb       	ldi	r20, 0xB4	; 180
    131c:	52 e4       	ldi	r21, 0x42	; 66
    131e:	0e 94 9b 12 	call	0x2536	; 0x2536 <__mulsf3>
    1322:	2c a5       	ldd	r18, Y+44	; 0x2c
    1324:	3d a5       	ldd	r19, Y+45	; 0x2d
    1326:	4e a5       	ldd	r20, Y+46	; 0x2e
    1328:	5f a5       	ldd	r21, Y+47	; 0x2f
    132a:	53 d7       	rcall	.+3750   	; 0x21d2 <__addsf3>
    132c:	6c a3       	std	Y+36, r22	; 0x24
    132e:	7d a3       	std	Y+37, r23	; 0x25
    1330:	8e a3       	std	Y+38, r24	; 0x26
    1332:	9f a3       	std	Y+39, r25	; 0x27
    1334:	68 ad       	ldd	r22, Y+56	; 0x38
    1336:	79 ad       	ldd	r23, Y+57	; 0x39
    1338:	8a ad       	ldd	r24, Y+58	; 0x3a
    133a:	9b ad       	ldd	r25, Y+59	; 0x3b
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	44 eb       	ldi	r20, 0xB4	; 180
    1342:	52 e4       	ldi	r21, 0x42	; 66
    1344:	0e 94 9b 12 	call	0x2536	; 0x2536 <__mulsf3>
    1348:	f7 01       	movw	r30, r14
    134a:	20 81       	ld	r18, Z
    134c:	31 81       	ldd	r19, Z+1	; 0x01
    134e:	42 81       	ldd	r20, Z+2	; 0x02
    1350:	53 81       	ldd	r21, Z+3	; 0x03
    1352:	3f d7       	rcall	.+3710   	; 0x21d2 <__addsf3>
    1354:	6c af       	std	Y+60, r22	; 0x3c
    1356:	7d af       	std	Y+61, r23	; 0x3d
    1358:	8e af       	std	Y+62, r24	; 0x3e
    135a:	9f af       	std	Y+63, r25	; 0x3f
    135c:	c6 5b       	subi	r28, 0xB6	; 182
    135e:	df 4f       	sbci	r29, 0xFF	; 255
    1360:	6e 81       	ldd	r22, Y+6	; 0x06
    1362:	7f 81       	ldd	r23, Y+7	; 0x07
    1364:	88 85       	ldd	r24, Y+8	; 0x08
    1366:	99 85       	ldd	r25, Y+9	; 0x09
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	44 eb       	ldi	r20, 0xB4	; 180
    136e:	52 e4       	ldi	r21, 0x42	; 66
    1370:	0e 94 9b 12 	call	0x2536	; 0x2536 <__mulsf3>
    1374:	2a 89       	ldd	r18, Y+18	; 0x12
    1376:	3b 89       	ldd	r19, Y+19	; 0x13
    1378:	4c 89       	ldd	r20, Y+20	; 0x14
    137a:	5d 89       	ldd	r21, Y+21	; 0x15
    137c:	2a d7       	rcall	.+3668   	; 0x21d2 <__addsf3>
    137e:	6a 87       	std	Y+10, r22	; 0x0a
    1380:	7b 87       	std	Y+11, r23	; 0x0b
    1382:	8c 87       	std	Y+12, r24	; 0x0c
    1384:	9d 87       	std	Y+13, r25	; 0x0d
	motor2_.SetDegrees(90);
	motor3_.SetDegrees(90);
	motor4_.SetDegrees(90);
	vTaskDelay( 250 / portTICK_RATE_MS );
    1386:	8a ef       	ldi	r24, 0xFA	; 250
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	ac d6       	rcall	.+3416   	; 0x20e4 <vTaskDelay>
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	1f 91       	pop	r17
    1392:	0f 91       	pop	r16
    1394:	ff 90       	pop	r15
    1396:	ef 90       	pop	r14
    1398:	08 95       	ret

0000139a <_ZN8Robotarm18moveBlockToZoneOneEv>:
    139a:	cf 93       	push	r28
	motor3_.SetDegrees(70);
	motor4_.SetDegrees(70);
}

void Robotarm::moveBlockToZoneOne()
{
    139c:	df 93       	push	r29
    139e:	ec 01       	movw	r28, r24
    13a0:	68 85       	ldd	r22, Y+8	; 0x08
    13a2:	79 85       	ldd	r23, Y+9	; 0x09
    13a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    13a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	44 eb       	ldi	r20, 0xB4	; 180
    13ae:	52 e4       	ldi	r21, 0x42	; 66
    13b0:	0e 94 9b 12 	call	0x2536	; 0x2536 <__mulsf3>
    13b4:	2c 89       	ldd	r18, Y+20	; 0x14
    13b6:	3d 89       	ldd	r19, Y+21	; 0x15
    13b8:	4e 89       	ldd	r20, Y+22	; 0x16
    13ba:	5f 89       	ldd	r21, Y+23	; 0x17
    13bc:	0a d7       	rcall	.+3604   	; 0x21d2 <__addsf3>
    13be:	6c 87       	std	Y+12, r22	; 0x0c
    13c0:	7d 87       	std	Y+13, r23	; 0x0d
    13c2:	8e 87       	std	Y+14, r24	; 0x0e
    13c4:	9f 87       	std	Y+15, r25	; 0x0f
	motor1_.SetDegrees(90);
	ArmDownReleaseItem();
    13c6:	ce 01       	movw	r24, r28
    13c8:	4f df       	rcall	.-354    	; 0x1268 <_ZN8Robotarm18ArmDownReleaseItemEv>
}
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	08 95       	ret

000013d0 <_ZN6Timer1C1Ev>:
#include <avr/io.h>

Timer1::Timer1()
{
	// Set B5 to output
	DDRB = DDRB | ( 1 << 5 ) | ( 1 << 6 ) | ( 1 << 7 );
    13d0:	84 b1       	in	r24, 0x04	; 4
    13d2:	80 6e       	ori	r24, 0xE0	; 224
    13d4:	84 b9       	out	0x04, r24	; 4
	
	// Set timer to run in PWM, Phase Correct mode with 50 Hz freq. 
	TCCR1A = ( 1 << COM1A1 ) | ( 1 << COM1B1 ) | ( 1 << COM1C1 ) | ( 0 << WGM10 ) | ( 0 << WGM11 );
    13d6:	88 ea       	ldi	r24, 0xA8	; 168
    13d8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = ( 1 << WGM13 ) | ( 0 << CS10 )  | ( 1 << CS12 );
    13dc:	84 e1       	ldi	r24, 0x14	; 20
    13de:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	TCCR1C = 0;
    13e2:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
	ICR1 = 622;
    13e6:	8e e6       	ldi	r24, 0x6E	; 110
    13e8:	92 e0       	ldi	r25, 0x02	; 2
    13ea:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
    13ee:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
	
	OCR1A = 0;
    13f2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    13f6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	OCR1B = 0;
    13fa:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    13fe:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
	OCR1C = 0;
    1402:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <__TEXT_REGION_LENGTH__+0x70008d>
    1406:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x70008c>
    140a:	08 95       	ret

0000140c <_ZN6Timer116setDutyCycleComAEf>:
}

void Timer1::setDutyCycleComA( float dutyCycle )
{
    140c:	cf 92       	push	r12
    140e:	df 92       	push	r13
    1410:	ef 92       	push	r14
    1412:	ff 92       	push	r15
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	00 d0       	rcall	.+0      	; 0x141a <_ZN6Timer116setDutyCycleComAEf+0xe>
    141a:	1f 92       	push	r1
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	6a 01       	movw	r12, r20
    1422:	7b 01       	movw	r14, r22
	volatile float percent = ICR1/100;
    1424:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
    1428:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
    142c:	36 95       	lsr	r19
    142e:	27 95       	ror	r18
    1430:	36 95       	lsr	r19
    1432:	27 95       	ror	r18
    1434:	ab e7       	ldi	r26, 0x7B	; 123
    1436:	b4 e1       	ldi	r27, 0x14	; 20
    1438:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__umulhisi3>
    143c:	96 95       	lsr	r25
    143e:	87 95       	ror	r24
    1440:	bc 01       	movw	r22, r24
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	c1 d7       	rcall	.+3970   	; 0x23ca <__floatunsisf>
    1448:	69 83       	std	Y+1, r22	; 0x01
    144a:	7a 83       	std	Y+2, r23	; 0x02
    144c:	8b 83       	std	Y+3, r24	; 0x03
    144e:	9c 83       	std	Y+4, r25	; 0x04
	OCR1A = (uint8_t)percent*dutyCycle;
    1450:	69 81       	ldd	r22, Y+1	; 0x01
    1452:	7a 81       	ldd	r23, Y+2	; 0x02
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	9c 81       	ldd	r25, Y+4	; 0x04
    1458:	8c d7       	rcall	.+3864   	; 0x2372 <__fixunssfsi>
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	b6 d7       	rcall	.+3948   	; 0x23ce <__floatsisf>
    1462:	a7 01       	movw	r20, r14
    1464:	96 01       	movw	r18, r12
    1466:	0e 94 9b 12 	call	0x2536	; 0x2536 <__mulsf3>
    146a:	83 d7       	rcall	.+3846   	; 0x2372 <__fixunssfsi>
    146c:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    1470:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
}
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	ff 90       	pop	r15
    1482:	ef 90       	pop	r14
    1484:	df 90       	pop	r13
    1486:	cf 90       	pop	r12
    1488:	08 95       	ret

0000148a <_ZN6Timer116setDutyCycleComBEf>:

void Timer1::setDutyCycleComB( float dutyCycle )
{
    148a:	cf 92       	push	r12
    148c:	df 92       	push	r13
    148e:	ef 92       	push	r14
    1490:	ff 92       	push	r15
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	00 d0       	rcall	.+0      	; 0x1498 <_ZN6Timer116setDutyCycleComBEf+0xe>
    1498:	1f 92       	push	r1
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	6a 01       	movw	r12, r20
    14a0:	7b 01       	movw	r14, r22
	volatile float percent = ICR1/100;
    14a2:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
    14a6:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
    14aa:	36 95       	lsr	r19
    14ac:	27 95       	ror	r18
    14ae:	36 95       	lsr	r19
    14b0:	27 95       	ror	r18
    14b2:	ab e7       	ldi	r26, 0x7B	; 123
    14b4:	b4 e1       	ldi	r27, 0x14	; 20
    14b6:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__umulhisi3>
    14ba:	96 95       	lsr	r25
    14bc:	87 95       	ror	r24
    14be:	bc 01       	movw	r22, r24
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	82 d7       	rcall	.+3844   	; 0x23ca <__floatunsisf>
    14c6:	69 83       	std	Y+1, r22	; 0x01
    14c8:	7a 83       	std	Y+2, r23	; 0x02
    14ca:	8b 83       	std	Y+3, r24	; 0x03
    14cc:	9c 83       	std	Y+4, r25	; 0x04
	OCR1B = (uint8_t)percent*dutyCycle;
    14ce:	69 81       	ldd	r22, Y+1	; 0x01
    14d0:	7a 81       	ldd	r23, Y+2	; 0x02
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	9c 81       	ldd	r25, Y+4	; 0x04
    14d6:	4d d7       	rcall	.+3738   	; 0x2372 <__fixunssfsi>
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	77 d7       	rcall	.+3822   	; 0x23ce <__floatsisf>
    14e0:	a7 01       	movw	r20, r14
    14e2:	96 01       	movw	r18, r12
    14e4:	0e 94 9b 12 	call	0x2536	; 0x2536 <__mulsf3>
    14e8:	44 d7       	rcall	.+3720   	; 0x2372 <__fixunssfsi>
    14ea:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    14ee:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
}
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	ff 90       	pop	r15
    1500:	ef 90       	pop	r14
    1502:	df 90       	pop	r13
    1504:	cf 90       	pop	r12
    1506:	08 95       	ret

00001508 <_ZN6Timer116setDutyCycleComCEf>:

void Timer1::setDutyCycleComC( float dutyCycle )
{
    1508:	cf 92       	push	r12
    150a:	df 92       	push	r13
    150c:	ef 92       	push	r14
    150e:	ff 92       	push	r15
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
    1514:	00 d0       	rcall	.+0      	; 0x1516 <_ZN6Timer116setDutyCycleComCEf+0xe>
    1516:	1f 92       	push	r1
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	6a 01       	movw	r12, r20
    151e:	7b 01       	movw	r14, r22
	volatile float percent = ICR1/100;
    1520:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
    1524:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
    1528:	36 95       	lsr	r19
    152a:	27 95       	ror	r18
    152c:	36 95       	lsr	r19
    152e:	27 95       	ror	r18
    1530:	ab e7       	ldi	r26, 0x7B	; 123
    1532:	b4 e1       	ldi	r27, 0x14	; 20
    1534:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__umulhisi3>
    1538:	96 95       	lsr	r25
    153a:	87 95       	ror	r24
    153c:	bc 01       	movw	r22, r24
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	43 d7       	rcall	.+3718   	; 0x23ca <__floatunsisf>
    1544:	69 83       	std	Y+1, r22	; 0x01
    1546:	7a 83       	std	Y+2, r23	; 0x02
    1548:	8b 83       	std	Y+3, r24	; 0x03
    154a:	9c 83       	std	Y+4, r25	; 0x04
	OCR1C = (uint8_t)percent*dutyCycle;
    154c:	69 81       	ldd	r22, Y+1	; 0x01
    154e:	7a 81       	ldd	r23, Y+2	; 0x02
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	9c 81       	ldd	r25, Y+4	; 0x04
    1554:	0e d7       	rcall	.+3612   	; 0x2372 <__fixunssfsi>
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	38 d7       	rcall	.+3696   	; 0x23ce <__floatsisf>
    155e:	a7 01       	movw	r20, r14
    1560:	96 01       	movw	r18, r12
    1562:	e9 d7       	rcall	.+4050   	; 0x2536 <__mulsf3>
    1564:	06 d7       	rcall	.+3596   	; 0x2372 <__fixunssfsi>
    1566:	70 93 8d 00 	sts	0x008D, r23	; 0x80008d <__TEXT_REGION_LENGTH__+0x70008d>
    156a:	60 93 8c 00 	sts	0x008C, r22	; 0x80008c <__TEXT_REGION_LENGTH__+0x70008c>
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	ff 90       	pop	r15
    157c:	ef 90       	pop	r14
    157e:	df 90       	pop	r13
    1580:	cf 90       	pop	r12
    1582:	08 95       	ret

00001584 <_ZN6Timer3C1Ev>:
#include <avr/io.h>

Timer3::Timer3()
{
	// Set B5 to output
	DDRE = DDRE | ( 1 << 3 ) | ( 1 << 4 ) | ( 1 << 5 );
    1584:	8d b1       	in	r24, 0x0d	; 13
    1586:	88 63       	ori	r24, 0x38	; 56
    1588:	8d b9       	out	0x0d, r24	; 13
	
	// Set timer to run in PWM, Phase Correct mode with 50 Hz freq.
	TCCR3A = ( 1 << COM3A1 ) | ( 1 << COM3B1 ) | ( 1 << COM3C1 ) | ( 0 << WGM30 ) | ( 0 << WGM31 );
    158a:	88 ea       	ldi	r24, 0xA8	; 168
    158c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
	TCCR3B = ( 1 << WGM33 ) | ( 0 << CS30 )  | ( 1 << CS32 );
    1590:	84 e1       	ldi	r24, 0x14	; 20
    1592:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	TCCR3C = 0;
    1596:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__TEXT_REGION_LENGTH__+0x700092>
	ICR3 = 622;
    159a:	8e e6       	ldi	r24, 0x6E	; 110
    159c:	92 e0       	ldi	r25, 0x02	; 2
    159e:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
    15a2:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
	
	OCR3A = 0;
    15a6:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    15aa:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
	OCR3B = 0;
    15ae:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
    15b2:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
	OCR3C = 0;
    15b6:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <__TEXT_REGION_LENGTH__+0x70009d>
    15ba:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <__TEXT_REGION_LENGTH__+0x70009c>
    15be:	08 95       	ret

000015c0 <_ZN6Timer316setDutyCycleComAEf>:
}

void Timer3::setDutyCycleComA( float dutyCycle )
{
    15c0:	cf 92       	push	r12
    15c2:	df 92       	push	r13
    15c4:	ef 92       	push	r14
    15c6:	ff 92       	push	r15
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <_ZN6Timer316setDutyCycleComAEf+0xe>
    15ce:	1f 92       	push	r1
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	6a 01       	movw	r12, r20
    15d6:	7b 01       	movw	r14, r22
	volatile float percent = ICR3/100;
    15d8:	20 91 96 00 	lds	r18, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
    15dc:	30 91 97 00 	lds	r19, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
    15e0:	36 95       	lsr	r19
    15e2:	27 95       	ror	r18
    15e4:	36 95       	lsr	r19
    15e6:	27 95       	ror	r18
    15e8:	ab e7       	ldi	r26, 0x7B	; 123
    15ea:	b4 e1       	ldi	r27, 0x14	; 20
    15ec:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__umulhisi3>
    15f0:	96 95       	lsr	r25
    15f2:	87 95       	ror	r24
    15f4:	bc 01       	movw	r22, r24
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	e7 d6       	rcall	.+3534   	; 0x23ca <__floatunsisf>
    15fc:	69 83       	std	Y+1, r22	; 0x01
    15fe:	7a 83       	std	Y+2, r23	; 0x02
    1600:	8b 83       	std	Y+3, r24	; 0x03
    1602:	9c 83       	std	Y+4, r25	; 0x04
	OCR3A = (uint8_t)percent*dutyCycle;
    1604:	69 81       	ldd	r22, Y+1	; 0x01
    1606:	7a 81       	ldd	r23, Y+2	; 0x02
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	9c 81       	ldd	r25, Y+4	; 0x04
    160c:	b2 d6       	rcall	.+3428   	; 0x2372 <__fixunssfsi>
    160e:	70 e0       	ldi	r23, 0x00	; 0
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	dc d6       	rcall	.+3512   	; 0x23ce <__floatsisf>
    1616:	a7 01       	movw	r20, r14
    1618:	96 01       	movw	r18, r12
    161a:	8d d7       	rcall	.+3866   	; 0x2536 <__mulsf3>
    161c:	aa d6       	rcall	.+3412   	; 0x2372 <__fixunssfsi>
    161e:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    1622:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
}
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	ff 90       	pop	r15
    1634:	ef 90       	pop	r14
    1636:	df 90       	pop	r13
    1638:	cf 90       	pop	r12
    163a:	08 95       	ret

0000163c <_ZN6Timer316setDutyCycleComBEf>:

void Timer3::setDutyCycleComB( float dutyCycle )
{
    163c:	cf 92       	push	r12
    163e:	df 92       	push	r13
    1640:	ef 92       	push	r14
    1642:	ff 92       	push	r15
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	00 d0       	rcall	.+0      	; 0x164a <_ZN6Timer316setDutyCycleComBEf+0xe>
    164a:	1f 92       	push	r1
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	6a 01       	movw	r12, r20
    1652:	7b 01       	movw	r14, r22
	volatile float percent = ICR3/100;
    1654:	20 91 96 00 	lds	r18, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
    1658:	30 91 97 00 	lds	r19, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
    165c:	36 95       	lsr	r19
    165e:	27 95       	ror	r18
    1660:	36 95       	lsr	r19
    1662:	27 95       	ror	r18
    1664:	ab e7       	ldi	r26, 0x7B	; 123
    1666:	b4 e1       	ldi	r27, 0x14	; 20
    1668:	c9 d7       	rcall	.+3986   	; 0x25fc <__umulhisi3>
    166a:	96 95       	lsr	r25
    166c:	87 95       	ror	r24
    166e:	bc 01       	movw	r22, r24
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	aa d6       	rcall	.+3412   	; 0x23ca <__floatunsisf>
    1676:	69 83       	std	Y+1, r22	; 0x01
    1678:	7a 83       	std	Y+2, r23	; 0x02
    167a:	8b 83       	std	Y+3, r24	; 0x03
    167c:	9c 83       	std	Y+4, r25	; 0x04
	OCR3B = (uint8_t)percent*dutyCycle;
    167e:	69 81       	ldd	r22, Y+1	; 0x01
    1680:	7a 81       	ldd	r23, Y+2	; 0x02
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	9c 81       	ldd	r25, Y+4	; 0x04
    1686:	75 d6       	rcall	.+3306   	; 0x2372 <__fixunssfsi>
    1688:	70 e0       	ldi	r23, 0x00	; 0
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	9f d6       	rcall	.+3390   	; 0x23ce <__floatsisf>
    1690:	a7 01       	movw	r20, r14
    1692:	96 01       	movw	r18, r12
    1694:	50 d7       	rcall	.+3744   	; 0x2536 <__mulsf3>
    1696:	6d d6       	rcall	.+3290   	; 0x2372 <__fixunssfsi>
    1698:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
    169c:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
}
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	df 91       	pop	r29
    16aa:	cf 91       	pop	r28
    16ac:	ff 90       	pop	r15
    16ae:	ef 90       	pop	r14
    16b0:	df 90       	pop	r13
    16b2:	cf 90       	pop	r12
    16b4:	08 95       	ret

000016b6 <_ZN6Timer316setDutyCycleComCEf>:

void Timer3::setDutyCycleComC( float dutyCycle )
{
    16b6:	cf 92       	push	r12
    16b8:	df 92       	push	r13
    16ba:	ef 92       	push	r14
    16bc:	ff 92       	push	r15
    16be:	cf 93       	push	r28
    16c0:	df 93       	push	r29
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <_ZN6Timer316setDutyCycleComCEf+0xe>
    16c4:	1f 92       	push	r1
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	6a 01       	movw	r12, r20
    16cc:	7b 01       	movw	r14, r22
	volatile float percent = ICR3/100;
    16ce:	20 91 96 00 	lds	r18, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
    16d2:	30 91 97 00 	lds	r19, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
    16d6:	36 95       	lsr	r19
    16d8:	27 95       	ror	r18
    16da:	36 95       	lsr	r19
    16dc:	27 95       	ror	r18
    16de:	ab e7       	ldi	r26, 0x7B	; 123
    16e0:	b4 e1       	ldi	r27, 0x14	; 20
    16e2:	8c d7       	rcall	.+3864   	; 0x25fc <__umulhisi3>
    16e4:	96 95       	lsr	r25
    16e6:	87 95       	ror	r24
    16e8:	bc 01       	movw	r22, r24
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	6d d6       	rcall	.+3290   	; 0x23ca <__floatunsisf>
    16f0:	69 83       	std	Y+1, r22	; 0x01
    16f2:	7a 83       	std	Y+2, r23	; 0x02
    16f4:	8b 83       	std	Y+3, r24	; 0x03
    16f6:	9c 83       	std	Y+4, r25	; 0x04
	OCR3C = (uint8_t)percent*dutyCycle;
    16f8:	69 81       	ldd	r22, Y+1	; 0x01
    16fa:	7a 81       	ldd	r23, Y+2	; 0x02
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1700:	38 d6       	rcall	.+3184   	; 0x2372 <__fixunssfsi>
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	62 d6       	rcall	.+3268   	; 0x23ce <__floatsisf>
    170a:	a7 01       	movw	r20, r14
    170c:	96 01       	movw	r18, r12
    170e:	13 d7       	rcall	.+3622   	; 0x2536 <__mulsf3>
    1710:	30 d6       	rcall	.+3168   	; 0x2372 <__fixunssfsi>
    1712:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <__TEXT_REGION_LENGTH__+0x70009d>
    1716:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <__TEXT_REGION_LENGTH__+0x70009c>
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	ff 90       	pop	r15
    1728:	ef 90       	pop	r14
    172a:	df 90       	pop	r13
    172c:	cf 90       	pop	r12
    172e:	08 95       	ret

00001730 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    1730:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    1732:	03 96       	adiw	r24, 0x03	; 3
    1734:	92 83       	std	Z+2, r25	; 0x02
    1736:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1738:	2f ef       	ldi	r18, 0xFF	; 255
    173a:	3f ef       	ldi	r19, 0xFF	; 255
    173c:	34 83       	std	Z+4, r19	; 0x04
    173e:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    1740:	96 83       	std	Z+6, r25	; 0x06
    1742:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    1744:	90 87       	std	Z+8, r25	; 0x08
    1746:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    1748:	10 82       	st	Z, r1
    174a:	08 95       	ret

0000174c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    174c:	fc 01       	movw	r30, r24
    174e:	11 86       	std	Z+9, r1	; 0x09
    1750:	10 86       	std	Z+8, r1	; 0x08
    1752:	08 95       	ret

00001754 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	fc 01       	movw	r30, r24
    175a:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    175c:	21 81       	ldd	r18, Z+1	; 0x01
    175e:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
    1760:	e9 01       	movw	r28, r18
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	9b 81       	ldd	r25, Y+3	; 0x03
    1766:	13 96       	adiw	r26, 0x03	; 3
    1768:	9c 93       	st	X, r25
    176a:	8e 93       	st	-X, r24
    176c:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
    176e:	81 81       	ldd	r24, Z+1	; 0x01
    1770:	92 81       	ldd	r25, Z+2	; 0x02
    1772:	15 96       	adiw	r26, 0x05	; 5
    1774:	9c 93       	st	X, r25
    1776:	8e 93       	st	-X, r24
    1778:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	9b 81       	ldd	r25, Y+3	; 0x03
    177e:	ec 01       	movw	r28, r24
    1780:	7d 83       	std	Y+5, r23	; 0x05
    1782:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    1784:	e9 01       	movw	r28, r18
    1786:	7b 83       	std	Y+3, r23	; 0x03
    1788:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    178a:	72 83       	std	Z+2, r23	; 0x02
    178c:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    178e:	19 96       	adiw	r26, 0x09	; 9
    1790:	fc 93       	st	X, r31
    1792:	ee 93       	st	-X, r30
    1794:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
    1796:	80 81       	ld	r24, Z
    1798:	8f 5f       	subi	r24, 0xFF	; 255
    179a:	80 83       	st	Z, r24
}
    179c:	df 91       	pop	r29
    179e:	cf 91       	pop	r28
    17a0:	08 95       	ret

000017a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    17a2:	cf 93       	push	r28
    17a4:	df 93       	push	r29
    17a6:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    17a8:	48 81       	ld	r20, Y
    17aa:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    17ac:	4f 3f       	cpi	r20, 0xFF	; 255
    17ae:	2f ef       	ldi	r18, 0xFF	; 255
    17b0:	52 07       	cpc	r21, r18
    17b2:	31 f4       	brne	.+12     	; 0x17c0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    17b4:	dc 01       	movw	r26, r24
    17b6:	17 96       	adiw	r26, 0x07	; 7
    17b8:	ed 91       	ld	r30, X+
    17ba:	fc 91       	ld	r31, X
    17bc:	18 97       	sbiw	r26, 0x08	; 8
    17be:	0d c0       	rjmp	.+26     	; 0x17da <vListInsert+0x38>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    17c0:	fc 01       	movw	r30, r24
    17c2:	33 96       	adiw	r30, 0x03	; 3
    17c4:	03 c0       	rjmp	.+6      	; 0x17cc <vListInsert+0x2a>
    17c6:	02 80       	ldd	r0, Z+2	; 0x02
    17c8:	f3 81       	ldd	r31, Z+3	; 0x03
    17ca:	e0 2d       	mov	r30, r0
    17cc:	a2 81       	ldd	r26, Z+2	; 0x02
    17ce:	b3 81       	ldd	r27, Z+3	; 0x03
    17d0:	2d 91       	ld	r18, X+
    17d2:	3c 91       	ld	r19, X
    17d4:	42 17       	cp	r20, r18
    17d6:	53 07       	cpc	r21, r19
    17d8:	b0 f7       	brcc	.-20     	; 0x17c6 <vListInsert+0x24>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    17da:	a2 81       	ldd	r26, Z+2	; 0x02
    17dc:	b3 81       	ldd	r27, Z+3	; 0x03
    17de:	bb 83       	std	Y+3, r27	; 0x03
    17e0:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    17e2:	15 96       	adiw	r26, 0x05	; 5
    17e4:	dc 93       	st	X, r29
    17e6:	ce 93       	st	-X, r28
    17e8:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
    17ea:	fd 83       	std	Y+5, r31	; 0x05
    17ec:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    17ee:	d3 83       	std	Z+3, r29	; 0x03
    17f0:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    17f2:	99 87       	std	Y+9, r25	; 0x09
    17f4:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    17f6:	fc 01       	movw	r30, r24
    17f8:	20 81       	ld	r18, Z
    17fa:	2f 5f       	subi	r18, 0xFF	; 255
    17fc:	20 83       	st	Z, r18
}
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	08 95       	ret

00001804 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    1804:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1806:	a2 81       	ldd	r26, Z+2	; 0x02
    1808:	b3 81       	ldd	r27, Z+3	; 0x03
    180a:	84 81       	ldd	r24, Z+4	; 0x04
    180c:	95 81       	ldd	r25, Z+5	; 0x05
    180e:	15 96       	adiw	r26, 0x05	; 5
    1810:	9c 93       	st	X, r25
    1812:	8e 93       	st	-X, r24
    1814:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1816:	a4 81       	ldd	r26, Z+4	; 0x04
    1818:	b5 81       	ldd	r27, Z+5	; 0x05
    181a:	82 81       	ldd	r24, Z+2	; 0x02
    181c:	93 81       	ldd	r25, Z+3	; 0x03
    181e:	13 96       	adiw	r26, 0x03	; 3
    1820:	9c 93       	st	X, r25
    1822:	8e 93       	st	-X, r24
    1824:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    1826:	a0 85       	ldd	r26, Z+8	; 0x08
    1828:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    182a:	11 96       	adiw	r26, 0x01	; 1
    182c:	8d 91       	ld	r24, X+
    182e:	9c 91       	ld	r25, X
    1830:	12 97       	sbiw	r26, 0x02	; 2
    1832:	e8 17       	cp	r30, r24
    1834:	f9 07       	cpc	r31, r25
    1836:	31 f4       	brne	.+12     	; 0x1844 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1838:	84 81       	ldd	r24, Z+4	; 0x04
    183a:	95 81       	ldd	r25, Z+5	; 0x05
    183c:	12 96       	adiw	r26, 0x02	; 2
    183e:	9c 93       	st	X, r25
    1840:	8e 93       	st	-X, r24
    1842:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
    1844:	11 86       	std	Z+9, r1	; 0x09
    1846:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1848:	8c 91       	ld	r24, X
    184a:	81 50       	subi	r24, 0x01	; 1
    184c:	8c 93       	st	X, r24
    184e:	08 95       	ret

00001850 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    1850:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    1854:	89 ef       	ldi	r24, 0xF9	; 249
    1856:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    185a:	8b e0       	ldi	r24, 0x0B	; 11
    185c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
    1860:	e3 e7       	ldi	r30, 0x73	; 115
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	82 60       	ori	r24, 0x02	; 2
    1868:	80 83       	st	Z, r24
    186a:	08 95       	ret

0000186c <pxPortInitialiseStack>:
    186c:	31 e1       	ldi	r19, 0x11	; 17
    186e:	fc 01       	movw	r30, r24
    1870:	30 83       	st	Z, r19
    1872:	31 97       	sbiw	r30, 0x01	; 1
    1874:	22 e2       	ldi	r18, 0x22	; 34
    1876:	20 83       	st	Z, r18
    1878:	31 97       	sbiw	r30, 0x01	; 1
    187a:	a3 e3       	ldi	r26, 0x33	; 51
    187c:	a0 83       	st	Z, r26
    187e:	31 97       	sbiw	r30, 0x01	; 1
    1880:	60 83       	st	Z, r22
    1882:	31 97       	sbiw	r30, 0x01	; 1
    1884:	70 83       	st	Z, r23
    1886:	31 97       	sbiw	r30, 0x01	; 1
    1888:	10 82       	st	Z, r1
    188a:	31 97       	sbiw	r30, 0x01	; 1
    188c:	10 82       	st	Z, r1
    188e:	31 97       	sbiw	r30, 0x01	; 1
    1890:	60 e8       	ldi	r22, 0x80	; 128
    1892:	60 83       	st	Z, r22
    1894:	31 97       	sbiw	r30, 0x01	; 1
    1896:	10 82       	st	Z, r1
    1898:	31 97       	sbiw	r30, 0x01	; 1
    189a:	10 82       	st	Z, r1
    189c:	31 97       	sbiw	r30, 0x01	; 1
    189e:	10 82       	st	Z, r1
    18a0:	31 97       	sbiw	r30, 0x01	; 1
    18a2:	62 e0       	ldi	r22, 0x02	; 2
    18a4:	60 83       	st	Z, r22
    18a6:	31 97       	sbiw	r30, 0x01	; 1
    18a8:	63 e0       	ldi	r22, 0x03	; 3
    18aa:	60 83       	st	Z, r22
    18ac:	31 97       	sbiw	r30, 0x01	; 1
    18ae:	64 e0       	ldi	r22, 0x04	; 4
    18b0:	60 83       	st	Z, r22
    18b2:	31 97       	sbiw	r30, 0x01	; 1
    18b4:	65 e0       	ldi	r22, 0x05	; 5
    18b6:	60 83       	st	Z, r22
    18b8:	31 97       	sbiw	r30, 0x01	; 1
    18ba:	66 e0       	ldi	r22, 0x06	; 6
    18bc:	60 83       	st	Z, r22
    18be:	31 97       	sbiw	r30, 0x01	; 1
    18c0:	67 e0       	ldi	r22, 0x07	; 7
    18c2:	60 83       	st	Z, r22
    18c4:	31 97       	sbiw	r30, 0x01	; 1
    18c6:	68 e0       	ldi	r22, 0x08	; 8
    18c8:	60 83       	st	Z, r22
    18ca:	31 97       	sbiw	r30, 0x01	; 1
    18cc:	69 e0       	ldi	r22, 0x09	; 9
    18ce:	60 83       	st	Z, r22
    18d0:	31 97       	sbiw	r30, 0x01	; 1
    18d2:	60 e1       	ldi	r22, 0x10	; 16
    18d4:	60 83       	st	Z, r22
    18d6:	31 97       	sbiw	r30, 0x01	; 1
    18d8:	30 83       	st	Z, r19
    18da:	31 97       	sbiw	r30, 0x01	; 1
    18dc:	32 e1       	ldi	r19, 0x12	; 18
    18de:	30 83       	st	Z, r19
    18e0:	31 97       	sbiw	r30, 0x01	; 1
    18e2:	33 e1       	ldi	r19, 0x13	; 19
    18e4:	30 83       	st	Z, r19
    18e6:	31 97       	sbiw	r30, 0x01	; 1
    18e8:	34 e1       	ldi	r19, 0x14	; 20
    18ea:	30 83       	st	Z, r19
    18ec:	31 97       	sbiw	r30, 0x01	; 1
    18ee:	35 e1       	ldi	r19, 0x15	; 21
    18f0:	30 83       	st	Z, r19
    18f2:	31 97       	sbiw	r30, 0x01	; 1
    18f4:	36 e1       	ldi	r19, 0x16	; 22
    18f6:	30 83       	st	Z, r19
    18f8:	31 97       	sbiw	r30, 0x01	; 1
    18fa:	37 e1       	ldi	r19, 0x17	; 23
    18fc:	30 83       	st	Z, r19
    18fe:	31 97       	sbiw	r30, 0x01	; 1
    1900:	38 e1       	ldi	r19, 0x18	; 24
    1902:	30 83       	st	Z, r19
    1904:	31 97       	sbiw	r30, 0x01	; 1
    1906:	39 e1       	ldi	r19, 0x19	; 25
    1908:	30 83       	st	Z, r19
    190a:	31 97       	sbiw	r30, 0x01	; 1
    190c:	30 e2       	ldi	r19, 0x20	; 32
    190e:	30 83       	st	Z, r19
    1910:	31 97       	sbiw	r30, 0x01	; 1
    1912:	31 e2       	ldi	r19, 0x21	; 33
    1914:	30 83       	st	Z, r19
    1916:	31 97       	sbiw	r30, 0x01	; 1
    1918:	20 83       	st	Z, r18
    191a:	31 97       	sbiw	r30, 0x01	; 1
    191c:	23 e2       	ldi	r18, 0x23	; 35
    191e:	20 83       	st	Z, r18
    1920:	31 97       	sbiw	r30, 0x01	; 1
    1922:	40 83       	st	Z, r20
    1924:	31 97       	sbiw	r30, 0x01	; 1
    1926:	50 83       	st	Z, r21
    1928:	31 97       	sbiw	r30, 0x01	; 1
    192a:	26 e2       	ldi	r18, 0x26	; 38
    192c:	20 83       	st	Z, r18
    192e:	31 97       	sbiw	r30, 0x01	; 1
    1930:	27 e2       	ldi	r18, 0x27	; 39
    1932:	20 83       	st	Z, r18
    1934:	31 97       	sbiw	r30, 0x01	; 1
    1936:	28 e2       	ldi	r18, 0x28	; 40
    1938:	20 83       	st	Z, r18
    193a:	31 97       	sbiw	r30, 0x01	; 1
    193c:	29 e2       	ldi	r18, 0x29	; 41
    193e:	20 83       	st	Z, r18
    1940:	31 97       	sbiw	r30, 0x01	; 1
    1942:	20 e3       	ldi	r18, 0x30	; 48
    1944:	20 83       	st	Z, r18
    1946:	31 97       	sbiw	r30, 0x01	; 1
    1948:	21 e3       	ldi	r18, 0x31	; 49
    194a:	20 83       	st	Z, r18
    194c:	89 97       	sbiw	r24, 0x29	; 41
    194e:	08 95       	ret

00001950 <xPortStartScheduler>:
    1950:	7f df       	rcall	.-258    	; 0x1850 <prvSetupTimerInterrupt>
    1952:	a0 91 cb 16 	lds	r26, 0x16CB	; 0x8016cb <pxCurrentTCB>
    1956:	b0 91 cc 16 	lds	r27, 0x16CC	; 0x8016cc <pxCurrentTCB+0x1>
    195a:	cd 91       	ld	r28, X+
    195c:	cd bf       	out	0x3d, r28	; 61
    195e:	dd 91       	ld	r29, X+
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	ff 91       	pop	r31
    1964:	ef 91       	pop	r30
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	bf 91       	pop	r27
    196c:	af 91       	pop	r26
    196e:	9f 91       	pop	r25
    1970:	8f 91       	pop	r24
    1972:	7f 91       	pop	r23
    1974:	6f 91       	pop	r22
    1976:	5f 91       	pop	r21
    1978:	4f 91       	pop	r20
    197a:	3f 91       	pop	r19
    197c:	2f 91       	pop	r18
    197e:	1f 91       	pop	r17
    1980:	0f 91       	pop	r16
    1982:	ff 90       	pop	r15
    1984:	ef 90       	pop	r14
    1986:	df 90       	pop	r13
    1988:	cf 90       	pop	r12
    198a:	bf 90       	pop	r11
    198c:	af 90       	pop	r10
    198e:	9f 90       	pop	r9
    1990:	8f 90       	pop	r8
    1992:	7f 90       	pop	r7
    1994:	6f 90       	pop	r6
    1996:	5f 90       	pop	r5
    1998:	4f 90       	pop	r4
    199a:	3f 90       	pop	r3
    199c:	2f 90       	pop	r2
    199e:	1f 90       	pop	r1
    19a0:	0f 90       	pop	r0
    19a2:	0c be       	out	0x3c, r0	; 60
    19a4:	0f 90       	pop	r0
    19a6:	0b be       	out	0x3b, r0	; 59
    19a8:	0f 90       	pop	r0
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	0f 90       	pop	r0
    19ae:	08 95       	ret
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	08 95       	ret

000019b4 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    19b4:	0f 92       	push	r0
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	f8 94       	cli
    19ba:	0f 92       	push	r0
    19bc:	0b b6       	in	r0, 0x3b	; 59
    19be:	0f 92       	push	r0
    19c0:	0c b6       	in	r0, 0x3c	; 60
    19c2:	0f 92       	push	r0
    19c4:	1f 92       	push	r1
    19c6:	11 24       	eor	r1, r1
    19c8:	2f 92       	push	r2
    19ca:	3f 92       	push	r3
    19cc:	4f 92       	push	r4
    19ce:	5f 92       	push	r5
    19d0:	6f 92       	push	r6
    19d2:	7f 92       	push	r7
    19d4:	8f 92       	push	r8
    19d6:	9f 92       	push	r9
    19d8:	af 92       	push	r10
    19da:	bf 92       	push	r11
    19dc:	cf 92       	push	r12
    19de:	df 92       	push	r13
    19e0:	ef 92       	push	r14
    19e2:	ff 92       	push	r15
    19e4:	0f 93       	push	r16
    19e6:	1f 93       	push	r17
    19e8:	2f 93       	push	r18
    19ea:	3f 93       	push	r19
    19ec:	4f 93       	push	r20
    19ee:	5f 93       	push	r21
    19f0:	6f 93       	push	r22
    19f2:	7f 93       	push	r23
    19f4:	8f 93       	push	r24
    19f6:	9f 93       	push	r25
    19f8:	af 93       	push	r26
    19fa:	bf 93       	push	r27
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	ef 93       	push	r30
    1a02:	ff 93       	push	r31
    1a04:	a0 91 cb 16 	lds	r26, 0x16CB	; 0x8016cb <pxCurrentTCB>
    1a08:	b0 91 cc 16 	lds	r27, 0x16CC	; 0x8016cc <pxCurrentTCB+0x1>
    1a0c:	0d b6       	in	r0, 0x3d	; 61
    1a0e:	0d 92       	st	X+, r0
    1a10:	0e b6       	in	r0, 0x3e	; 62
    1a12:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1a14:	84 d3       	rcall	.+1800   	; 0x211e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1a16:	a0 91 cb 16 	lds	r26, 0x16CB	; 0x8016cb <pxCurrentTCB>
    1a1a:	b0 91 cc 16 	lds	r27, 0x16CC	; 0x8016cc <pxCurrentTCB+0x1>
    1a1e:	cd 91       	ld	r28, X+
    1a20:	cd bf       	out	0x3d, r28	; 61
    1a22:	dd 91       	ld	r29, X+
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	ff 91       	pop	r31
    1a28:	ef 91       	pop	r30
    1a2a:	df 91       	pop	r29
    1a2c:	cf 91       	pop	r28
    1a2e:	bf 91       	pop	r27
    1a30:	af 91       	pop	r26
    1a32:	9f 91       	pop	r25
    1a34:	8f 91       	pop	r24
    1a36:	7f 91       	pop	r23
    1a38:	6f 91       	pop	r22
    1a3a:	5f 91       	pop	r21
    1a3c:	4f 91       	pop	r20
    1a3e:	3f 91       	pop	r19
    1a40:	2f 91       	pop	r18
    1a42:	1f 91       	pop	r17
    1a44:	0f 91       	pop	r16
    1a46:	ff 90       	pop	r15
    1a48:	ef 90       	pop	r14
    1a4a:	df 90       	pop	r13
    1a4c:	cf 90       	pop	r12
    1a4e:	bf 90       	pop	r11
    1a50:	af 90       	pop	r10
    1a52:	9f 90       	pop	r9
    1a54:	8f 90       	pop	r8
    1a56:	7f 90       	pop	r7
    1a58:	6f 90       	pop	r6
    1a5a:	5f 90       	pop	r5
    1a5c:	4f 90       	pop	r4
    1a5e:	3f 90       	pop	r3
    1a60:	2f 90       	pop	r2
    1a62:	1f 90       	pop	r1
    1a64:	0f 90       	pop	r0
    1a66:	0c be       	out	0x3c, r0	; 60
    1a68:	0f 90       	pop	r0
    1a6a:	0b be       	out	0x3b, r0	; 59
    1a6c:	0f 90       	pop	r0
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1a72:	08 95       	ret

00001a74 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1a74:	0f 92       	push	r0
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	0f 92       	push	r0
    1a7c:	0b b6       	in	r0, 0x3b	; 59
    1a7e:	0f 92       	push	r0
    1a80:	0c b6       	in	r0, 0x3c	; 60
    1a82:	0f 92       	push	r0
    1a84:	1f 92       	push	r1
    1a86:	11 24       	eor	r1, r1
    1a88:	2f 92       	push	r2
    1a8a:	3f 92       	push	r3
    1a8c:	4f 92       	push	r4
    1a8e:	5f 92       	push	r5
    1a90:	6f 92       	push	r6
    1a92:	7f 92       	push	r7
    1a94:	8f 92       	push	r8
    1a96:	9f 92       	push	r9
    1a98:	af 92       	push	r10
    1a9a:	bf 92       	push	r11
    1a9c:	cf 92       	push	r12
    1a9e:	df 92       	push	r13
    1aa0:	ef 92       	push	r14
    1aa2:	ff 92       	push	r15
    1aa4:	0f 93       	push	r16
    1aa6:	1f 93       	push	r17
    1aa8:	2f 93       	push	r18
    1aaa:	3f 93       	push	r19
    1aac:	4f 93       	push	r20
    1aae:	5f 93       	push	r21
    1ab0:	6f 93       	push	r22
    1ab2:	7f 93       	push	r23
    1ab4:	8f 93       	push	r24
    1ab6:	9f 93       	push	r25
    1ab8:	af 93       	push	r26
    1aba:	bf 93       	push	r27
    1abc:	cf 93       	push	r28
    1abe:	df 93       	push	r29
    1ac0:	ef 93       	push	r30
    1ac2:	ff 93       	push	r31
    1ac4:	a0 91 cb 16 	lds	r26, 0x16CB	; 0x8016cb <pxCurrentTCB>
    1ac8:	b0 91 cc 16 	lds	r27, 0x16CC	; 0x8016cc <pxCurrentTCB+0x1>
    1acc:	0d b6       	in	r0, 0x3d	; 61
    1ace:	0d 92       	st	X+, r0
    1ad0:	0e b6       	in	r0, 0x3e	; 62
    1ad2:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    1ad4:	ef d1       	rcall	.+990    	; 0x1eb4 <vTaskIncrementTick>
	vTaskSwitchContext();
    1ad6:	23 d3       	rcall	.+1606   	; 0x211e <vTaskSwitchContext>
    1ad8:	a0 91 cb 16 	lds	r26, 0x16CB	; 0x8016cb <pxCurrentTCB>
	portRESTORE_CONTEXT();
    1adc:	b0 91 cc 16 	lds	r27, 0x16CC	; 0x8016cc <pxCurrentTCB+0x1>
    1ae0:	cd 91       	ld	r28, X+
    1ae2:	cd bf       	out	0x3d, r28	; 61
    1ae4:	dd 91       	ld	r29, X+
    1ae6:	de bf       	out	0x3e, r29	; 62
    1ae8:	ff 91       	pop	r31
    1aea:	ef 91       	pop	r30
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	bf 91       	pop	r27
    1af2:	af 91       	pop	r26
    1af4:	9f 91       	pop	r25
    1af6:	8f 91       	pop	r24
    1af8:	7f 91       	pop	r23
    1afa:	6f 91       	pop	r22
    1afc:	5f 91       	pop	r21
    1afe:	4f 91       	pop	r20
    1b00:	3f 91       	pop	r19
    1b02:	2f 91       	pop	r18
    1b04:	1f 91       	pop	r17
    1b06:	0f 91       	pop	r16
    1b08:	ff 90       	pop	r15
    1b0a:	ef 90       	pop	r14
    1b0c:	df 90       	pop	r13
    1b0e:	cf 90       	pop	r12
    1b10:	bf 90       	pop	r11
    1b12:	af 90       	pop	r10
    1b14:	9f 90       	pop	r9
    1b16:	8f 90       	pop	r8
    1b18:	7f 90       	pop	r7
    1b1a:	6f 90       	pop	r6
    1b1c:	5f 90       	pop	r5
    1b1e:	4f 90       	pop	r4
    1b20:	3f 90       	pop	r3
    1b22:	2f 90       	pop	r2
    1b24:	1f 90       	pop	r1
    1b26:	0f 90       	pop	r0
    1b28:	0c be       	out	0x3c, r0	; 60
    1b2a:	0f 90       	pop	r0
    1b2c:	0b be       	out	0x3b, r0	; 59
    1b2e:	0f 90       	pop	r0
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	0f 90       	pop	r0
    1b34:	08 95       	ret

00001b36 <__vector_47>:
	asm volatile ( "ret" );
    1b36:	9e df       	rcall	.-196    	; 0x1a74 <vPortYieldFromTick>
//	void SIG_OUTPUT_COMPARE1A( void )
	void TIMER5_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER5_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
    1b38:	18 95       	reti

00001b3a <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1b3a:	cf 93       	push	r28
    1b3c:	df 93       	push	r29
    1b3e:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    1b40:	b3 d1       	rcall	.+870    	; 0x1ea8 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    1b42:	20 91 0e 03 	lds	r18, 0x030E	; 0x80030e <xNextFreeByte>
    1b46:	30 91 0f 03 	lds	r19, 0x030F	; 0x80030f <xNextFreeByte+0x1>
    1b4a:	c9 01       	movw	r24, r18
    1b4c:	8c 0f       	add	r24, r28
    1b4e:	9d 1f       	adc	r25, r29
    1b50:	88 38       	cpi	r24, 0x88	; 136
    1b52:	43 e1       	ldi	r20, 0x13	; 19
    1b54:	94 07       	cpc	r25, r20
    1b56:	58 f4       	brcc	.+22     	; 0x1b6e <pvPortMalloc+0x34>
    1b58:	28 17       	cp	r18, r24
    1b5a:	39 07       	cpc	r19, r25
    1b5c:	58 f4       	brcc	.+22     	; 0x1b74 <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    1b5e:	e9 01       	movw	r28, r18
    1b60:	c0 5f       	subi	r28, 0xF0	; 240
    1b62:	dc 4f       	sbci	r29, 0xFC	; 252
			xNextFreeByte += xWantedSize;			
    1b64:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <xNextFreeByte+0x1>
    1b68:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <xNextFreeByte>
    1b6c:	05 c0       	rjmp	.+10     	; 0x1b78 <pvPortMalloc+0x3e>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
    1b6e:	c0 e0       	ldi	r28, 0x00	; 0
    1b70:	d0 e0       	ldi	r29, 0x00	; 0
    1b72:	02 c0       	rjmp	.+4      	; 0x1b78 <pvPortMalloc+0x3e>
    1b74:	c0 e0       	ldi	r28, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
    1b76:	d0 e0       	ldi	r29, 0x00	; 0
    1b78:	44 d2       	rcall	.+1160   	; 0x2002 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
    1b7a:	ce 01       	movw	r24, r28
    1b7c:	df 91       	pop	r29
    1b7e:	cf 91       	pop	r28
    1b80:	08 95       	ret

00001b82 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1b82:	08 95       	ret

00001b84 <prvIdleTask>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    1b84:	80 91 c2 16 	lds	r24, 0x16C2	; 0x8016c2 <pxReadyTasksLists>
    1b88:	82 30       	cpi	r24, 0x02	; 2
    1b8a:	e0 f3       	brcs	.-8      	; 0x1b84 <prvIdleTask>
    1b8c:	13 df       	rcall	.-474    	; 0x19b4 <vPortYield>
    1b8e:	fa cf       	rjmp	.-12     	; 0x1b84 <prvIdleTask>

00001b90 <prvAllocateTCBAndStack>:
    1b90:	ef 92       	push	r14
    1b92:	ff 92       	push	r15
    1b94:	0f 93       	push	r16
    1b96:	1f 93       	push	r17
    1b98:	cf 93       	push	r28
    1b9a:	df 93       	push	r29
    1b9c:	7c 01       	movw	r14, r24
    1b9e:	eb 01       	movw	r28, r22
    1ba0:	81 e2       	ldi	r24, 0x21	; 33
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	ca df       	rcall	.-108    	; 0x1b3a <pvPortMalloc>
    1ba6:	8c 01       	movw	r16, r24
    1ba8:	89 2b       	or	r24, r25
    1baa:	a1 f0       	breq	.+40     	; 0x1bd4 <prvAllocateTCBAndStack+0x44>
    1bac:	20 97       	sbiw	r28, 0x00	; 0
    1bae:	19 f4       	brne	.+6      	; 0x1bb6 <prvAllocateTCBAndStack+0x26>
    1bb0:	c7 01       	movw	r24, r14
    1bb2:	c3 df       	rcall	.-122    	; 0x1b3a <pvPortMalloc>
    1bb4:	01 c0       	rjmp	.+2      	; 0x1bb8 <prvAllocateTCBAndStack+0x28>
    1bb6:	ce 01       	movw	r24, r28
    1bb8:	f8 01       	movw	r30, r16
    1bba:	90 8f       	std	Z+24, r25	; 0x18
    1bbc:	87 8b       	std	Z+23, r24	; 0x17
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	29 f4       	brne	.+10     	; 0x1bcc <prvAllocateTCBAndStack+0x3c>
    1bc2:	c8 01       	movw	r24, r16
    1bc4:	de df       	rcall	.-68     	; 0x1b82 <vPortFree>
    1bc6:	00 e0       	ldi	r16, 0x00	; 0
    1bc8:	10 e0       	ldi	r17, 0x00	; 0
    1bca:	04 c0       	rjmp	.+8      	; 0x1bd4 <prvAllocateTCBAndStack+0x44>
    1bcc:	a7 01       	movw	r20, r14
    1bce:	65 ea       	ldi	r22, 0xA5	; 165
    1bd0:	70 e0       	ldi	r23, 0x00	; 0
    1bd2:	4c d6       	rcall	.+3224   	; 0x286c <memset>
    1bd4:	c8 01       	movw	r24, r16
    1bd6:	df 91       	pop	r29
    1bd8:	cf 91       	pop	r28
    1bda:	1f 91       	pop	r17
    1bdc:	0f 91       	pop	r16
    1bde:	ff 90       	pop	r15
    1be0:	ef 90       	pop	r14
    1be2:	08 95       	ret

00001be4 <prvInitialiseTCBVariables>:
    1be4:	1f 93       	push	r17
    1be6:	cf 93       	push	r28
    1be8:	df 93       	push	r29
    1bea:	ec 01       	movw	r28, r24
    1bec:	14 2f       	mov	r17, r20
    1bee:	48 e0       	ldi	r20, 0x08	; 8
    1bf0:	50 e0       	ldi	r21, 0x00	; 0
    1bf2:	49 96       	adiw	r24, 0x19	; 25
    1bf4:	42 d6       	rcall	.+3204   	; 0x287a <strncpy>
    1bf6:	18 a2       	std	Y+32, r1	; 0x20
    1bf8:	11 11       	cpse	r17, r1
    1bfa:	10 e0       	ldi	r17, 0x00	; 0
    1bfc:	1e 8b       	std	Y+22, r17	; 0x16
    1bfe:	ce 01       	movw	r24, r28
    1c00:	02 96       	adiw	r24, 0x02	; 2
    1c02:	a4 dd       	rcall	.-1208   	; 0x174c <vListInitialiseItem>
    1c04:	ce 01       	movw	r24, r28
    1c06:	0c 96       	adiw	r24, 0x0c	; 12
    1c08:	a1 dd       	rcall	.-1214   	; 0x174c <vListInitialiseItem>
    1c0a:	d9 87       	std	Y+9, r29	; 0x09
    1c0c:	c8 87       	std	Y+8, r28	; 0x08
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	81 1b       	sub	r24, r17
    1c14:	91 09       	sbc	r25, r1
    1c16:	9d 87       	std	Y+13, r25	; 0x0d
    1c18:	8c 87       	std	Y+12, r24	; 0x0c
    1c1a:	db 8b       	std	Y+19, r29	; 0x13
    1c1c:	ca 8b       	std	Y+18, r28	; 0x12
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	1f 91       	pop	r17
    1c24:	08 95       	ret

00001c26 <prvInitialiseTaskLists>:
    1c26:	cf 93       	push	r28
    1c28:	c0 e0       	ldi	r28, 0x00	; 0
    1c2a:	0f c0       	rjmp	.+30     	; 0x1c4a <prvInitialiseTaskLists+0x24>
    1c2c:	8c 2f       	mov	r24, r28
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	9c 01       	movw	r18, r24
    1c32:	22 0f       	add	r18, r18
    1c34:	33 1f       	adc	r19, r19
    1c36:	22 0f       	add	r18, r18
    1c38:	33 1f       	adc	r19, r19
    1c3a:	22 0f       	add	r18, r18
    1c3c:	33 1f       	adc	r19, r19
    1c3e:	82 0f       	add	r24, r18
    1c40:	93 1f       	adc	r25, r19
    1c42:	8e 53       	subi	r24, 0x3E	; 62
    1c44:	99 4e       	sbci	r25, 0xE9	; 233
    1c46:	74 dd       	rcall	.-1304   	; 0x1730 <vListInitialise>
    1c48:	cf 5f       	subi	r28, 0xFF	; 255
    1c4a:	cc 23       	and	r28, r28
    1c4c:	79 f3       	breq	.-34     	; 0x1c2c <prvInitialiseTaskLists+0x6>
    1c4e:	89 eb       	ldi	r24, 0xB9	; 185
    1c50:	96 e1       	ldi	r25, 0x16	; 22
    1c52:	6e dd       	rcall	.-1316   	; 0x1730 <vListInitialise>
    1c54:	80 eb       	ldi	r24, 0xB0	; 176
    1c56:	96 e1       	ldi	r25, 0x16	; 22
    1c58:	6b dd       	rcall	.-1322   	; 0x1730 <vListInitialise>
    1c5a:	83 ea       	ldi	r24, 0xA3	; 163
    1c5c:	96 e1       	ldi	r25, 0x16	; 22
    1c5e:	68 dd       	rcall	.-1328   	; 0x1730 <vListInitialise>
    1c60:	89 eb       	ldi	r24, 0xB9	; 185
    1c62:	96 e1       	ldi	r25, 0x16	; 22
    1c64:	90 93 af 16 	sts	0x16AF, r25	; 0x8016af <pxDelayedTaskList+0x1>
    1c68:	80 93 ae 16 	sts	0x16AE, r24	; 0x8016ae <pxDelayedTaskList>
    1c6c:	80 eb       	ldi	r24, 0xB0	; 176
    1c6e:	96 e1       	ldi	r25, 0x16	; 22
    1c70:	90 93 ad 16 	sts	0x16AD, r25	; 0x8016ad <pxOverflowDelayedTaskList+0x1>
    1c74:	80 93 ac 16 	sts	0x16AC, r24	; 0x8016ac <pxOverflowDelayedTaskList>
    1c78:	cf 91       	pop	r28
    1c7a:	08 95       	ret

00001c7c <prvAddCurrentTaskToDelayedList>:
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
    1c80:	ec 01       	movw	r28, r24
    1c82:	e0 91 cb 16 	lds	r30, 0x16CB	; 0x8016cb <pxCurrentTCB>
    1c86:	f0 91 cc 16 	lds	r31, 0x16CC	; 0x8016cc <pxCurrentTCB+0x1>
    1c8a:	93 83       	std	Z+3, r25	; 0x03
    1c8c:	82 83       	std	Z+2, r24	; 0x02
    1c8e:	80 91 a0 16 	lds	r24, 0x16A0	; 0x8016a0 <xTickCount>
    1c92:	90 91 a1 16 	lds	r25, 0x16A1	; 0x8016a1 <xTickCount+0x1>
    1c96:	c8 17       	cp	r28, r24
    1c98:	d9 07       	cpc	r29, r25
    1c9a:	60 f4       	brcc	.+24     	; 0x1cb4 <prvAddCurrentTaskToDelayedList+0x38>
    1c9c:	60 91 cb 16 	lds	r22, 0x16CB	; 0x8016cb <pxCurrentTCB>
    1ca0:	70 91 cc 16 	lds	r23, 0x16CC	; 0x8016cc <pxCurrentTCB+0x1>
    1ca4:	80 91 ac 16 	lds	r24, 0x16AC	; 0x8016ac <pxOverflowDelayedTaskList>
    1ca8:	90 91 ad 16 	lds	r25, 0x16AD	; 0x8016ad <pxOverflowDelayedTaskList+0x1>
    1cac:	6e 5f       	subi	r22, 0xFE	; 254
    1cae:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb0:	78 dd       	rcall	.-1296   	; 0x17a2 <vListInsert>
    1cb2:	16 c0       	rjmp	.+44     	; 0x1ce0 <prvAddCurrentTaskToDelayedList+0x64>
    1cb4:	60 91 cb 16 	lds	r22, 0x16CB	; 0x8016cb <pxCurrentTCB>
    1cb8:	70 91 cc 16 	lds	r23, 0x16CC	; 0x8016cc <pxCurrentTCB+0x1>
    1cbc:	80 91 ae 16 	lds	r24, 0x16AE	; 0x8016ae <pxDelayedTaskList>
    1cc0:	90 91 af 16 	lds	r25, 0x16AF	; 0x8016af <pxDelayedTaskList+0x1>
    1cc4:	6e 5f       	subi	r22, 0xFE	; 254
    1cc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc8:	6c dd       	rcall	.-1320   	; 0x17a2 <vListInsert>
    1cca:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <xNextTaskUnblockTime>
    1cce:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <xNextTaskUnblockTime+0x1>
    1cd2:	c8 17       	cp	r28, r24
    1cd4:	d9 07       	cpc	r29, r25
    1cd6:	20 f4       	brcc	.+8      	; 0x1ce0 <prvAddCurrentTaskToDelayedList+0x64>
    1cd8:	d0 93 0c 02 	sts	0x020C, r29	; 0x80020c <xNextTaskUnblockTime+0x1>
    1cdc:	c0 93 0b 02 	sts	0x020B, r28	; 0x80020b <xNextTaskUnblockTime>
    1ce0:	df 91       	pop	r29
    1ce2:	cf 91       	pop	r28
    1ce4:	08 95       	ret

00001ce6 <xTaskGenericCreate>:
    1ce6:	2f 92       	push	r2
    1ce8:	3f 92       	push	r3
    1cea:	4f 92       	push	r4
    1cec:	5f 92       	push	r5
    1cee:	7f 92       	push	r7
    1cf0:	8f 92       	push	r8
    1cf2:	9f 92       	push	r9
    1cf4:	af 92       	push	r10
    1cf6:	bf 92       	push	r11
    1cf8:	cf 92       	push	r12
    1cfa:	df 92       	push	r13
    1cfc:	ef 92       	push	r14
    1cfe:	ff 92       	push	r15
    1d00:	0f 93       	push	r16
    1d02:	1f 93       	push	r17
    1d04:	cf 93       	push	r28
    1d06:	df 93       	push	r29
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <xTaskGenericCreate+0x24>
    1d0a:	1f 92       	push	r1
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	9a 83       	std	Y+2, r25	; 0x02
    1d12:	89 83       	std	Y+1, r24	; 0x01
    1d14:	4b 01       	movw	r8, r22
    1d16:	5c 83       	std	Y+4, r21	; 0x04
    1d18:	4b 83       	std	Y+3, r20	; 0x03
    1d1a:	19 01       	movw	r2, r18
    1d1c:	70 2e       	mov	r7, r16
    1d1e:	b6 01       	movw	r22, r12
    1d20:	25 01       	movw	r4, r10
    1d22:	ca 01       	movw	r24, r20
    1d24:	35 df       	rcall	.-406    	; 0x1b90 <prvAllocateTCBAndStack>
    1d26:	5c 01       	movw	r10, r24
    1d28:	00 97       	sbiw	r24, 0x00	; 0
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <xTaskGenericCreate+0x48>
    1d2c:	6c c0       	rjmp	.+216    	; 0x1e06 <xTaskGenericCreate+0x120>
    1d2e:	fc 01       	movw	r30, r24
    1d30:	c7 88       	ldd	r12, Z+23	; 0x17
    1d32:	d0 8c       	ldd	r13, Z+24	; 0x18
    1d34:	8b 81       	ldd	r24, Y+3	; 0x03
    1d36:	9c 81       	ldd	r25, Y+4	; 0x04
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	c8 0e       	add	r12, r24
    1d3c:	d9 1e       	adc	r13, r25
    1d3e:	0b 81       	ldd	r16, Y+3	; 0x03
    1d40:	1c 81       	ldd	r17, Y+4	; 0x04
    1d42:	92 01       	movw	r18, r4
    1d44:	47 2d       	mov	r20, r7
    1d46:	b4 01       	movw	r22, r8
    1d48:	c5 01       	movw	r24, r10
    1d4a:	4c df       	rcall	.-360    	; 0x1be4 <prvInitialiseTCBVariables>
    1d4c:	a1 01       	movw	r20, r2
    1d4e:	69 81       	ldd	r22, Y+1	; 0x01
    1d50:	7a 81       	ldd	r23, Y+2	; 0x02
    1d52:	c6 01       	movw	r24, r12
    1d54:	8b dd       	rcall	.-1258   	; 0x186c <pxPortInitialiseStack>
    1d56:	f5 01       	movw	r30, r10
    1d58:	91 83       	std	Z+1, r25	; 0x01
    1d5a:	80 83       	st	Z, r24
    1d5c:	e1 14       	cp	r14, r1
    1d5e:	f1 04       	cpc	r15, r1
    1d60:	19 f0       	breq	.+6      	; 0x1d68 <xTaskGenericCreate+0x82>
    1d62:	f7 01       	movw	r30, r14
    1d64:	b1 82       	std	Z+1, r11	; 0x01
    1d66:	a0 82       	st	Z, r10
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	f8 94       	cli
    1d6c:	0f 92       	push	r0
    1d6e:	80 91 a2 16 	lds	r24, 0x16A2	; 0x8016a2 <uxCurrentNumberOfTasks>
    1d72:	8f 5f       	subi	r24, 0xFF	; 255
    1d74:	80 93 a2 16 	sts	0x16A2, r24	; 0x8016a2 <uxCurrentNumberOfTasks>
    1d78:	80 91 cb 16 	lds	r24, 0x16CB	; 0x8016cb <pxCurrentTCB>
    1d7c:	90 91 cc 16 	lds	r25, 0x16CC	; 0x8016cc <pxCurrentTCB+0x1>
    1d80:	89 2b       	or	r24, r25
    1d82:	51 f4       	brne	.+20     	; 0x1d98 <xTaskGenericCreate+0xb2>
    1d84:	b0 92 cc 16 	sts	0x16CC, r11	; 0x8016cc <pxCurrentTCB+0x1>
    1d88:	a0 92 cb 16 	sts	0x16CB, r10	; 0x8016cb <pxCurrentTCB>
    1d8c:	80 91 a2 16 	lds	r24, 0x16A2	; 0x8016a2 <uxCurrentNumberOfTasks>
    1d90:	81 30       	cpi	r24, 0x01	; 1
    1d92:	89 f4       	brne	.+34     	; 0x1db6 <xTaskGenericCreate+0xd0>
    1d94:	48 df       	rcall	.-368    	; 0x1c26 <prvInitialiseTaskLists>
    1d96:	0f c0       	rjmp	.+30     	; 0x1db6 <xTaskGenericCreate+0xd0>
    1d98:	80 91 9d 16 	lds	r24, 0x169D	; 0x80169d <xSchedulerRunning>
    1d9c:	81 11       	cpse	r24, r1
    1d9e:	0b c0       	rjmp	.+22     	; 0x1db6 <xTaskGenericCreate+0xd0>
    1da0:	e0 91 cb 16 	lds	r30, 0x16CB	; 0x8016cb <pxCurrentTCB>
    1da4:	f0 91 cc 16 	lds	r31, 0x16CC	; 0x8016cc <pxCurrentTCB+0x1>
    1da8:	86 89       	ldd	r24, Z+22	; 0x16
    1daa:	78 16       	cp	r7, r24
    1dac:	20 f0       	brcs	.+8      	; 0x1db6 <xTaskGenericCreate+0xd0>
    1dae:	b0 92 cc 16 	sts	0x16CC, r11	; 0x8016cc <pxCurrentTCB+0x1>
    1db2:	a0 92 cb 16 	sts	0x16CB, r10	; 0x8016cb <pxCurrentTCB>
    1db6:	f5 01       	movw	r30, r10
    1db8:	86 89       	ldd	r24, Z+22	; 0x16
    1dba:	90 91 9f 16 	lds	r25, 0x169F	; 0x80169f <uxTopUsedPriority>
    1dbe:	98 17       	cp	r25, r24
    1dc0:	10 f4       	brcc	.+4      	; 0x1dc6 <xTaskGenericCreate+0xe0>
    1dc2:	80 93 9f 16 	sts	0x169F, r24	; 0x80169f <uxTopUsedPriority>
    1dc6:	90 91 98 16 	lds	r25, 0x1698	; 0x801698 <uxTCBNumber>
    1dca:	9f 5f       	subi	r25, 0xFF	; 255
    1dcc:	90 93 98 16 	sts	0x1698, r25	; 0x801698 <uxTCBNumber>
    1dd0:	90 91 9e 16 	lds	r25, 0x169E	; 0x80169e <uxTopReadyPriority>
    1dd4:	98 17       	cp	r25, r24
    1dd6:	10 f4       	brcc	.+4      	; 0x1ddc <xTaskGenericCreate+0xf6>
    1dd8:	80 93 9e 16 	sts	0x169E, r24	; 0x80169e <uxTopReadyPriority>
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	b5 01       	movw	r22, r10
    1de0:	6e 5f       	subi	r22, 0xFE	; 254
    1de2:	7f 4f       	sbci	r23, 0xFF	; 255
    1de4:	9c 01       	movw	r18, r24
    1de6:	22 0f       	add	r18, r18
    1de8:	33 1f       	adc	r19, r19
    1dea:	22 0f       	add	r18, r18
    1dec:	33 1f       	adc	r19, r19
    1dee:	22 0f       	add	r18, r18
    1df0:	33 1f       	adc	r19, r19
    1df2:	82 0f       	add	r24, r18
    1df4:	93 1f       	adc	r25, r19
    1df6:	8e 53       	subi	r24, 0x3E	; 62
    1df8:	99 4e       	sbci	r25, 0xE9	; 233
    1dfa:	ac dc       	rcall	.-1704   	; 0x1754 <vListInsertEnd>
    1dfc:	0f 90       	pop	r0
    1dfe:	0f be       	out	0x3f, r0	; 63
    1e00:	f1 e0       	ldi	r31, 0x01	; 1
    1e02:	f9 83       	std	Y+1, r31	; 0x01
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <xTaskGenericCreate+0x124>
    1e06:	8f ef       	ldi	r24, 0xFF	; 255
    1e08:	89 83       	std	Y+1, r24	; 0x01
    1e0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e0c:	e1 30       	cpi	r30, 0x01	; 1
    1e0e:	61 f4       	brne	.+24     	; 0x1e28 <xTaskGenericCreate+0x142>
    1e10:	80 91 9d 16 	lds	r24, 0x169D	; 0x80169d <xSchedulerRunning>
    1e14:	88 23       	and	r24, r24
    1e16:	41 f0       	breq	.+16     	; 0x1e28 <xTaskGenericCreate+0x142>
    1e18:	e0 91 cb 16 	lds	r30, 0x16CB	; 0x8016cb <pxCurrentTCB>
    1e1c:	f0 91 cc 16 	lds	r31, 0x16CC	; 0x8016cc <pxCurrentTCB+0x1>
    1e20:	86 89       	ldd	r24, Z+22	; 0x16
    1e22:	87 15       	cp	r24, r7
    1e24:	08 f4       	brcc	.+2      	; 0x1e28 <xTaskGenericCreate+0x142>
    1e26:	c6 dd       	rcall	.-1140   	; 0x19b4 <vPortYield>
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	df 91       	pop	r29
    1e34:	cf 91       	pop	r28
    1e36:	1f 91       	pop	r17
    1e38:	0f 91       	pop	r16
    1e3a:	ff 90       	pop	r15
    1e3c:	ef 90       	pop	r14
    1e3e:	df 90       	pop	r13
    1e40:	cf 90       	pop	r12
    1e42:	bf 90       	pop	r11
    1e44:	af 90       	pop	r10
    1e46:	9f 90       	pop	r9
    1e48:	8f 90       	pop	r8
    1e4a:	7f 90       	pop	r7
    1e4c:	5f 90       	pop	r5
    1e4e:	4f 90       	pop	r4
    1e50:	3f 90       	pop	r3
    1e52:	2f 90       	pop	r2
    1e54:	08 95       	ret

00001e56 <vTaskStartScheduler>:
    1e56:	af 92       	push	r10
    1e58:	bf 92       	push	r11
    1e5a:	cf 92       	push	r12
    1e5c:	df 92       	push	r13
    1e5e:	ef 92       	push	r14
    1e60:	ff 92       	push	r15
    1e62:	0f 93       	push	r16
    1e64:	a1 2c       	mov	r10, r1
    1e66:	b1 2c       	mov	r11, r1
    1e68:	c1 2c       	mov	r12, r1
    1e6a:	d1 2c       	mov	r13, r1
    1e6c:	e1 2c       	mov	r14, r1
    1e6e:	f1 2c       	mov	r15, r1
    1e70:	00 e0       	ldi	r16, 0x00	; 0
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	45 e5       	ldi	r20, 0x55	; 85
    1e78:	50 e0       	ldi	r21, 0x00	; 0
    1e7a:	6d e6       	ldi	r22, 0x6D	; 109
    1e7c:	72 e0       	ldi	r23, 0x02	; 2
    1e7e:	82 ec       	ldi	r24, 0xC2	; 194
    1e80:	9d e0       	ldi	r25, 0x0D	; 13
    1e82:	31 df       	rcall	.-414    	; 0x1ce6 <xTaskGenericCreate>
    1e84:	81 30       	cpi	r24, 0x01	; 1
    1e86:	41 f4       	brne	.+16     	; 0x1e98 <vTaskStartScheduler+0x42>
    1e88:	f8 94       	cli
    1e8a:	80 93 9d 16 	sts	0x169D, r24	; 0x80169d <xSchedulerRunning>
    1e8e:	10 92 a1 16 	sts	0x16A1, r1	; 0x8016a1 <xTickCount+0x1>
    1e92:	10 92 a0 16 	sts	0x16A0, r1	; 0x8016a0 <xTickCount>
    1e96:	5c dd       	rcall	.-1352   	; 0x1950 <xPortStartScheduler>
    1e98:	0f 91       	pop	r16
    1e9a:	ff 90       	pop	r15
    1e9c:	ef 90       	pop	r14
    1e9e:	df 90       	pop	r13
    1ea0:	cf 90       	pop	r12
    1ea2:	bf 90       	pop	r11
    1ea4:	af 90       	pop	r10
    1ea6:	08 95       	ret

00001ea8 <vTaskSuspendAll>:
    1ea8:	80 91 9c 16 	lds	r24, 0x169C	; 0x80169c <uxSchedulerSuspended>
    1eac:	8f 5f       	subi	r24, 0xFF	; 255
    1eae:	80 93 9c 16 	sts	0x169C, r24	; 0x80169c <uxSchedulerSuspended>
    1eb2:	08 95       	ret

00001eb4 <vTaskIncrementTick>:
    1eb4:	0f 93       	push	r16
    1eb6:	1f 93       	push	r17
    1eb8:	cf 93       	push	r28
    1eba:	df 93       	push	r29
    1ebc:	80 91 9c 16 	lds	r24, 0x169C	; 0x80169c <uxSchedulerSuspended>
    1ec0:	81 11       	cpse	r24, r1
    1ec2:	95 c0       	rjmp	.+298    	; 0x1fee <vTaskIncrementTick+0x13a>
    1ec4:	80 91 a0 16 	lds	r24, 0x16A0	; 0x8016a0 <xTickCount>
    1ec8:	90 91 a1 16 	lds	r25, 0x16A1	; 0x8016a1 <xTickCount+0x1>
    1ecc:	01 96       	adiw	r24, 0x01	; 1
    1ece:	90 93 a1 16 	sts	0x16A1, r25	; 0x8016a1 <xTickCount+0x1>
    1ed2:	80 93 a0 16 	sts	0x16A0, r24	; 0x8016a0 <xTickCount>
    1ed6:	80 91 a0 16 	lds	r24, 0x16A0	; 0x8016a0 <xTickCount>
    1eda:	90 91 a1 16 	lds	r25, 0x16A1	; 0x8016a1 <xTickCount+0x1>
    1ede:	89 2b       	or	r24, r25
    1ee0:	99 f5       	brne	.+102    	; 0x1f48 <vTaskIncrementTick+0x94>
    1ee2:	80 91 ae 16 	lds	r24, 0x16AE	; 0x8016ae <pxDelayedTaskList>
    1ee6:	90 91 af 16 	lds	r25, 0x16AF	; 0x8016af <pxDelayedTaskList+0x1>
    1eea:	20 91 ac 16 	lds	r18, 0x16AC	; 0x8016ac <pxOverflowDelayedTaskList>
    1eee:	30 91 ad 16 	lds	r19, 0x16AD	; 0x8016ad <pxOverflowDelayedTaskList+0x1>
    1ef2:	30 93 af 16 	sts	0x16AF, r19	; 0x8016af <pxDelayedTaskList+0x1>
    1ef6:	20 93 ae 16 	sts	0x16AE, r18	; 0x8016ae <pxDelayedTaskList>
    1efa:	90 93 ad 16 	sts	0x16AD, r25	; 0x8016ad <pxOverflowDelayedTaskList+0x1>
    1efe:	80 93 ac 16 	sts	0x16AC, r24	; 0x8016ac <pxOverflowDelayedTaskList>
    1f02:	80 91 99 16 	lds	r24, 0x1699	; 0x801699 <xNumOfOverflows>
    1f06:	8f 5f       	subi	r24, 0xFF	; 255
    1f08:	80 93 99 16 	sts	0x1699, r24	; 0x801699 <xNumOfOverflows>
    1f0c:	e0 91 ae 16 	lds	r30, 0x16AE	; 0x8016ae <pxDelayedTaskList>
    1f10:	f0 91 af 16 	lds	r31, 0x16AF	; 0x8016af <pxDelayedTaskList+0x1>
    1f14:	80 81       	ld	r24, Z
    1f16:	81 11       	cpse	r24, r1
    1f18:	07 c0       	rjmp	.+14     	; 0x1f28 <vTaskIncrementTick+0x74>
    1f1a:	8f ef       	ldi	r24, 0xFF	; 255
    1f1c:	9f ef       	ldi	r25, 0xFF	; 255
    1f1e:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <xNextTaskUnblockTime+0x1>
    1f22:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <xNextTaskUnblockTime>
    1f26:	10 c0       	rjmp	.+32     	; 0x1f48 <vTaskIncrementTick+0x94>
    1f28:	e0 91 ae 16 	lds	r30, 0x16AE	; 0x8016ae <pxDelayedTaskList>
    1f2c:	f0 91 af 16 	lds	r31, 0x16AF	; 0x8016af <pxDelayedTaskList+0x1>
    1f30:	05 80       	ldd	r0, Z+5	; 0x05
    1f32:	f6 81       	ldd	r31, Z+6	; 0x06
    1f34:	e0 2d       	mov	r30, r0
    1f36:	06 80       	ldd	r0, Z+6	; 0x06
    1f38:	f7 81       	ldd	r31, Z+7	; 0x07
    1f3a:	e0 2d       	mov	r30, r0
    1f3c:	82 81       	ldd	r24, Z+2	; 0x02
    1f3e:	93 81       	ldd	r25, Z+3	; 0x03
    1f40:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <xNextTaskUnblockTime+0x1>
    1f44:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <xNextTaskUnblockTime>
    1f48:	20 91 a0 16 	lds	r18, 0x16A0	; 0x8016a0 <xTickCount>
    1f4c:	30 91 a1 16 	lds	r19, 0x16A1	; 0x8016a1 <xTickCount+0x1>
    1f50:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <xNextTaskUnblockTime>
    1f54:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <xNextTaskUnblockTime+0x1>
    1f58:	28 17       	cp	r18, r24
    1f5a:	39 07       	cpc	r19, r25
    1f5c:	08 f4       	brcc	.+2      	; 0x1f60 <vTaskIncrementTick+0xac>
    1f5e:	4c c0       	rjmp	.+152    	; 0x1ff8 <vTaskIncrementTick+0x144>
    1f60:	e0 91 ae 16 	lds	r30, 0x16AE	; 0x8016ae <pxDelayedTaskList>
    1f64:	f0 91 af 16 	lds	r31, 0x16AF	; 0x8016af <pxDelayedTaskList+0x1>
    1f68:	80 81       	ld	r24, Z
    1f6a:	81 11       	cpse	r24, r1
    1f6c:	07 c0       	rjmp	.+14     	; 0x1f7c <vTaskIncrementTick+0xc8>
    1f6e:	8f ef       	ldi	r24, 0xFF	; 255
    1f70:	9f ef       	ldi	r25, 0xFF	; 255
    1f72:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <xNextTaskUnblockTime+0x1>
    1f76:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <xNextTaskUnblockTime>
    1f7a:	3e c0       	rjmp	.+124    	; 0x1ff8 <vTaskIncrementTick+0x144>
    1f7c:	e0 91 ae 16 	lds	r30, 0x16AE	; 0x8016ae <pxDelayedTaskList>
    1f80:	f0 91 af 16 	lds	r31, 0x16AF	; 0x8016af <pxDelayedTaskList+0x1>
    1f84:	05 80       	ldd	r0, Z+5	; 0x05
    1f86:	f6 81       	ldd	r31, Z+6	; 0x06
    1f88:	e0 2d       	mov	r30, r0
    1f8a:	c6 81       	ldd	r28, Z+6	; 0x06
    1f8c:	d7 81       	ldd	r29, Z+7	; 0x07
    1f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f90:	9b 81       	ldd	r25, Y+3	; 0x03
    1f92:	20 91 a0 16 	lds	r18, 0x16A0	; 0x8016a0 <xTickCount>
    1f96:	30 91 a1 16 	lds	r19, 0x16A1	; 0x8016a1 <xTickCount+0x1>
    1f9a:	28 17       	cp	r18, r24
    1f9c:	39 07       	cpc	r19, r25
    1f9e:	28 f4       	brcc	.+10     	; 0x1faa <vTaskIncrementTick+0xf6>
    1fa0:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <xNextTaskUnblockTime+0x1>
    1fa4:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <xNextTaskUnblockTime>
    1fa8:	27 c0       	rjmp	.+78     	; 0x1ff8 <vTaskIncrementTick+0x144>
    1faa:	8e 01       	movw	r16, r28
    1fac:	0e 5f       	subi	r16, 0xFE	; 254
    1fae:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb0:	c8 01       	movw	r24, r16
    1fb2:	28 dc       	rcall	.-1968   	; 0x1804 <vListRemove>
    1fb4:	8c 89       	ldd	r24, Y+20	; 0x14
    1fb6:	9d 89       	ldd	r25, Y+21	; 0x15
    1fb8:	89 2b       	or	r24, r25
    1fba:	19 f0       	breq	.+6      	; 0x1fc2 <vTaskIncrementTick+0x10e>
    1fbc:	ce 01       	movw	r24, r28
    1fbe:	0c 96       	adiw	r24, 0x0c	; 12
    1fc0:	21 dc       	rcall	.-1982   	; 0x1804 <vListRemove>
    1fc2:	8e 89       	ldd	r24, Y+22	; 0x16
    1fc4:	90 91 9e 16 	lds	r25, 0x169E	; 0x80169e <uxTopReadyPriority>
    1fc8:	98 17       	cp	r25, r24
    1fca:	10 f4       	brcc	.+4      	; 0x1fd0 <vTaskIncrementTick+0x11c>
    1fcc:	80 93 9e 16 	sts	0x169E, r24	; 0x80169e <uxTopReadyPriority>
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	9c 01       	movw	r18, r24
    1fd4:	22 0f       	add	r18, r18
    1fd6:	33 1f       	adc	r19, r19
    1fd8:	22 0f       	add	r18, r18
    1fda:	33 1f       	adc	r19, r19
    1fdc:	22 0f       	add	r18, r18
    1fde:	33 1f       	adc	r19, r19
    1fe0:	82 0f       	add	r24, r18
    1fe2:	93 1f       	adc	r25, r19
    1fe4:	b8 01       	movw	r22, r16
    1fe6:	8e 53       	subi	r24, 0x3E	; 62
    1fe8:	99 4e       	sbci	r25, 0xE9	; 233
    1fea:	b4 db       	rcall	.-2200   	; 0x1754 <vListInsertEnd>
    1fec:	b9 cf       	rjmp	.-142    	; 0x1f60 <vTaskIncrementTick+0xac>
    1fee:	80 91 9b 16 	lds	r24, 0x169B	; 0x80169b <uxMissedTicks>
    1ff2:	8f 5f       	subi	r24, 0xFF	; 255
    1ff4:	80 93 9b 16 	sts	0x169B, r24	; 0x80169b <uxMissedTicks>
    1ff8:	df 91       	pop	r29
    1ffa:	cf 91       	pop	r28
    1ffc:	1f 91       	pop	r17
    1ffe:	0f 91       	pop	r16
    2000:	08 95       	ret

00002002 <xTaskResumeAll>:
    2002:	ff 92       	push	r15
    2004:	0f 93       	push	r16
    2006:	1f 93       	push	r17
    2008:	cf 93       	push	r28
    200a:	df 93       	push	r29
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	f8 94       	cli
    2010:	0f 92       	push	r0
    2012:	80 91 9c 16 	lds	r24, 0x169C	; 0x80169c <uxSchedulerSuspended>
    2016:	81 50       	subi	r24, 0x01	; 1
    2018:	80 93 9c 16 	sts	0x169C, r24	; 0x80169c <uxSchedulerSuspended>
    201c:	80 91 9c 16 	lds	r24, 0x169C	; 0x80169c <uxSchedulerSuspended>
    2020:	81 11       	cpse	r24, r1
    2022:	55 c0       	rjmp	.+170    	; 0x20ce <xTaskResumeAll+0xcc>
    2024:	80 91 a2 16 	lds	r24, 0x16A2	; 0x8016a2 <uxCurrentNumberOfTasks>
    2028:	81 11       	cpse	r24, r1
    202a:	2f c0       	rjmp	.+94     	; 0x208a <xTaskResumeAll+0x88>
    202c:	53 c0       	rjmp	.+166    	; 0x20d4 <xTaskResumeAll+0xd2>
    202e:	e0 91 a8 16 	lds	r30, 0x16A8	; 0x8016a8 <xPendingReadyList+0x5>
    2032:	f0 91 a9 16 	lds	r31, 0x16A9	; 0x8016a9 <xPendingReadyList+0x6>
    2036:	c6 81       	ldd	r28, Z+6	; 0x06
    2038:	d7 81       	ldd	r29, Z+7	; 0x07
    203a:	ce 01       	movw	r24, r28
    203c:	0c 96       	adiw	r24, 0x0c	; 12
    203e:	e2 db       	rcall	.-2108   	; 0x1804 <vListRemove>
    2040:	8e 01       	movw	r16, r28
    2042:	0e 5f       	subi	r16, 0xFE	; 254
    2044:	1f 4f       	sbci	r17, 0xFF	; 255
    2046:	c8 01       	movw	r24, r16
    2048:	dd db       	rcall	.-2118   	; 0x1804 <vListRemove>
    204a:	8e 89       	ldd	r24, Y+22	; 0x16
    204c:	90 91 9e 16 	lds	r25, 0x169E	; 0x80169e <uxTopReadyPriority>
    2050:	98 17       	cp	r25, r24
    2052:	10 f4       	brcc	.+4      	; 0x2058 <xTaskResumeAll+0x56>
    2054:	80 93 9e 16 	sts	0x169E, r24	; 0x80169e <uxTopReadyPriority>
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	9c 01       	movw	r18, r24
    205c:	22 0f       	add	r18, r18
    205e:	33 1f       	adc	r19, r19
    2060:	22 0f       	add	r18, r18
    2062:	33 1f       	adc	r19, r19
    2064:	22 0f       	add	r18, r18
    2066:	33 1f       	adc	r19, r19
    2068:	82 0f       	add	r24, r18
    206a:	93 1f       	adc	r25, r19
    206c:	b8 01       	movw	r22, r16
    206e:	8e 53       	subi	r24, 0x3E	; 62
    2070:	99 4e       	sbci	r25, 0xE9	; 233
    2072:	70 db       	rcall	.-2336   	; 0x1754 <vListInsertEnd>
    2074:	9e 89       	ldd	r25, Y+22	; 0x16
    2076:	e0 91 cb 16 	lds	r30, 0x16CB	; 0x8016cb <pxCurrentTCB>
    207a:	f0 91 cc 16 	lds	r31, 0x16CC	; 0x8016cc <pxCurrentTCB+0x1>
    207e:	86 89       	ldd	r24, Z+22	; 0x16
    2080:	98 17       	cp	r25, r24
    2082:	20 f0       	brcs	.+8      	; 0x208c <xTaskResumeAll+0x8a>
    2084:	ff 24       	eor	r15, r15
    2086:	f3 94       	inc	r15
    2088:	01 c0       	rjmp	.+2      	; 0x208c <xTaskResumeAll+0x8a>
    208a:	f1 2c       	mov	r15, r1
    208c:	80 91 a3 16 	lds	r24, 0x16A3	; 0x8016a3 <xPendingReadyList>
    2090:	81 11       	cpse	r24, r1
    2092:	cd cf       	rjmp	.-102    	; 0x202e <xTaskResumeAll+0x2c>
    2094:	80 91 9b 16 	lds	r24, 0x169B	; 0x80169b <uxMissedTicks>
    2098:	81 11       	cpse	r24, r1
    209a:	07 c0       	rjmp	.+14     	; 0x20aa <xTaskResumeAll+0xa8>
    209c:	0c c0       	rjmp	.+24     	; 0x20b6 <xTaskResumeAll+0xb4>
    209e:	0a df       	rcall	.-492    	; 0x1eb4 <vTaskIncrementTick>
    20a0:	80 91 9b 16 	lds	r24, 0x169B	; 0x80169b <uxMissedTicks>
    20a4:	81 50       	subi	r24, 0x01	; 1
    20a6:	80 93 9b 16 	sts	0x169B, r24	; 0x80169b <uxMissedTicks>
    20aa:	80 91 9b 16 	lds	r24, 0x169B	; 0x80169b <uxMissedTicks>
    20ae:	81 11       	cpse	r24, r1
    20b0:	f6 cf       	rjmp	.-20     	; 0x209e <xTaskResumeAll+0x9c>
    20b2:	ff 24       	eor	r15, r15
    20b4:	f3 94       	inc	r15
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	f8 16       	cp	r15, r24
    20ba:	21 f0       	breq	.+8      	; 0x20c4 <xTaskResumeAll+0xc2>
    20bc:	80 91 9a 16 	lds	r24, 0x169A	; 0x80169a <xMissedYield>
    20c0:	81 30       	cpi	r24, 0x01	; 1
    20c2:	39 f4       	brne	.+14     	; 0x20d2 <xTaskResumeAll+0xd0>
    20c4:	10 92 9a 16 	sts	0x169A, r1	; 0x80169a <xMissedYield>
    20c8:	75 dc       	rcall	.-1814   	; 0x19b4 <vPortYield>
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	03 c0       	rjmp	.+6      	; 0x20d4 <xTaskResumeAll+0xd2>
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	01 c0       	rjmp	.+2      	; 0x20d4 <xTaskResumeAll+0xd2>
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	0f 90       	pop	r0
    20d6:	0f be       	out	0x3f, r0	; 63
    20d8:	df 91       	pop	r29
    20da:	cf 91       	pop	r28
    20dc:	1f 91       	pop	r17
    20de:	0f 91       	pop	r16
    20e0:	ff 90       	pop	r15
    20e2:	08 95       	ret

000020e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    20e4:	cf 93       	push	r28
    20e6:	df 93       	push	r29
    20e8:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    20ea:	89 2b       	or	r24, r25
    20ec:	89 f0       	breq	.+34     	; 0x2110 <vTaskDelay+0x2c>
		{
			vTaskSuspendAll();
    20ee:	dc de       	rcall	.-584    	; 0x1ea8 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    20f0:	80 91 a0 16 	lds	r24, 0x16A0	; 0x8016a0 <xTickCount>
    20f4:	90 91 a1 16 	lds	r25, 0x16A1	; 0x8016a1 <xTickCount+0x1>
    20f8:	c8 0f       	add	r28, r24
    20fa:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    20fc:	80 91 cb 16 	lds	r24, 0x16CB	; 0x8016cb <pxCurrentTCB>
    2100:	90 91 cc 16 	lds	r25, 0x16CC	; 0x8016cc <pxCurrentTCB+0x1>
    2104:	02 96       	adiw	r24, 0x02	; 2
    2106:	7e db       	rcall	.-2308   	; 0x1804 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2108:	ce 01       	movw	r24, r28
    210a:	b8 dd       	rcall	.-1168   	; 0x1c7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    210c:	7a df       	rcall	.-268    	; 0x2002 <xTaskResumeAll>
    210e:	01 c0       	rjmp	.+2      	; 0x2112 <vTaskDelay+0x2e>
#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    2110:	80 e0       	ldi	r24, 0x00	; 0
			xAlreadyYielded = xTaskResumeAll();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2112:	81 11       	cpse	r24, r1
    2114:	01 c0       	rjmp	.+2      	; 0x2118 <vTaskDelay+0x34>
		{
			portYIELD_WITHIN_API();
    2116:	4e dc       	rcall	.-1892   	; 0x19b4 <vPortYield>
    2118:	df 91       	pop	r29
		}
	}
    211a:	cf 91       	pop	r28
    211c:	08 95       	ret

0000211e <vTaskSwitchContext>:
    211e:	80 91 9c 16 	lds	r24, 0x169C	; 0x80169c <uxSchedulerSuspended>
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    2122:	88 23       	and	r24, r24
    2124:	49 f0       	breq	.+18     	; 0x2138 <vTaskSwitchContext+0x1a>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	80 93 9a 16 	sts	0x169A, r24	; 0x80169a <xMissedYield>
    212c:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    212e:	80 91 9e 16 	lds	r24, 0x169E	; 0x80169e <uxTopReadyPriority>
    2132:	81 50       	subi	r24, 0x01	; 1
    2134:	80 93 9e 16 	sts	0x169E, r24	; 0x80169e <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    2138:	80 91 9e 16 	lds	r24, 0x169E	; 0x80169e <uxTopReadyPriority>
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	fc 01       	movw	r30, r24
    2140:	ee 0f       	add	r30, r30
    2142:	ff 1f       	adc	r31, r31
    2144:	ee 0f       	add	r30, r30
    2146:	ff 1f       	adc	r31, r31
    2148:	ee 0f       	add	r30, r30
    214a:	ff 1f       	adc	r31, r31
    214c:	8e 0f       	add	r24, r30
    214e:	9f 1f       	adc	r25, r31
    2150:	fc 01       	movw	r30, r24
    2152:	ee 53       	subi	r30, 0x3E	; 62
    2154:	f9 4e       	sbci	r31, 0xE9	; 233
    2156:	80 81       	ld	r24, Z
    2158:	88 23       	and	r24, r24
    215a:	49 f3       	breq	.-46     	; 0x212e <vTaskSwitchContext+0x10>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    215c:	80 91 9e 16 	lds	r24, 0x169E	; 0x80169e <uxTopReadyPriority>
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	9c 01       	movw	r18, r24
    2164:	22 0f       	add	r18, r18
    2166:	33 1f       	adc	r19, r19
    2168:	22 0f       	add	r18, r18
    216a:	33 1f       	adc	r19, r19
    216c:	22 0f       	add	r18, r18
    216e:	33 1f       	adc	r19, r19
    2170:	28 0f       	add	r18, r24
    2172:	39 1f       	adc	r19, r25
    2174:	d9 01       	movw	r26, r18
    2176:	ae 53       	subi	r26, 0x3E	; 62
    2178:	b9 4e       	sbci	r27, 0xE9	; 233
    217a:	11 96       	adiw	r26, 0x01	; 1
    217c:	ed 91       	ld	r30, X+
    217e:	fc 91       	ld	r31, X
    2180:	12 97       	sbiw	r26, 0x02	; 2
    2182:	02 80       	ldd	r0, Z+2	; 0x02
    2184:	f3 81       	ldd	r31, Z+3	; 0x03
    2186:	e0 2d       	mov	r30, r0
    2188:	12 96       	adiw	r26, 0x02	; 2
    218a:	fc 93       	st	X, r31
    218c:	ee 93       	st	-X, r30
    218e:	11 97       	sbiw	r26, 0x01	; 1
    2190:	2b 53       	subi	r18, 0x3B	; 59
    2192:	39 4e       	sbci	r19, 0xE9	; 233
    2194:	e2 17       	cp	r30, r18
    2196:	f3 07       	cpc	r31, r19
    2198:	29 f4       	brne	.+10     	; 0x21a4 <vTaskSwitchContext+0x86>
    219a:	22 81       	ldd	r18, Z+2	; 0x02
    219c:	33 81       	ldd	r19, Z+3	; 0x03
    219e:	fd 01       	movw	r30, r26
    21a0:	32 83       	std	Z+2, r19	; 0x02
    21a2:	21 83       	std	Z+1, r18	; 0x01
    21a4:	fc 01       	movw	r30, r24
    21a6:	ee 0f       	add	r30, r30
    21a8:	ff 1f       	adc	r31, r31
    21aa:	ee 0f       	add	r30, r30
    21ac:	ff 1f       	adc	r31, r31
    21ae:	ee 0f       	add	r30, r30
    21b0:	ff 1f       	adc	r31, r31
    21b2:	8e 0f       	add	r24, r30
    21b4:	9f 1f       	adc	r25, r31
    21b6:	fc 01       	movw	r30, r24
    21b8:	ee 53       	subi	r30, 0x3E	; 62
    21ba:	f9 4e       	sbci	r31, 0xE9	; 233
    21bc:	01 80       	ldd	r0, Z+1	; 0x01
    21be:	f2 81       	ldd	r31, Z+2	; 0x02
    21c0:	e0 2d       	mov	r30, r0
    21c2:	86 81       	ldd	r24, Z+6	; 0x06
    21c4:	97 81       	ldd	r25, Z+7	; 0x07
    21c6:	90 93 cc 16 	sts	0x16CC, r25	; 0x8016cc <pxCurrentTCB+0x1>
    21ca:	80 93 cb 16 	sts	0x16CB, r24	; 0x8016cb <pxCurrentTCB>
    21ce:	08 95       	ret

000021d0 <__subsf3>:
    21d0:	50 58       	subi	r21, 0x80	; 128

000021d2 <__addsf3>:
    21d2:	bb 27       	eor	r27, r27
    21d4:	aa 27       	eor	r26, r26
    21d6:	0e d0       	rcall	.+28     	; 0x21f4 <__addsf3x>
    21d8:	70 c1       	rjmp	.+736    	; 0x24ba <__fp_round>
    21da:	61 d1       	rcall	.+706    	; 0x249e <__fp_pscA>
    21dc:	30 f0       	brcs	.+12     	; 0x21ea <__addsf3+0x18>
    21de:	66 d1       	rcall	.+716    	; 0x24ac <__fp_pscB>
    21e0:	20 f0       	brcs	.+8      	; 0x21ea <__addsf3+0x18>
    21e2:	31 f4       	brne	.+12     	; 0x21f0 <__addsf3+0x1e>
    21e4:	9f 3f       	cpi	r25, 0xFF	; 255
    21e6:	11 f4       	brne	.+4      	; 0x21ec <__addsf3+0x1a>
    21e8:	1e f4       	brtc	.+6      	; 0x21f0 <__addsf3+0x1e>
    21ea:	56 c1       	rjmp	.+684    	; 0x2498 <__fp_nan>
    21ec:	0e f4       	brtc	.+2      	; 0x21f0 <__addsf3+0x1e>
    21ee:	e0 95       	com	r30
    21f0:	e7 fb       	bst	r30, 7
    21f2:	4c c1       	rjmp	.+664    	; 0x248c <__fp_inf>

000021f4 <__addsf3x>:
    21f4:	e9 2f       	mov	r30, r25
    21f6:	72 d1       	rcall	.+740    	; 0x24dc <__fp_split3>
    21f8:	80 f3       	brcs	.-32     	; 0x21da <__addsf3+0x8>
    21fa:	ba 17       	cp	r27, r26
    21fc:	62 07       	cpc	r22, r18
    21fe:	73 07       	cpc	r23, r19
    2200:	84 07       	cpc	r24, r20
    2202:	95 07       	cpc	r25, r21
    2204:	18 f0       	brcs	.+6      	; 0x220c <__stack+0xd>
    2206:	71 f4       	brne	.+28     	; 0x2224 <__stack+0x25>
    2208:	9e f5       	brtc	.+102    	; 0x2270 <__stack+0x71>
    220a:	8a c1       	rjmp	.+788    	; 0x2520 <__fp_zero>
    220c:	0e f4       	brtc	.+2      	; 0x2210 <__stack+0x11>
    220e:	e0 95       	com	r30
    2210:	0b 2e       	mov	r0, r27
    2212:	ba 2f       	mov	r27, r26
    2214:	a0 2d       	mov	r26, r0
    2216:	0b 01       	movw	r0, r22
    2218:	b9 01       	movw	r22, r18
    221a:	90 01       	movw	r18, r0
    221c:	0c 01       	movw	r0, r24
    221e:	ca 01       	movw	r24, r20
    2220:	a0 01       	movw	r20, r0
    2222:	11 24       	eor	r1, r1
    2224:	ff 27       	eor	r31, r31
    2226:	59 1b       	sub	r21, r25
    2228:	99 f0       	breq	.+38     	; 0x2250 <__stack+0x51>
    222a:	59 3f       	cpi	r21, 0xF9	; 249
    222c:	50 f4       	brcc	.+20     	; 0x2242 <__stack+0x43>
    222e:	50 3e       	cpi	r21, 0xE0	; 224
    2230:	68 f1       	brcs	.+90     	; 0x228c <__stack+0x8d>
    2232:	1a 16       	cp	r1, r26
    2234:	f0 40       	sbci	r31, 0x00	; 0
    2236:	a2 2f       	mov	r26, r18
    2238:	23 2f       	mov	r18, r19
    223a:	34 2f       	mov	r19, r20
    223c:	44 27       	eor	r20, r20
    223e:	58 5f       	subi	r21, 0xF8	; 248
    2240:	f3 cf       	rjmp	.-26     	; 0x2228 <__stack+0x29>
    2242:	46 95       	lsr	r20
    2244:	37 95       	ror	r19
    2246:	27 95       	ror	r18
    2248:	a7 95       	ror	r26
    224a:	f0 40       	sbci	r31, 0x00	; 0
    224c:	53 95       	inc	r21
    224e:	c9 f7       	brne	.-14     	; 0x2242 <__stack+0x43>
    2250:	7e f4       	brtc	.+30     	; 0x2270 <__stack+0x71>
    2252:	1f 16       	cp	r1, r31
    2254:	ba 0b       	sbc	r27, r26
    2256:	62 0b       	sbc	r22, r18
    2258:	73 0b       	sbc	r23, r19
    225a:	84 0b       	sbc	r24, r20
    225c:	ba f0       	brmi	.+46     	; 0x228c <__stack+0x8d>
    225e:	91 50       	subi	r25, 0x01	; 1
    2260:	a1 f0       	breq	.+40     	; 0x228a <__stack+0x8b>
    2262:	ff 0f       	add	r31, r31
    2264:	bb 1f       	adc	r27, r27
    2266:	66 1f       	adc	r22, r22
    2268:	77 1f       	adc	r23, r23
    226a:	88 1f       	adc	r24, r24
    226c:	c2 f7       	brpl	.-16     	; 0x225e <__stack+0x5f>
    226e:	0e c0       	rjmp	.+28     	; 0x228c <__stack+0x8d>
    2270:	ba 0f       	add	r27, r26
    2272:	62 1f       	adc	r22, r18
    2274:	73 1f       	adc	r23, r19
    2276:	84 1f       	adc	r24, r20
    2278:	48 f4       	brcc	.+18     	; 0x228c <__stack+0x8d>
    227a:	87 95       	ror	r24
    227c:	77 95       	ror	r23
    227e:	67 95       	ror	r22
    2280:	b7 95       	ror	r27
    2282:	f7 95       	ror	r31
    2284:	9e 3f       	cpi	r25, 0xFE	; 254
    2286:	08 f0       	brcs	.+2      	; 0x228a <__stack+0x8b>
    2288:	b3 cf       	rjmp	.-154    	; 0x21f0 <__addsf3+0x1e>
    228a:	93 95       	inc	r25
    228c:	88 0f       	add	r24, r24
    228e:	08 f0       	brcs	.+2      	; 0x2292 <__stack+0x93>
    2290:	99 27       	eor	r25, r25
    2292:	ee 0f       	add	r30, r30
    2294:	97 95       	ror	r25
    2296:	87 95       	ror	r24
    2298:	08 95       	ret

0000229a <__cmpsf2>:
    229a:	d4 d0       	rcall	.+424    	; 0x2444 <__fp_cmp>
    229c:	08 f4       	brcc	.+2      	; 0x22a0 <__cmpsf2+0x6>
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	08 95       	ret

000022a2 <__divsf3>:
    22a2:	0c d0       	rcall	.+24     	; 0x22bc <__divsf3x>
    22a4:	0a c1       	rjmp	.+532    	; 0x24ba <__fp_round>
    22a6:	02 d1       	rcall	.+516    	; 0x24ac <__fp_pscB>
    22a8:	40 f0       	brcs	.+16     	; 0x22ba <__divsf3+0x18>
    22aa:	f9 d0       	rcall	.+498    	; 0x249e <__fp_pscA>
    22ac:	30 f0       	brcs	.+12     	; 0x22ba <__divsf3+0x18>
    22ae:	21 f4       	brne	.+8      	; 0x22b8 <__divsf3+0x16>
    22b0:	5f 3f       	cpi	r21, 0xFF	; 255
    22b2:	19 f0       	breq	.+6      	; 0x22ba <__divsf3+0x18>
    22b4:	eb c0       	rjmp	.+470    	; 0x248c <__fp_inf>
    22b6:	51 11       	cpse	r21, r1
    22b8:	34 c1       	rjmp	.+616    	; 0x2522 <__fp_szero>
    22ba:	ee c0       	rjmp	.+476    	; 0x2498 <__fp_nan>

000022bc <__divsf3x>:
    22bc:	0f d1       	rcall	.+542    	; 0x24dc <__fp_split3>
    22be:	98 f3       	brcs	.-26     	; 0x22a6 <__divsf3+0x4>

000022c0 <__divsf3_pse>:
    22c0:	99 23       	and	r25, r25
    22c2:	c9 f3       	breq	.-14     	; 0x22b6 <__divsf3+0x14>
    22c4:	55 23       	and	r21, r21
    22c6:	b1 f3       	breq	.-20     	; 0x22b4 <__divsf3+0x12>
    22c8:	95 1b       	sub	r25, r21
    22ca:	55 0b       	sbc	r21, r21
    22cc:	bb 27       	eor	r27, r27
    22ce:	aa 27       	eor	r26, r26
    22d0:	62 17       	cp	r22, r18
    22d2:	73 07       	cpc	r23, r19
    22d4:	84 07       	cpc	r24, r20
    22d6:	38 f0       	brcs	.+14     	; 0x22e6 <__divsf3_pse+0x26>
    22d8:	9f 5f       	subi	r25, 0xFF	; 255
    22da:	5f 4f       	sbci	r21, 0xFF	; 255
    22dc:	22 0f       	add	r18, r18
    22de:	33 1f       	adc	r19, r19
    22e0:	44 1f       	adc	r20, r20
    22e2:	aa 1f       	adc	r26, r26
    22e4:	a9 f3       	breq	.-22     	; 0x22d0 <__divsf3_pse+0x10>
    22e6:	33 d0       	rcall	.+102    	; 0x234e <__divsf3_pse+0x8e>
    22e8:	0e 2e       	mov	r0, r30
    22ea:	3a f0       	brmi	.+14     	; 0x22fa <__divsf3_pse+0x3a>
    22ec:	e0 e8       	ldi	r30, 0x80	; 128
    22ee:	30 d0       	rcall	.+96     	; 0x2350 <__divsf3_pse+0x90>
    22f0:	91 50       	subi	r25, 0x01	; 1
    22f2:	50 40       	sbci	r21, 0x00	; 0
    22f4:	e6 95       	lsr	r30
    22f6:	00 1c       	adc	r0, r0
    22f8:	ca f7       	brpl	.-14     	; 0x22ec <__divsf3_pse+0x2c>
    22fa:	29 d0       	rcall	.+82     	; 0x234e <__divsf3_pse+0x8e>
    22fc:	fe 2f       	mov	r31, r30
    22fe:	27 d0       	rcall	.+78     	; 0x234e <__divsf3_pse+0x8e>
    2300:	66 0f       	add	r22, r22
    2302:	77 1f       	adc	r23, r23
    2304:	88 1f       	adc	r24, r24
    2306:	bb 1f       	adc	r27, r27
    2308:	26 17       	cp	r18, r22
    230a:	37 07       	cpc	r19, r23
    230c:	48 07       	cpc	r20, r24
    230e:	ab 07       	cpc	r26, r27
    2310:	b0 e8       	ldi	r27, 0x80	; 128
    2312:	09 f0       	breq	.+2      	; 0x2316 <__divsf3_pse+0x56>
    2314:	bb 0b       	sbc	r27, r27
    2316:	80 2d       	mov	r24, r0
    2318:	bf 01       	movw	r22, r30
    231a:	ff 27       	eor	r31, r31
    231c:	93 58       	subi	r25, 0x83	; 131
    231e:	5f 4f       	sbci	r21, 0xFF	; 255
    2320:	2a f0       	brmi	.+10     	; 0x232c <__divsf3_pse+0x6c>
    2322:	9e 3f       	cpi	r25, 0xFE	; 254
    2324:	51 05       	cpc	r21, r1
    2326:	68 f0       	brcs	.+26     	; 0x2342 <__divsf3_pse+0x82>
    2328:	b1 c0       	rjmp	.+354    	; 0x248c <__fp_inf>
    232a:	fb c0       	rjmp	.+502    	; 0x2522 <__fp_szero>
    232c:	5f 3f       	cpi	r21, 0xFF	; 255
    232e:	ec f3       	brlt	.-6      	; 0x232a <__divsf3_pse+0x6a>
    2330:	98 3e       	cpi	r25, 0xE8	; 232
    2332:	dc f3       	brlt	.-10     	; 0x232a <__divsf3_pse+0x6a>
    2334:	86 95       	lsr	r24
    2336:	77 95       	ror	r23
    2338:	67 95       	ror	r22
    233a:	b7 95       	ror	r27
    233c:	f7 95       	ror	r31
    233e:	9f 5f       	subi	r25, 0xFF	; 255
    2340:	c9 f7       	brne	.-14     	; 0x2334 <__divsf3_pse+0x74>
    2342:	88 0f       	add	r24, r24
    2344:	91 1d       	adc	r25, r1
    2346:	96 95       	lsr	r25
    2348:	87 95       	ror	r24
    234a:	97 f9       	bld	r25, 7
    234c:	08 95       	ret
    234e:	e1 e0       	ldi	r30, 0x01	; 1
    2350:	66 0f       	add	r22, r22
    2352:	77 1f       	adc	r23, r23
    2354:	88 1f       	adc	r24, r24
    2356:	bb 1f       	adc	r27, r27
    2358:	62 17       	cp	r22, r18
    235a:	73 07       	cpc	r23, r19
    235c:	84 07       	cpc	r24, r20
    235e:	ba 07       	cpc	r27, r26
    2360:	20 f0       	brcs	.+8      	; 0x236a <__divsf3_pse+0xaa>
    2362:	62 1b       	sub	r22, r18
    2364:	73 0b       	sbc	r23, r19
    2366:	84 0b       	sbc	r24, r20
    2368:	ba 0b       	sbc	r27, r26
    236a:	ee 1f       	adc	r30, r30
    236c:	88 f7       	brcc	.-30     	; 0x2350 <__divsf3_pse+0x90>
    236e:	e0 95       	com	r30
    2370:	08 95       	ret

00002372 <__fixunssfsi>:
    2372:	bc d0       	rcall	.+376    	; 0x24ec <__fp_splitA>
    2374:	88 f0       	brcs	.+34     	; 0x2398 <__fixunssfsi+0x26>
    2376:	9f 57       	subi	r25, 0x7F	; 127
    2378:	90 f0       	brcs	.+36     	; 0x239e <__fixunssfsi+0x2c>
    237a:	b9 2f       	mov	r27, r25
    237c:	99 27       	eor	r25, r25
    237e:	b7 51       	subi	r27, 0x17	; 23
    2380:	a0 f0       	brcs	.+40     	; 0x23aa <__fixunssfsi+0x38>
    2382:	d1 f0       	breq	.+52     	; 0x23b8 <__fixunssfsi+0x46>
    2384:	66 0f       	add	r22, r22
    2386:	77 1f       	adc	r23, r23
    2388:	88 1f       	adc	r24, r24
    238a:	99 1f       	adc	r25, r25
    238c:	1a f0       	brmi	.+6      	; 0x2394 <__fixunssfsi+0x22>
    238e:	ba 95       	dec	r27
    2390:	c9 f7       	brne	.-14     	; 0x2384 <__fixunssfsi+0x12>
    2392:	12 c0       	rjmp	.+36     	; 0x23b8 <__fixunssfsi+0x46>
    2394:	b1 30       	cpi	r27, 0x01	; 1
    2396:	81 f0       	breq	.+32     	; 0x23b8 <__fixunssfsi+0x46>
    2398:	c3 d0       	rcall	.+390    	; 0x2520 <__fp_zero>
    239a:	b1 e0       	ldi	r27, 0x01	; 1
    239c:	08 95       	ret
    239e:	c0 c0       	rjmp	.+384    	; 0x2520 <__fp_zero>
    23a0:	67 2f       	mov	r22, r23
    23a2:	78 2f       	mov	r23, r24
    23a4:	88 27       	eor	r24, r24
    23a6:	b8 5f       	subi	r27, 0xF8	; 248
    23a8:	39 f0       	breq	.+14     	; 0x23b8 <__fixunssfsi+0x46>
    23aa:	b9 3f       	cpi	r27, 0xF9	; 249
    23ac:	cc f3       	brlt	.-14     	; 0x23a0 <__fixunssfsi+0x2e>
    23ae:	86 95       	lsr	r24
    23b0:	77 95       	ror	r23
    23b2:	67 95       	ror	r22
    23b4:	b3 95       	inc	r27
    23b6:	d9 f7       	brne	.-10     	; 0x23ae <__fixunssfsi+0x3c>
    23b8:	3e f4       	brtc	.+14     	; 0x23c8 <__fixunssfsi+0x56>
    23ba:	90 95       	com	r25
    23bc:	80 95       	com	r24
    23be:	70 95       	com	r23
    23c0:	61 95       	neg	r22
    23c2:	7f 4f       	sbci	r23, 0xFF	; 255
    23c4:	8f 4f       	sbci	r24, 0xFF	; 255
    23c6:	9f 4f       	sbci	r25, 0xFF	; 255
    23c8:	08 95       	ret

000023ca <__floatunsisf>:
    23ca:	e8 94       	clt
    23cc:	09 c0       	rjmp	.+18     	; 0x23e0 <__floatsisf+0x12>

000023ce <__floatsisf>:
    23ce:	97 fb       	bst	r25, 7
    23d0:	3e f4       	brtc	.+14     	; 0x23e0 <__floatsisf+0x12>
    23d2:	90 95       	com	r25
    23d4:	80 95       	com	r24
    23d6:	70 95       	com	r23
    23d8:	61 95       	neg	r22
    23da:	7f 4f       	sbci	r23, 0xFF	; 255
    23dc:	8f 4f       	sbci	r24, 0xFF	; 255
    23de:	9f 4f       	sbci	r25, 0xFF	; 255
    23e0:	99 23       	and	r25, r25
    23e2:	a9 f0       	breq	.+42     	; 0x240e <__floatsisf+0x40>
    23e4:	f9 2f       	mov	r31, r25
    23e6:	96 e9       	ldi	r25, 0x96	; 150
    23e8:	bb 27       	eor	r27, r27
    23ea:	93 95       	inc	r25
    23ec:	f6 95       	lsr	r31
    23ee:	87 95       	ror	r24
    23f0:	77 95       	ror	r23
    23f2:	67 95       	ror	r22
    23f4:	b7 95       	ror	r27
    23f6:	f1 11       	cpse	r31, r1
    23f8:	f8 cf       	rjmp	.-16     	; 0x23ea <__floatsisf+0x1c>
    23fa:	fa f4       	brpl	.+62     	; 0x243a <__floatsisf+0x6c>
    23fc:	bb 0f       	add	r27, r27
    23fe:	11 f4       	brne	.+4      	; 0x2404 <__floatsisf+0x36>
    2400:	60 ff       	sbrs	r22, 0
    2402:	1b c0       	rjmp	.+54     	; 0x243a <__floatsisf+0x6c>
    2404:	6f 5f       	subi	r22, 0xFF	; 255
    2406:	7f 4f       	sbci	r23, 0xFF	; 255
    2408:	8f 4f       	sbci	r24, 0xFF	; 255
    240a:	9f 4f       	sbci	r25, 0xFF	; 255
    240c:	16 c0       	rjmp	.+44     	; 0x243a <__floatsisf+0x6c>
    240e:	88 23       	and	r24, r24
    2410:	11 f0       	breq	.+4      	; 0x2416 <__floatsisf+0x48>
    2412:	96 e9       	ldi	r25, 0x96	; 150
    2414:	11 c0       	rjmp	.+34     	; 0x2438 <__floatsisf+0x6a>
    2416:	77 23       	and	r23, r23
    2418:	21 f0       	breq	.+8      	; 0x2422 <__floatsisf+0x54>
    241a:	9e e8       	ldi	r25, 0x8E	; 142
    241c:	87 2f       	mov	r24, r23
    241e:	76 2f       	mov	r23, r22
    2420:	05 c0       	rjmp	.+10     	; 0x242c <__floatsisf+0x5e>
    2422:	66 23       	and	r22, r22
    2424:	71 f0       	breq	.+28     	; 0x2442 <__floatsisf+0x74>
    2426:	96 e8       	ldi	r25, 0x86	; 134
    2428:	86 2f       	mov	r24, r22
    242a:	70 e0       	ldi	r23, 0x00	; 0
    242c:	60 e0       	ldi	r22, 0x00	; 0
    242e:	2a f0       	brmi	.+10     	; 0x243a <__floatsisf+0x6c>
    2430:	9a 95       	dec	r25
    2432:	66 0f       	add	r22, r22
    2434:	77 1f       	adc	r23, r23
    2436:	88 1f       	adc	r24, r24
    2438:	da f7       	brpl	.-10     	; 0x2430 <__floatsisf+0x62>
    243a:	88 0f       	add	r24, r24
    243c:	96 95       	lsr	r25
    243e:	87 95       	ror	r24
    2440:	97 f9       	bld	r25, 7
    2442:	08 95       	ret

00002444 <__fp_cmp>:
    2444:	99 0f       	add	r25, r25
    2446:	00 08       	sbc	r0, r0
    2448:	55 0f       	add	r21, r21
    244a:	aa 0b       	sbc	r26, r26
    244c:	e0 e8       	ldi	r30, 0x80	; 128
    244e:	fe ef       	ldi	r31, 0xFE	; 254
    2450:	16 16       	cp	r1, r22
    2452:	17 06       	cpc	r1, r23
    2454:	e8 07       	cpc	r30, r24
    2456:	f9 07       	cpc	r31, r25
    2458:	c0 f0       	brcs	.+48     	; 0x248a <__fp_cmp+0x46>
    245a:	12 16       	cp	r1, r18
    245c:	13 06       	cpc	r1, r19
    245e:	e4 07       	cpc	r30, r20
    2460:	f5 07       	cpc	r31, r21
    2462:	98 f0       	brcs	.+38     	; 0x248a <__fp_cmp+0x46>
    2464:	62 1b       	sub	r22, r18
    2466:	73 0b       	sbc	r23, r19
    2468:	84 0b       	sbc	r24, r20
    246a:	95 0b       	sbc	r25, r21
    246c:	39 f4       	brne	.+14     	; 0x247c <__fp_cmp+0x38>
    246e:	0a 26       	eor	r0, r26
    2470:	61 f0       	breq	.+24     	; 0x248a <__fp_cmp+0x46>
    2472:	23 2b       	or	r18, r19
    2474:	24 2b       	or	r18, r20
    2476:	25 2b       	or	r18, r21
    2478:	21 f4       	brne	.+8      	; 0x2482 <__fp_cmp+0x3e>
    247a:	08 95       	ret
    247c:	0a 26       	eor	r0, r26
    247e:	09 f4       	brne	.+2      	; 0x2482 <__fp_cmp+0x3e>
    2480:	a1 40       	sbci	r26, 0x01	; 1
    2482:	a6 95       	lsr	r26
    2484:	8f ef       	ldi	r24, 0xFF	; 255
    2486:	81 1d       	adc	r24, r1
    2488:	81 1d       	adc	r24, r1
    248a:	08 95       	ret

0000248c <__fp_inf>:
    248c:	97 f9       	bld	r25, 7
    248e:	9f 67       	ori	r25, 0x7F	; 127
    2490:	80 e8       	ldi	r24, 0x80	; 128
    2492:	70 e0       	ldi	r23, 0x00	; 0
    2494:	60 e0       	ldi	r22, 0x00	; 0
    2496:	08 95       	ret

00002498 <__fp_nan>:
    2498:	9f ef       	ldi	r25, 0xFF	; 255
    249a:	80 ec       	ldi	r24, 0xC0	; 192
    249c:	08 95       	ret

0000249e <__fp_pscA>:
    249e:	00 24       	eor	r0, r0
    24a0:	0a 94       	dec	r0
    24a2:	16 16       	cp	r1, r22
    24a4:	17 06       	cpc	r1, r23
    24a6:	18 06       	cpc	r1, r24
    24a8:	09 06       	cpc	r0, r25
    24aa:	08 95       	ret

000024ac <__fp_pscB>:
    24ac:	00 24       	eor	r0, r0
    24ae:	0a 94       	dec	r0
    24b0:	12 16       	cp	r1, r18
    24b2:	13 06       	cpc	r1, r19
    24b4:	14 06       	cpc	r1, r20
    24b6:	05 06       	cpc	r0, r21
    24b8:	08 95       	ret

000024ba <__fp_round>:
    24ba:	09 2e       	mov	r0, r25
    24bc:	03 94       	inc	r0
    24be:	00 0c       	add	r0, r0
    24c0:	11 f4       	brne	.+4      	; 0x24c6 <__fp_round+0xc>
    24c2:	88 23       	and	r24, r24
    24c4:	52 f0       	brmi	.+20     	; 0x24da <__fp_round+0x20>
    24c6:	bb 0f       	add	r27, r27
    24c8:	40 f4       	brcc	.+16     	; 0x24da <__fp_round+0x20>
    24ca:	bf 2b       	or	r27, r31
    24cc:	11 f4       	brne	.+4      	; 0x24d2 <__fp_round+0x18>
    24ce:	60 ff       	sbrs	r22, 0
    24d0:	04 c0       	rjmp	.+8      	; 0x24da <__fp_round+0x20>
    24d2:	6f 5f       	subi	r22, 0xFF	; 255
    24d4:	7f 4f       	sbci	r23, 0xFF	; 255
    24d6:	8f 4f       	sbci	r24, 0xFF	; 255
    24d8:	9f 4f       	sbci	r25, 0xFF	; 255
    24da:	08 95       	ret

000024dc <__fp_split3>:
    24dc:	57 fd       	sbrc	r21, 7
    24de:	90 58       	subi	r25, 0x80	; 128
    24e0:	44 0f       	add	r20, r20
    24e2:	55 1f       	adc	r21, r21
    24e4:	59 f0       	breq	.+22     	; 0x24fc <__fp_splitA+0x10>
    24e6:	5f 3f       	cpi	r21, 0xFF	; 255
    24e8:	71 f0       	breq	.+28     	; 0x2506 <__fp_splitA+0x1a>
    24ea:	47 95       	ror	r20

000024ec <__fp_splitA>:
    24ec:	88 0f       	add	r24, r24
    24ee:	97 fb       	bst	r25, 7
    24f0:	99 1f       	adc	r25, r25
    24f2:	61 f0       	breq	.+24     	; 0x250c <__fp_splitA+0x20>
    24f4:	9f 3f       	cpi	r25, 0xFF	; 255
    24f6:	79 f0       	breq	.+30     	; 0x2516 <__fp_splitA+0x2a>
    24f8:	87 95       	ror	r24
    24fa:	08 95       	ret
    24fc:	12 16       	cp	r1, r18
    24fe:	13 06       	cpc	r1, r19
    2500:	14 06       	cpc	r1, r20
    2502:	55 1f       	adc	r21, r21
    2504:	f2 cf       	rjmp	.-28     	; 0x24ea <__fp_split3+0xe>
    2506:	46 95       	lsr	r20
    2508:	f1 df       	rcall	.-30     	; 0x24ec <__fp_splitA>
    250a:	08 c0       	rjmp	.+16     	; 0x251c <__fp_splitA+0x30>
    250c:	16 16       	cp	r1, r22
    250e:	17 06       	cpc	r1, r23
    2510:	18 06       	cpc	r1, r24
    2512:	99 1f       	adc	r25, r25
    2514:	f1 cf       	rjmp	.-30     	; 0x24f8 <__fp_splitA+0xc>
    2516:	86 95       	lsr	r24
    2518:	71 05       	cpc	r23, r1
    251a:	61 05       	cpc	r22, r1
    251c:	08 94       	sec
    251e:	08 95       	ret

00002520 <__fp_zero>:
    2520:	e8 94       	clt

00002522 <__fp_szero>:
    2522:	bb 27       	eor	r27, r27
    2524:	66 27       	eor	r22, r22
    2526:	77 27       	eor	r23, r23
    2528:	cb 01       	movw	r24, r22
    252a:	97 f9       	bld	r25, 7
    252c:	08 95       	ret

0000252e <__gesf2>:
    252e:	8a df       	rcall	.-236    	; 0x2444 <__fp_cmp>
    2530:	08 f4       	brcc	.+2      	; 0x2534 <__gesf2+0x6>
    2532:	8f ef       	ldi	r24, 0xFF	; 255
    2534:	08 95       	ret

00002536 <__mulsf3>:
    2536:	0b d0       	rcall	.+22     	; 0x254e <__mulsf3x>
    2538:	c0 cf       	rjmp	.-128    	; 0x24ba <__fp_round>
    253a:	b1 df       	rcall	.-158    	; 0x249e <__fp_pscA>
    253c:	28 f0       	brcs	.+10     	; 0x2548 <__mulsf3+0x12>
    253e:	b6 df       	rcall	.-148    	; 0x24ac <__fp_pscB>
    2540:	18 f0       	brcs	.+6      	; 0x2548 <__mulsf3+0x12>
    2542:	95 23       	and	r25, r21
    2544:	09 f0       	breq	.+2      	; 0x2548 <__mulsf3+0x12>
    2546:	a2 cf       	rjmp	.-188    	; 0x248c <__fp_inf>
    2548:	a7 cf       	rjmp	.-178    	; 0x2498 <__fp_nan>
    254a:	11 24       	eor	r1, r1
    254c:	ea cf       	rjmp	.-44     	; 0x2522 <__fp_szero>

0000254e <__mulsf3x>:
    254e:	c6 df       	rcall	.-116    	; 0x24dc <__fp_split3>
    2550:	a0 f3       	brcs	.-24     	; 0x253a <__mulsf3+0x4>

00002552 <__mulsf3_pse>:
    2552:	95 9f       	mul	r25, r21
    2554:	d1 f3       	breq	.-12     	; 0x254a <__mulsf3+0x14>
    2556:	95 0f       	add	r25, r21
    2558:	50 e0       	ldi	r21, 0x00	; 0
    255a:	55 1f       	adc	r21, r21
    255c:	62 9f       	mul	r22, r18
    255e:	f0 01       	movw	r30, r0
    2560:	72 9f       	mul	r23, r18
    2562:	bb 27       	eor	r27, r27
    2564:	f0 0d       	add	r31, r0
    2566:	b1 1d       	adc	r27, r1
    2568:	63 9f       	mul	r22, r19
    256a:	aa 27       	eor	r26, r26
    256c:	f0 0d       	add	r31, r0
    256e:	b1 1d       	adc	r27, r1
    2570:	aa 1f       	adc	r26, r26
    2572:	64 9f       	mul	r22, r20
    2574:	66 27       	eor	r22, r22
    2576:	b0 0d       	add	r27, r0
    2578:	a1 1d       	adc	r26, r1
    257a:	66 1f       	adc	r22, r22
    257c:	82 9f       	mul	r24, r18
    257e:	22 27       	eor	r18, r18
    2580:	b0 0d       	add	r27, r0
    2582:	a1 1d       	adc	r26, r1
    2584:	62 1f       	adc	r22, r18
    2586:	73 9f       	mul	r23, r19
    2588:	b0 0d       	add	r27, r0
    258a:	a1 1d       	adc	r26, r1
    258c:	62 1f       	adc	r22, r18
    258e:	83 9f       	mul	r24, r19
    2590:	a0 0d       	add	r26, r0
    2592:	61 1d       	adc	r22, r1
    2594:	22 1f       	adc	r18, r18
    2596:	74 9f       	mul	r23, r20
    2598:	33 27       	eor	r19, r19
    259a:	a0 0d       	add	r26, r0
    259c:	61 1d       	adc	r22, r1
    259e:	23 1f       	adc	r18, r19
    25a0:	84 9f       	mul	r24, r20
    25a2:	60 0d       	add	r22, r0
    25a4:	21 1d       	adc	r18, r1
    25a6:	82 2f       	mov	r24, r18
    25a8:	76 2f       	mov	r23, r22
    25aa:	6a 2f       	mov	r22, r26
    25ac:	11 24       	eor	r1, r1
    25ae:	9f 57       	subi	r25, 0x7F	; 127
    25b0:	50 40       	sbci	r21, 0x00	; 0
    25b2:	8a f0       	brmi	.+34     	; 0x25d6 <__mulsf3_pse+0x84>
    25b4:	e1 f0       	breq	.+56     	; 0x25ee <__mulsf3_pse+0x9c>
    25b6:	88 23       	and	r24, r24
    25b8:	4a f0       	brmi	.+18     	; 0x25cc <__mulsf3_pse+0x7a>
    25ba:	ee 0f       	add	r30, r30
    25bc:	ff 1f       	adc	r31, r31
    25be:	bb 1f       	adc	r27, r27
    25c0:	66 1f       	adc	r22, r22
    25c2:	77 1f       	adc	r23, r23
    25c4:	88 1f       	adc	r24, r24
    25c6:	91 50       	subi	r25, 0x01	; 1
    25c8:	50 40       	sbci	r21, 0x00	; 0
    25ca:	a9 f7       	brne	.-22     	; 0x25b6 <__mulsf3_pse+0x64>
    25cc:	9e 3f       	cpi	r25, 0xFE	; 254
    25ce:	51 05       	cpc	r21, r1
    25d0:	70 f0       	brcs	.+28     	; 0x25ee <__mulsf3_pse+0x9c>
    25d2:	5c cf       	rjmp	.-328    	; 0x248c <__fp_inf>
    25d4:	a6 cf       	rjmp	.-180    	; 0x2522 <__fp_szero>
    25d6:	5f 3f       	cpi	r21, 0xFF	; 255
    25d8:	ec f3       	brlt	.-6      	; 0x25d4 <__mulsf3_pse+0x82>
    25da:	98 3e       	cpi	r25, 0xE8	; 232
    25dc:	dc f3       	brlt	.-10     	; 0x25d4 <__mulsf3_pse+0x82>
    25de:	86 95       	lsr	r24
    25e0:	77 95       	ror	r23
    25e2:	67 95       	ror	r22
    25e4:	b7 95       	ror	r27
    25e6:	f7 95       	ror	r31
    25e8:	e7 95       	ror	r30
    25ea:	9f 5f       	subi	r25, 0xFF	; 255
    25ec:	c1 f7       	brne	.-16     	; 0x25de <__mulsf3_pse+0x8c>
    25ee:	fe 2b       	or	r31, r30
    25f0:	88 0f       	add	r24, r24
    25f2:	91 1d       	adc	r25, r1
    25f4:	96 95       	lsr	r25
    25f6:	87 95       	ror	r24
    25f8:	97 f9       	bld	r25, 7
    25fa:	08 95       	ret

000025fc <__umulhisi3>:
    25fc:	a2 9f       	mul	r26, r18
    25fe:	b0 01       	movw	r22, r0
    2600:	b3 9f       	mul	r27, r19
    2602:	c0 01       	movw	r24, r0
    2604:	a3 9f       	mul	r26, r19
    2606:	70 0d       	add	r23, r0
    2608:	81 1d       	adc	r24, r1
    260a:	11 24       	eor	r1, r1
    260c:	91 1d       	adc	r25, r1
    260e:	b2 9f       	mul	r27, r18
    2610:	70 0d       	add	r23, r0
    2612:	81 1d       	adc	r24, r1
    2614:	11 24       	eor	r1, r1
    2616:	91 1d       	adc	r25, r1
    2618:	08 95       	ret

0000261a <__tablejump2__>:
    261a:	ee 0f       	add	r30, r30
    261c:	ff 1f       	adc	r31, r31
    261e:	88 1f       	adc	r24, r24
    2620:	8b bf       	out	0x3b, r24	; 59
    2622:	07 90       	elpm	r0, Z+
    2624:	f6 91       	elpm	r31, Z
    2626:	e0 2d       	mov	r30, r0
    2628:	19 94       	eijmp

0000262a <malloc>:
    262a:	0f 93       	push	r16
    262c:	1f 93       	push	r17
    262e:	cf 93       	push	r28
    2630:	df 93       	push	r29
    2632:	82 30       	cpi	r24, 0x02	; 2
    2634:	91 05       	cpc	r25, r1
    2636:	10 f4       	brcc	.+4      	; 0x263c <malloc+0x12>
    2638:	82 e0       	ldi	r24, 0x02	; 2
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	e0 91 cf 16 	lds	r30, 0x16CF	; 0x8016cf <__flp>
    2640:	f0 91 d0 16 	lds	r31, 0x16D0	; 0x8016d0 <__flp+0x1>
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	a0 e0       	ldi	r26, 0x00	; 0
    264a:	b0 e0       	ldi	r27, 0x00	; 0
    264c:	30 97       	sbiw	r30, 0x00	; 0
    264e:	19 f1       	breq	.+70     	; 0x2696 <malloc+0x6c>
    2650:	40 81       	ld	r20, Z
    2652:	51 81       	ldd	r21, Z+1	; 0x01
    2654:	02 81       	ldd	r16, Z+2	; 0x02
    2656:	13 81       	ldd	r17, Z+3	; 0x03
    2658:	48 17       	cp	r20, r24
    265a:	59 07       	cpc	r21, r25
    265c:	c8 f0       	brcs	.+50     	; 0x2690 <malloc+0x66>
    265e:	84 17       	cp	r24, r20
    2660:	95 07       	cpc	r25, r21
    2662:	69 f4       	brne	.+26     	; 0x267e <malloc+0x54>
    2664:	10 97       	sbiw	r26, 0x00	; 0
    2666:	31 f0       	breq	.+12     	; 0x2674 <malloc+0x4a>
    2668:	12 96       	adiw	r26, 0x02	; 2
    266a:	0c 93       	st	X, r16
    266c:	12 97       	sbiw	r26, 0x02	; 2
    266e:	13 96       	adiw	r26, 0x03	; 3
    2670:	1c 93       	st	X, r17
    2672:	27 c0       	rjmp	.+78     	; 0x26c2 <malloc+0x98>
    2674:	00 93 cf 16 	sts	0x16CF, r16	; 0x8016cf <__flp>
    2678:	10 93 d0 16 	sts	0x16D0, r17	; 0x8016d0 <__flp+0x1>
    267c:	22 c0       	rjmp	.+68     	; 0x26c2 <malloc+0x98>
    267e:	21 15       	cp	r18, r1
    2680:	31 05       	cpc	r19, r1
    2682:	19 f0       	breq	.+6      	; 0x268a <malloc+0x60>
    2684:	42 17       	cp	r20, r18
    2686:	53 07       	cpc	r21, r19
    2688:	18 f4       	brcc	.+6      	; 0x2690 <malloc+0x66>
    268a:	9a 01       	movw	r18, r20
    268c:	bd 01       	movw	r22, r26
    268e:	ef 01       	movw	r28, r30
    2690:	df 01       	movw	r26, r30
    2692:	f8 01       	movw	r30, r16
    2694:	db cf       	rjmp	.-74     	; 0x264c <malloc+0x22>
    2696:	21 15       	cp	r18, r1
    2698:	31 05       	cpc	r19, r1
    269a:	f9 f0       	breq	.+62     	; 0x26da <malloc+0xb0>
    269c:	28 1b       	sub	r18, r24
    269e:	39 0b       	sbc	r19, r25
    26a0:	24 30       	cpi	r18, 0x04	; 4
    26a2:	31 05       	cpc	r19, r1
    26a4:	80 f4       	brcc	.+32     	; 0x26c6 <malloc+0x9c>
    26a6:	8a 81       	ldd	r24, Y+2	; 0x02
    26a8:	9b 81       	ldd	r25, Y+3	; 0x03
    26aa:	61 15       	cp	r22, r1
    26ac:	71 05       	cpc	r23, r1
    26ae:	21 f0       	breq	.+8      	; 0x26b8 <malloc+0x8e>
    26b0:	fb 01       	movw	r30, r22
    26b2:	93 83       	std	Z+3, r25	; 0x03
    26b4:	82 83       	std	Z+2, r24	; 0x02
    26b6:	04 c0       	rjmp	.+8      	; 0x26c0 <malloc+0x96>
    26b8:	90 93 d0 16 	sts	0x16D0, r25	; 0x8016d0 <__flp+0x1>
    26bc:	80 93 cf 16 	sts	0x16CF, r24	; 0x8016cf <__flp>
    26c0:	fe 01       	movw	r30, r28
    26c2:	32 96       	adiw	r30, 0x02	; 2
    26c4:	44 c0       	rjmp	.+136    	; 0x274e <malloc+0x124>
    26c6:	fe 01       	movw	r30, r28
    26c8:	e2 0f       	add	r30, r18
    26ca:	f3 1f       	adc	r31, r19
    26cc:	81 93       	st	Z+, r24
    26ce:	91 93       	st	Z+, r25
    26d0:	22 50       	subi	r18, 0x02	; 2
    26d2:	31 09       	sbc	r19, r1
    26d4:	39 83       	std	Y+1, r19	; 0x01
    26d6:	28 83       	st	Y, r18
    26d8:	3a c0       	rjmp	.+116    	; 0x274e <malloc+0x124>
    26da:	20 91 cd 16 	lds	r18, 0x16CD	; 0x8016cd <__brkval>
    26de:	30 91 ce 16 	lds	r19, 0x16CE	; 0x8016ce <__brkval+0x1>
    26e2:	23 2b       	or	r18, r19
    26e4:	41 f4       	brne	.+16     	; 0x26f6 <malloc+0xcc>
    26e6:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    26ea:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    26ee:	30 93 ce 16 	sts	0x16CE, r19	; 0x8016ce <__brkval+0x1>
    26f2:	20 93 cd 16 	sts	0x16CD, r18	; 0x8016cd <__brkval>
    26f6:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    26fa:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    26fe:	21 15       	cp	r18, r1
    2700:	31 05       	cpc	r19, r1
    2702:	41 f4       	brne	.+16     	; 0x2714 <malloc+0xea>
    2704:	2d b7       	in	r18, 0x3d	; 61
    2706:	3e b7       	in	r19, 0x3e	; 62
    2708:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    270c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2710:	24 1b       	sub	r18, r20
    2712:	35 0b       	sbc	r19, r21
    2714:	e0 91 cd 16 	lds	r30, 0x16CD	; 0x8016cd <__brkval>
    2718:	f0 91 ce 16 	lds	r31, 0x16CE	; 0x8016ce <__brkval+0x1>
    271c:	e2 17       	cp	r30, r18
    271e:	f3 07       	cpc	r31, r19
    2720:	a0 f4       	brcc	.+40     	; 0x274a <malloc+0x120>
    2722:	2e 1b       	sub	r18, r30
    2724:	3f 0b       	sbc	r19, r31
    2726:	28 17       	cp	r18, r24
    2728:	39 07       	cpc	r19, r25
    272a:	78 f0       	brcs	.+30     	; 0x274a <malloc+0x120>
    272c:	ac 01       	movw	r20, r24
    272e:	4e 5f       	subi	r20, 0xFE	; 254
    2730:	5f 4f       	sbci	r21, 0xFF	; 255
    2732:	24 17       	cp	r18, r20
    2734:	35 07       	cpc	r19, r21
    2736:	48 f0       	brcs	.+18     	; 0x274a <malloc+0x120>
    2738:	4e 0f       	add	r20, r30
    273a:	5f 1f       	adc	r21, r31
    273c:	50 93 ce 16 	sts	0x16CE, r21	; 0x8016ce <__brkval+0x1>
    2740:	40 93 cd 16 	sts	0x16CD, r20	; 0x8016cd <__brkval>
    2744:	81 93       	st	Z+, r24
    2746:	91 93       	st	Z+, r25
    2748:	02 c0       	rjmp	.+4      	; 0x274e <malloc+0x124>
    274a:	e0 e0       	ldi	r30, 0x00	; 0
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	cf 01       	movw	r24, r30
    2750:	df 91       	pop	r29
    2752:	cf 91       	pop	r28
    2754:	1f 91       	pop	r17
    2756:	0f 91       	pop	r16
    2758:	08 95       	ret

0000275a <free>:
    275a:	cf 93       	push	r28
    275c:	df 93       	push	r29
    275e:	00 97       	sbiw	r24, 0x00	; 0
    2760:	09 f4       	brne	.+2      	; 0x2764 <free+0xa>
    2762:	81 c0       	rjmp	.+258    	; 0x2866 <free+0x10c>
    2764:	fc 01       	movw	r30, r24
    2766:	32 97       	sbiw	r30, 0x02	; 2
    2768:	13 82       	std	Z+3, r1	; 0x03
    276a:	12 82       	std	Z+2, r1	; 0x02
    276c:	a0 91 cf 16 	lds	r26, 0x16CF	; 0x8016cf <__flp>
    2770:	b0 91 d0 16 	lds	r27, 0x16D0	; 0x8016d0 <__flp+0x1>
    2774:	10 97       	sbiw	r26, 0x00	; 0
    2776:	81 f4       	brne	.+32     	; 0x2798 <free+0x3e>
    2778:	20 81       	ld	r18, Z
    277a:	31 81       	ldd	r19, Z+1	; 0x01
    277c:	82 0f       	add	r24, r18
    277e:	93 1f       	adc	r25, r19
    2780:	20 91 cd 16 	lds	r18, 0x16CD	; 0x8016cd <__brkval>
    2784:	30 91 ce 16 	lds	r19, 0x16CE	; 0x8016ce <__brkval+0x1>
    2788:	28 17       	cp	r18, r24
    278a:	39 07       	cpc	r19, r25
    278c:	51 f5       	brne	.+84     	; 0x27e2 <free+0x88>
    278e:	f0 93 ce 16 	sts	0x16CE, r31	; 0x8016ce <__brkval+0x1>
    2792:	e0 93 cd 16 	sts	0x16CD, r30	; 0x8016cd <__brkval>
    2796:	67 c0       	rjmp	.+206    	; 0x2866 <free+0x10c>
    2798:	ed 01       	movw	r28, r26
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	ce 17       	cp	r28, r30
    27a0:	df 07       	cpc	r29, r31
    27a2:	40 f4       	brcc	.+16     	; 0x27b4 <free+0x5a>
    27a4:	4a 81       	ldd	r20, Y+2	; 0x02
    27a6:	5b 81       	ldd	r21, Y+3	; 0x03
    27a8:	9e 01       	movw	r18, r28
    27aa:	41 15       	cp	r20, r1
    27ac:	51 05       	cpc	r21, r1
    27ae:	f1 f0       	breq	.+60     	; 0x27ec <free+0x92>
    27b0:	ea 01       	movw	r28, r20
    27b2:	f5 cf       	rjmp	.-22     	; 0x279e <free+0x44>
    27b4:	d3 83       	std	Z+3, r29	; 0x03
    27b6:	c2 83       	std	Z+2, r28	; 0x02
    27b8:	40 81       	ld	r20, Z
    27ba:	51 81       	ldd	r21, Z+1	; 0x01
    27bc:	84 0f       	add	r24, r20
    27be:	95 1f       	adc	r25, r21
    27c0:	c8 17       	cp	r28, r24
    27c2:	d9 07       	cpc	r29, r25
    27c4:	59 f4       	brne	.+22     	; 0x27dc <free+0x82>
    27c6:	88 81       	ld	r24, Y
    27c8:	99 81       	ldd	r25, Y+1	; 0x01
    27ca:	84 0f       	add	r24, r20
    27cc:	95 1f       	adc	r25, r21
    27ce:	02 96       	adiw	r24, 0x02	; 2
    27d0:	91 83       	std	Z+1, r25	; 0x01
    27d2:	80 83       	st	Z, r24
    27d4:	8a 81       	ldd	r24, Y+2	; 0x02
    27d6:	9b 81       	ldd	r25, Y+3	; 0x03
    27d8:	93 83       	std	Z+3, r25	; 0x03
    27da:	82 83       	std	Z+2, r24	; 0x02
    27dc:	21 15       	cp	r18, r1
    27de:	31 05       	cpc	r19, r1
    27e0:	29 f4       	brne	.+10     	; 0x27ec <free+0x92>
    27e2:	f0 93 d0 16 	sts	0x16D0, r31	; 0x8016d0 <__flp+0x1>
    27e6:	e0 93 cf 16 	sts	0x16CF, r30	; 0x8016cf <__flp>
    27ea:	3d c0       	rjmp	.+122    	; 0x2866 <free+0x10c>
    27ec:	e9 01       	movw	r28, r18
    27ee:	fb 83       	std	Y+3, r31	; 0x03
    27f0:	ea 83       	std	Y+2, r30	; 0x02
    27f2:	49 91       	ld	r20, Y+
    27f4:	59 91       	ld	r21, Y+
    27f6:	c4 0f       	add	r28, r20
    27f8:	d5 1f       	adc	r29, r21
    27fa:	ec 17       	cp	r30, r28
    27fc:	fd 07       	cpc	r31, r29
    27fe:	61 f4       	brne	.+24     	; 0x2818 <free+0xbe>
    2800:	80 81       	ld	r24, Z
    2802:	91 81       	ldd	r25, Z+1	; 0x01
    2804:	84 0f       	add	r24, r20
    2806:	95 1f       	adc	r25, r21
    2808:	02 96       	adiw	r24, 0x02	; 2
    280a:	e9 01       	movw	r28, r18
    280c:	99 83       	std	Y+1, r25	; 0x01
    280e:	88 83       	st	Y, r24
    2810:	82 81       	ldd	r24, Z+2	; 0x02
    2812:	93 81       	ldd	r25, Z+3	; 0x03
    2814:	9b 83       	std	Y+3, r25	; 0x03
    2816:	8a 83       	std	Y+2, r24	; 0x02
    2818:	e0 e0       	ldi	r30, 0x00	; 0
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	12 96       	adiw	r26, 0x02	; 2
    281e:	8d 91       	ld	r24, X+
    2820:	9c 91       	ld	r25, X
    2822:	13 97       	sbiw	r26, 0x03	; 3
    2824:	00 97       	sbiw	r24, 0x00	; 0
    2826:	19 f0       	breq	.+6      	; 0x282e <free+0xd4>
    2828:	fd 01       	movw	r30, r26
    282a:	dc 01       	movw	r26, r24
    282c:	f7 cf       	rjmp	.-18     	; 0x281c <free+0xc2>
    282e:	8d 91       	ld	r24, X+
    2830:	9c 91       	ld	r25, X
    2832:	11 97       	sbiw	r26, 0x01	; 1
    2834:	9d 01       	movw	r18, r26
    2836:	2e 5f       	subi	r18, 0xFE	; 254
    2838:	3f 4f       	sbci	r19, 0xFF	; 255
    283a:	82 0f       	add	r24, r18
    283c:	93 1f       	adc	r25, r19
    283e:	20 91 cd 16 	lds	r18, 0x16CD	; 0x8016cd <__brkval>
    2842:	30 91 ce 16 	lds	r19, 0x16CE	; 0x8016ce <__brkval+0x1>
    2846:	28 17       	cp	r18, r24
    2848:	39 07       	cpc	r19, r25
    284a:	69 f4       	brne	.+26     	; 0x2866 <free+0x10c>
    284c:	30 97       	sbiw	r30, 0x00	; 0
    284e:	29 f4       	brne	.+10     	; 0x285a <free+0x100>
    2850:	10 92 d0 16 	sts	0x16D0, r1	; 0x8016d0 <__flp+0x1>
    2854:	10 92 cf 16 	sts	0x16CF, r1	; 0x8016cf <__flp>
    2858:	02 c0       	rjmp	.+4      	; 0x285e <free+0x104>
    285a:	13 82       	std	Z+3, r1	; 0x03
    285c:	12 82       	std	Z+2, r1	; 0x02
    285e:	b0 93 ce 16 	sts	0x16CE, r27	; 0x8016ce <__brkval+0x1>
    2862:	a0 93 cd 16 	sts	0x16CD, r26	; 0x8016cd <__brkval>
    2866:	df 91       	pop	r29
    2868:	cf 91       	pop	r28
    286a:	08 95       	ret

0000286c <memset>:
    286c:	dc 01       	movw	r26, r24
    286e:	01 c0       	rjmp	.+2      	; 0x2872 <memset+0x6>
    2870:	6d 93       	st	X+, r22
    2872:	41 50       	subi	r20, 0x01	; 1
    2874:	50 40       	sbci	r21, 0x00	; 0
    2876:	e0 f7       	brcc	.-8      	; 0x2870 <memset+0x4>
    2878:	08 95       	ret

0000287a <strncpy>:
    287a:	fb 01       	movw	r30, r22
    287c:	dc 01       	movw	r26, r24
    287e:	41 50       	subi	r20, 0x01	; 1
    2880:	50 40       	sbci	r21, 0x00	; 0
    2882:	48 f0       	brcs	.+18     	; 0x2896 <strncpy+0x1c>
    2884:	01 90       	ld	r0, Z+
    2886:	0d 92       	st	X+, r0
    2888:	00 20       	and	r0, r0
    288a:	c9 f7       	brne	.-14     	; 0x287e <strncpy+0x4>
    288c:	01 c0       	rjmp	.+2      	; 0x2890 <strncpy+0x16>
    288e:	1d 92       	st	X+, r1
    2890:	41 50       	subi	r20, 0x01	; 1
    2892:	50 40       	sbci	r21, 0x00	; 0
    2894:	e0 f7       	brcc	.-8      	; 0x288e <strncpy+0x14>
    2896:	08 95       	ret

00002898 <__do_global_dtors>:
    2898:	10 e0       	ldi	r17, 0x00	; 0
    289a:	c3 e7       	ldi	r28, 0x73	; 115
    289c:	d0 e0       	ldi	r29, 0x00	; 0
    289e:	00 e0       	ldi	r16, 0x00	; 0
    28a0:	05 c0       	rjmp	.+10     	; 0x28ac <__do_global_dtors+0x14>
    28a2:	80 2f       	mov	r24, r16
    28a4:	fe 01       	movw	r30, r28
    28a6:	b9 de       	rcall	.-654    	; 0x261a <__tablejump2__>
    28a8:	21 96       	adiw	r28, 0x01	; 1
    28aa:	01 1d       	adc	r16, r1
    28ac:	c4 37       	cpi	r28, 0x74	; 116
    28ae:	d1 07       	cpc	r29, r17
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	08 07       	cpc	r16, r24
    28b4:	b1 f7       	brne	.-20     	; 0x28a2 <__do_global_dtors+0xa>
    28b6:	f8 94       	cli

000028b8 <__stop_program>:
    28b8:	ff cf       	rjmp	.-2      	; 0x28b8 <__stop_program>
