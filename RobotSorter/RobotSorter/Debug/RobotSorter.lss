
RobotSorter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800200  00001b8a  00001c1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000013cb  00800218  00800218  00001c36  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c36  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  00001ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000035b2  00000000  00000000  00001f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017f5  00000000  00000000  000054fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a5c  00000000  00000000  00006cef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007a0  00000000  00000000  0000874c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001278  00000000  00000000  00008eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d7e  00000000  00000000  0000a164  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  0000bee2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	65 c0       	rjmp	.+202    	; 0x170 <__vector_41>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__vector_45>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	dc c7       	rjmp	.+4024   	; 0x1076 <__vector_47>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea e8       	ldi	r30, 0x8A	; 138
      fc:	fb e1       	ldi	r31, 0x1B	; 27
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 31       	cpi	r26, 0x18	; 24
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	25 e1       	ldi	r18, 0x15	; 21
     110:	a8 e1       	ldi	r26, 0x18	; 24
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a3 3e       	cpi	r26, 0xE3	; 227
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	17 d1       	rcall	.+558    	; 0x34e <main>
     120:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <__vector_45>:
	
	return freq;
}

ISR(TIMER4_OVF_vect)
{
     126:	1f 92       	push	r1
     128:	0f 92       	push	r0
     12a:	0f b6       	in	r0, 0x3f	; 63
     12c:	0f 92       	push	r0
     12e:	11 24       	eor	r1, r1
     130:	8f 93       	push	r24
     132:	9f 93       	push	r25
     134:	af 93       	push	r26
     136:	bf 93       	push	r27
	timeroverflow++;
     138:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <timeroverflow>
     13c:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <timeroverflow+0x1>
     140:	a0 91 1e 02 	lds	r26, 0x021E	; 0x80021e <timeroverflow+0x2>
     144:	b0 91 1f 02 	lds	r27, 0x021F	; 0x80021f <timeroverflow+0x3>
     148:	01 96       	adiw	r24, 0x01	; 1
     14a:	a1 1d       	adc	r26, r1
     14c:	b1 1d       	adc	r27, r1
     14e:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <timeroverflow>
     152:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <timeroverflow+0x1>
     156:	a0 93 1e 02 	sts	0x021E, r26	; 0x80021e <timeroverflow+0x2>
     15a:	b0 93 1f 02 	sts	0x021F, r27	; 0x80021f <timeroverflow+0x3>
}
     15e:	bf 91       	pop	r27
     160:	af 91       	pop	r26
     162:	9f 91       	pop	r25
     164:	8f 91       	pop	r24
     166:	0f 90       	pop	r0
     168:	0f be       	out	0x3f, r0	; 63
     16a:	0f 90       	pop	r0
     16c:	1f 90       	pop	r1
     16e:	18 95       	reti

00000170 <__vector_41>:

ISR(TIMER4_CAPT_vect, ISR_BLOCK)
{
     170:	1f 92       	push	r1
     172:	0f 92       	push	r0
     174:	0f b6       	in	r0, 0x3f	; 63
     176:	0f 92       	push	r0
     178:	11 24       	eor	r1, r1
     17a:	0b b6       	in	r0, 0x3b	; 59
     17c:	0f 92       	push	r0
     17e:	cf 92       	push	r12
     180:	df 92       	push	r13
     182:	ef 92       	push	r14
     184:	ff 92       	push	r15
     186:	0f 93       	push	r16
     188:	1f 93       	push	r17
     18a:	2f 93       	push	r18
     18c:	3f 93       	push	r19
     18e:	4f 93       	push	r20
     190:	5f 93       	push	r21
     192:	6f 93       	push	r22
     194:	7f 93       	push	r23
     196:	8f 93       	push	r24
     198:	9f 93       	push	r25
     19a:	af 93       	push	r26
     19c:	bf 93       	push	r27
     19e:	ef 93       	push	r30
     1a0:	ff 93       	push	r31
	uint16_t readValue = ICR4;
     1a2:	60 91 a6 00 	lds	r22, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
     1a6:	70 91 a7 00 	lds	r23, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>

	if ( first == true )
     1aa:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <first>
     1ae:	88 23       	and	r24, r24
     1b0:	c1 f0       	breq	.+48     	; 0x1e2 <__vector_41+0x72>
	{
		timeroverflow = 0U;
     1b2:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <timeroverflow>
     1b6:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <timeroverflow+0x1>
     1ba:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <timeroverflow+0x2>
     1be:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <timeroverflow+0x3>
		oldValue = readValue;
     1c2:	cb 01       	movw	r24, r22
     1c4:	a0 e0       	ldi	r26, 0x00	; 0
     1c6:	b0 e0       	ldi	r27, 0x00	; 0
     1c8:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <oldValue>
     1cc:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <oldValue+0x1>
     1d0:	a0 93 22 02 	sts	0x0222, r26	; 0x800222 <oldValue+0x2>
     1d4:	b0 93 23 02 	sts	0x0223, r27	; 0x800223 <oldValue+0x3>
		first = false;
     1d8:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <first>
		TIFR4 = 1;
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	89 bb       	out	0x19, r24	; 25
		return;
     1e0:	8e c0       	rjmp	.+284    	; 0x2fe <__vector_41+0x18e>
	}
	
	// Disable interrupt and clear pending
	TIMSK4 = 0U;	
     1e2:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
	TIFR4 = 0U;		
     1e6:	19 ba       	out	0x19, r1	; 25
			
	uint32_t diff = 0U;

	if ( readValue < oldValue )
     1e8:	cb 01       	movw	r24, r22
     1ea:	a0 e0       	ldi	r26, 0x00	; 0
     1ec:	b0 e0       	ldi	r27, 0x00	; 0
     1ee:	00 91 20 02 	lds	r16, 0x0220	; 0x800220 <oldValue>
     1f2:	10 91 21 02 	lds	r17, 0x0221	; 0x800221 <oldValue+0x1>
     1f6:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <oldValue+0x2>
     1fa:	30 91 23 02 	lds	r19, 0x0223	; 0x800223 <oldValue+0x3>
     1fe:	80 17       	cp	r24, r16
     200:	91 07       	cpc	r25, r17
     202:	a2 07       	cpc	r26, r18
     204:	b3 07       	cpc	r27, r19
     206:	80 f5       	brcc	.+96     	; 0x268 <__vector_41+0xf8>
	{
		if ( timeroverflow != 0 )
     208:	00 91 1c 02 	lds	r16, 0x021C	; 0x80021c <timeroverflow>
     20c:	10 91 1d 02 	lds	r17, 0x021D	; 0x80021d <timeroverflow+0x1>
     210:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <timeroverflow+0x2>
     214:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <timeroverflow+0x3>
     218:	01 2b       	or	r16, r17
     21a:	02 2b       	or	r16, r18
     21c:	03 2b       	or	r16, r19
     21e:	a1 f0       	breq	.+40     	; 0x248 <__vector_41+0xd8>
		{
			timeroverflow--;
     220:	00 91 1c 02 	lds	r16, 0x021C	; 0x80021c <timeroverflow>
     224:	10 91 1d 02 	lds	r17, 0x021D	; 0x80021d <timeroverflow+0x1>
     228:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <timeroverflow+0x2>
     22c:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <timeroverflow+0x3>
     230:	01 50       	subi	r16, 0x01	; 1
     232:	11 09       	sbc	r17, r1
     234:	21 09       	sbc	r18, r1
     236:	31 09       	sbc	r19, r1
     238:	00 93 1c 02 	sts	0x021C, r16	; 0x80021c <timeroverflow>
     23c:	10 93 1d 02 	sts	0x021D, r17	; 0x80021d <timeroverflow+0x1>
     240:	20 93 1e 02 	sts	0x021E, r18	; 0x80021e <timeroverflow+0x2>
     244:	30 93 1f 02 	sts	0x021F, r19	; 0x80021f <timeroverflow+0x3>
		}
		diff = ( 0xFFFF - oldValue ) + readValue;
     248:	00 91 20 02 	lds	r16, 0x0220	; 0x800220 <oldValue>
     24c:	10 91 21 02 	lds	r17, 0x0221	; 0x800221 <oldValue+0x1>
     250:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <oldValue+0x2>
     254:	30 91 23 02 	lds	r19, 0x0223	; 0x800223 <oldValue+0x3>
     258:	80 1b       	sub	r24, r16
     25a:	91 0b       	sbc	r25, r17
     25c:	a2 0b       	sbc	r26, r18
     25e:	b3 0b       	sbc	r27, r19
     260:	01 97       	sbiw	r24, 0x01	; 1
     262:	af 4f       	sbci	r26, 0xFF	; 255
     264:	bf 4f       	sbci	r27, 0xFF	; 255
     266:	0c c0       	rjmp	.+24     	; 0x280 <__vector_41+0x110>
	}
	else
	{
		diff = readValue - oldValue;
     268:	00 91 20 02 	lds	r16, 0x0220	; 0x800220 <oldValue>
     26c:	10 91 21 02 	lds	r17, 0x0221	; 0x800221 <oldValue+0x1>
     270:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <oldValue+0x2>
     274:	30 91 23 02 	lds	r19, 0x0223	; 0x800223 <oldValue+0x3>
     278:	80 1b       	sub	r24, r16
     27a:	91 0b       	sbc	r25, r17
     27c:	a2 0b       	sbc	r26, r18
     27e:	b3 0b       	sbc	r27, r19
	}
	
	// Add timeroverflow to total diff
	diff += timeroverflow << 16U;
     280:	00 91 1c 02 	lds	r16, 0x021C	; 0x80021c <timeroverflow>
     284:	10 91 1d 02 	lds	r17, 0x021D	; 0x80021d <timeroverflow+0x1>
     288:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <timeroverflow+0x2>
     28c:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <timeroverflow+0x3>
	
	// Calculate frequency
	freq = 1 / ( (float)diff * tick );
     290:	c0 90 00 02 	lds	r12, 0x0200	; 0x800200 <__data_start>
     294:	d0 90 01 02 	lds	r13, 0x0201	; 0x800201 <__data_start+0x1>
     298:	e0 90 02 02 	lds	r14, 0x0202	; 0x800202 <__data_start+0x2>
     29c:	f0 90 03 02 	lds	r15, 0x0203	; 0x800203 <__data_start+0x3>
     2a0:	98 01       	movw	r18, r16
     2a2:	11 27       	eor	r17, r17
     2a4:	00 27       	eor	r16, r16
     2a6:	bc 01       	movw	r22, r24
     2a8:	cd 01       	movw	r24, r26
     2aa:	60 0f       	add	r22, r16
     2ac:	71 1f       	adc	r23, r17
     2ae:	82 1f       	adc	r24, r18
     2b0:	93 1f       	adc	r25, r19
     2b2:	0e 94 85 0c 	call	0x190a	; 0x190a <__floatunsisf>
     2b6:	a7 01       	movw	r20, r14
     2b8:	96 01       	movw	r18, r12
     2ba:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__mulsf3>
     2be:	9b 01       	movw	r18, r22
     2c0:	ac 01       	movw	r20, r24
     2c2:	60 e0       	ldi	r22, 0x00	; 0
     2c4:	70 e0       	ldi	r23, 0x00	; 0
     2c6:	80 e8       	ldi	r24, 0x80	; 128
     2c8:	9f e3       	ldi	r25, 0x3F	; 63
     2ca:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__divsf3>
     2ce:	60 93 18 02 	sts	0x0218, r22	; 0x800218 <__data_end>
     2d2:	70 93 19 02 	sts	0x0219, r23	; 0x800219 <__data_end+0x1>
     2d6:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <__data_end+0x2>
     2da:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <__data_end+0x3>
	
	// Reset timeroverflow and old value
	timeroverflow = 0U;
     2de:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <timeroverflow>
     2e2:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <timeroverflow+0x1>
     2e6:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <timeroverflow+0x2>
     2ea:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <timeroverflow+0x3>
	oldValue = 0U;
     2ee:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <oldValue>
     2f2:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <oldValue+0x1>
     2f6:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <oldValue+0x2>
     2fa:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <oldValue+0x3>
     2fe:	ff 91       	pop	r31
     300:	ef 91       	pop	r30
     302:	bf 91       	pop	r27
     304:	af 91       	pop	r26
     306:	9f 91       	pop	r25
     308:	8f 91       	pop	r24
     30a:	7f 91       	pop	r23
     30c:	6f 91       	pop	r22
     30e:	5f 91       	pop	r21
     310:	4f 91       	pop	r20
     312:	3f 91       	pop	r19
     314:	2f 91       	pop	r18
     316:	1f 91       	pop	r17
     318:	0f 91       	pop	r16
     31a:	ff 90       	pop	r15
     31c:	ef 90       	pop	r14
     31e:	df 90       	pop	r13
     320:	cf 90       	pop	r12
     322:	0f 90       	pop	r0
     324:	0b be       	out	0x3b, r0	; 59
     326:	0f 90       	pop	r0
     328:	0f be       	out	0x3f, r0	; 63
     32a:	0f 90       	pop	r0
     32c:	1f 90       	pop	r1
     32e:	18 95       	reti

00000330 <_Z9FirstTaskPv>:
#include "FreeRTOS.h"
#include "task.h"
#include "portmacro.h"

void FirstTask( void *pvParameters )
{
     330:	ec 01       	movw	r28, r24
			Robotarm* ptr = (Robotarm*) pvParameters;
		ptr->grabBlock();
     332:	d2 d0       	rcall	.+420    	; 0x4d8 <_ZN8Robotarm9grabBlockEv>
	while(1)
	{
		ptr->grabBlock();
     334:	ce 01       	movw	r24, r28
     336:	d0 d0       	rcall	.+416    	; 0x4d8 <_ZN8Robotarm9grabBlockEv>
	 	vTaskDelay( 5000 / portTICK_RATE_MS );
     338:	88 e8       	ldi	r24, 0x88	; 136
     33a:	93 e1       	ldi	r25, 0x13	; 19
     33c:	0e 94 12 0b 	call	0x1624	; 0x1624 <vTaskDelay>
		ptr->moveBlockToZoneOne();
     340:	ce 01       	movw	r24, r28
     342:	00 d1       	rcall	.+512    	; 0x544 <_ZN8Robotarm18moveBlockToZoneOneEv>
	 	vTaskDelay( 5000 / portTICK_RATE_MS );
     344:	88 e8       	ldi	r24, 0x88	; 136
     346:	93 e1       	ldi	r25, 0x13	; 19
     348:	0e 94 12 0b 	call	0x1624	; 0x1624 <vTaskDelay>
     34c:	f3 cf       	rjmp	.-26     	; 0x334 <_Z9FirstTaskPv+0x4>

0000034e <main>:
	}
}

int main(void)
{
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	e3 97       	sbiw	r28, 0x33	; 51
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	0f be       	out	0x3f, r0	; 63
     360:	cd bf       	out	0x3d, r28	; 61
	Robotarm arm = Robotarm();
     362:	ce 01       	movw	r24, r28
     364:	01 96       	adiw	r24, 0x01	; 1
     366:	15 d0       	rcall	.+42     	; 0x392 <_ZN8RobotarmC1Ev>
	
	volatile uint8_t test = xTaskCreate(FirstTask,  ( signed char * ) "Task", configMINIMAL_STACK_SIZE, &arm, tskIDLE_PRIORITY, NULL);
     368:	a1 2c       	mov	r10, r1
     36a:	b1 2c       	mov	r11, r1
     36c:	c1 2c       	mov	r12, r1
     36e:	d1 2c       	mov	r13, r1
     370:	e1 2c       	mov	r14, r1
     372:	f1 2c       	mov	r15, r1
     374:	00 e0       	ldi	r16, 0x00	; 0
     376:	9e 01       	movw	r18, r28
     378:	2f 5f       	subi	r18, 0xFF	; 255
     37a:	3f 4f       	sbci	r19, 0xFF	; 255
     37c:	45 e5       	ldi	r20, 0x55	; 85
     37e:	50 e0       	ldi	r21, 0x00	; 0
     380:	67 e0       	ldi	r22, 0x07	; 7
     382:	72 e0       	ldi	r23, 0x02	; 2
     384:	88 e9       	ldi	r24, 0x98	; 152
     386:	91 e0       	ldi	r25, 0x01	; 1
     388:	4e d7       	rcall	.+3740   	; 0x1226 <xTaskGenericCreate>
     38a:	8b ab       	std	Y+51, r24	; 0x33
	vTaskStartScheduler();
     38c:	0e 94 cb 09 	call	0x1396	; 0x1396 <vTaskStartScheduler>
     390:	ff cf       	rjmp	.-2      	; 0x390 <main+0x42>

00000392 <_ZN8RobotarmC1Ev>:
#include "task.h"
#include "portmacro.h"

const uint16_t xDelay = 10 / portTICK_RATE_MS;

Robotarm::Robotarm()
     392:	8f 92       	push	r8
     394:	9f 92       	push	r9
     396:	af 92       	push	r10
     398:	bf 92       	push	r11
     39a:	cf 92       	push	r12
     39c:	df 92       	push	r13
     39e:	ef 92       	push	r14
     3a0:	ff 92       	push	r15
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	00 d0       	rcall	.+0      	; 0x3ac <_ZN8RobotarmC1Ev+0x1a>
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
     3b0:	4c 01       	movw	r8, r24
     3b2:	ae d2       	rcall	.+1372   	; 0x910 <_ZN6timer1C1Ev>
     3b4:	84 01       	movw	r16, r8
     3b6:	0f 5f       	subi	r16, 0xFF	; 255
     3b8:	1f 4f       	sbci	r17, 0xFF	; 255
     3ba:	c8 01       	movw	r24, r16
     3bc:	83 d3       	rcall	.+1798   	; 0xac4 <_ZN6timer3C1Ev>
{
	DDRB = DDRB | ( 1 << 4 );
     3be:	24 9a       	sbi	0x04, 4	; 4
	//PORTB =  ( 1 << 4 );
	
	tmr1_ = timer1();
     3c0:	ce 01       	movw	r24, r28
     3c2:	02 96       	adiw	r24, 0x02	; 2
     3c4:	a5 d2       	rcall	.+1354   	; 0x910 <_ZN6timer1C1Ev>
	tmr3_ = timer3();
     3c6:	ce 01       	movw	r24, r28
     3c8:	01 96       	adiw	r24, 0x01	; 1
     3ca:	7c d3       	rcall	.+1784   	; 0xac4 <_ZN6timer3C1Ev>
     3cc:	40 e0       	ldi	r20, 0x00	; 0
	
 	tmr1_.setDutyCycleComA(6);
     3ce:	50 e0       	ldi	r21, 0x00	; 0
     3d0:	60 ec       	ldi	r22, 0xC0	; 192
     3d2:	70 e4       	ldi	r23, 0x40	; 64
     3d4:	c4 01       	movw	r24, r8
     3d6:	ba d2       	rcall	.+1396   	; 0x94c <_ZN6timer116setDutyCycleComAEf>
     3d8:	0f 2e       	mov	r0, r31
	M1_Percent = 6;
     3da:	c1 2c       	mov	r12, r1
     3dc:	d1 2c       	mov	r13, r1
     3de:	f0 ec       	ldi	r31, 0xC0	; 192
     3e0:	ef 2e       	mov	r14, r31
     3e2:	f0 e4       	ldi	r31, 0x40	; 64
     3e4:	ff 2e       	mov	r15, r31
     3e6:	f0 2d       	mov	r31, r0
     3e8:	f4 01       	movw	r30, r8
     3ea:	c2 82       	std	Z+2, r12	; 0x02
     3ec:	d3 82       	std	Z+3, r13	; 0x03
     3ee:	e4 82       	std	Z+4, r14	; 0x04
     3f0:	f5 82       	std	Z+5, r15	; 0x05
     3f2:	c6 82       	std	Z+6, r12	; 0x06
	M1_OldPercent = 6;
     3f4:	d7 82       	std	Z+7, r13	; 0x07
     3f6:	e0 86       	std	Z+8, r14	; 0x08
     3f8:	f1 86       	std	Z+9, r15	; 0x09
     3fa:	40 e0       	ldi	r20, 0x00	; 0

 	tmr1_.setDutyCycleComB(7);
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	60 ee       	ldi	r22, 0xE0	; 224
     400:	70 e4       	ldi	r23, 0x40	; 64
     402:	c4 01       	movw	r24, r8
     404:	e2 d2       	rcall	.+1476   	; 0x9ca <_ZN6timer116setDutyCycleComBEf>
     406:	80 e0       	ldi	r24, 0x00	; 0
	M2_Percent = 7;
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	a0 ee       	ldi	r26, 0xE0	; 224
     40c:	b0 e4       	ldi	r27, 0x40	; 64
     40e:	f4 01       	movw	r30, r8
     410:	82 87       	std	Z+10, r24	; 0x0a
     412:	93 87       	std	Z+11, r25	; 0x0b
     414:	a4 87       	std	Z+12, r26	; 0x0c
     416:	b5 87       	std	Z+13, r27	; 0x0d
     418:	86 87       	std	Z+14, r24	; 0x0e
	M2_OldPercent = 7;
     41a:	97 87       	std	Z+15, r25	; 0x0f
     41c:	a0 8b       	std	Z+16, r26	; 0x10
     41e:	b1 8b       	std	Z+17, r27	; 0x11
	
	tmr1_.setDutyCycleComC(6);
     420:	b7 01       	movw	r22, r14
     422:	a6 01       	movw	r20, r12
     424:	c4 01       	movw	r24, r8
     426:	10 d3       	rcall	.+1568   	; 0xa48 <_ZN6timer116setDutyCycleComCEf>
     428:	f4 01       	movw	r30, r8
	M3_Percent = 6;
     42a:	c2 8a       	std	Z+18, r12	; 0x12
     42c:	d3 8a       	std	Z+19, r13	; 0x13
     42e:	e4 8a       	std	Z+20, r14	; 0x14
     430:	f5 8a       	std	Z+21, r15	; 0x15
     432:	c6 8a       	std	Z+22, r12	; 0x16
	M3_OldPercent = 6;
     434:	d7 8a       	std	Z+23, r13	; 0x17
     436:	e0 8e       	std	Z+24, r14	; 0x18
     438:	f1 8e       	std	Z+25, r15	; 0x19
	
	tmr3_.setDutyCycleComA(6);
     43a:	b7 01       	movw	r22, r14
     43c:	a6 01       	movw	r20, r12
     43e:	c8 01       	movw	r24, r16
     440:	5f d3       	rcall	.+1726   	; 0xb00 <_ZN6timer316setDutyCycleComAEf>
     442:	f4 01       	movw	r30, r8
	M4_Percent = 6;
     444:	c2 8e       	std	Z+26, r12	; 0x1a
     446:	d3 8e       	std	Z+27, r13	; 0x1b
     448:	e4 8e       	std	Z+28, r14	; 0x1c
     44a:	f5 8e       	std	Z+29, r15	; 0x1d
     44c:	c6 8e       	std	Z+30, r12	; 0x1e
	M4_OldPercent = 6;
     44e:	d7 8e       	std	Z+31, r13	; 0x1f
     450:	e0 a2       	std	Z+32, r14	; 0x20
     452:	f1 a2       	std	Z+33, r15	; 0x21
	
	tmr3_.setDutyCycleComB(3);
     454:	40 e0       	ldi	r20, 0x00	; 0
     456:	50 e0       	ldi	r21, 0x00	; 0
     458:	60 e4       	ldi	r22, 0x40	; 64
     45a:	70 e4       	ldi	r23, 0x40	; 64
     45c:	c8 01       	movw	r24, r16
     45e:	8e d3       	rcall	.+1820   	; 0xb7c <_ZN6timer316setDutyCycleComBEf>
     460:	c1 2c       	mov	r12, r1
	M5_Percent = 3;
     462:	d1 2c       	mov	r13, r1
     464:	68 94       	set
     466:	ee 24       	eor	r14, r14
     468:	e6 f8       	bld	r14, 6
     46a:	fe 2c       	mov	r15, r14
     46c:	f4 01       	movw	r30, r8
     46e:	c2 a2       	std	Z+34, r12	; 0x22
     470:	d3 a2       	std	Z+35, r13	; 0x23
     472:	e4 a2       	std	Z+36, r14	; 0x24
     474:	f5 a2       	std	Z+37, r15	; 0x25
	M5_OldPercent = 3;
     476:	c6 a2       	std	Z+38, r12	; 0x26
     478:	d7 a2       	std	Z+39, r13	; 0x27
     47a:	e0 a6       	std	Z+40, r14	; 0x28
     47c:	f1 a6       	std	Z+41, r15	; 0x29
	
	tmr3_.setDutyCycleComC(3);
     47e:	b7 01       	movw	r22, r14
     480:	a6 01       	movw	r20, r12
     482:	c8 01       	movw	r24, r16
     484:	b8 d3       	rcall	.+1904   	; 0xbf6 <_ZN6timer316setDutyCycleComCEf>
     486:	f4 01       	movw	r30, r8
	M6_Percent = 3;
     488:	c2 a6       	std	Z+42, r12	; 0x2a
     48a:	d3 a6       	std	Z+43, r13	; 0x2b
     48c:	e4 a6       	std	Z+44, r14	; 0x2c
     48e:	f5 a6       	std	Z+45, r15	; 0x2d
     490:	c6 a6       	std	Z+46, r12	; 0x2e
	M6_OldPercent = 3;
     492:	d7 a6       	std	Z+47, r13	; 0x2f
     494:	e0 aa       	std	Z+48, r14	; 0x30
     496:	f1 aa       	std	Z+49, r15	; 0x31
     498:	a1 2c       	mov	r10, r1
	
	volatile uint8_t returnval = xTaskCreate(this->startMotorImpl,  ( signed char * ) "Motors", configMINIMAL_STACK_SIZE, this, tskIDLE_PRIORITY, NULL);
     49a:	b1 2c       	mov	r11, r1
     49c:	c1 2c       	mov	r12, r1
     49e:	d1 2c       	mov	r13, r1
     4a0:	e1 2c       	mov	r14, r1
     4a2:	f1 2c       	mov	r15, r1
     4a4:	00 e0       	ldi	r16, 0x00	; 0
     4a6:	94 01       	movw	r18, r8
     4a8:	45 e5       	ldi	r20, 0x55	; 85
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	6c e0       	ldi	r22, 0x0C	; 12
     4ae:	72 e0       	ldi	r23, 0x02	; 2
     4b0:	87 e8       	ldi	r24, 0x87	; 135
     4b2:	94 e0       	ldi	r25, 0x04	; 4
     4b4:	b8 d6       	rcall	.+3440   	; 0x1226 <xTaskGenericCreate>
     4b6:	8b 83       	std	Y+3, r24	; 0x03
     4b8:	0f 90       	pop	r0
}
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	1f 91       	pop	r17
     4c4:	0f 91       	pop	r16
     4c6:	ff 90       	pop	r15
     4c8:	ef 90       	pop	r14
     4ca:	df 90       	pop	r13
     4cc:	cf 90       	pop	r12
     4ce:	bf 90       	pop	r11
     4d0:	af 90       	pop	r10
     4d2:	9f 90       	pop	r9
     4d4:	8f 90       	pop	r8
     4d6:	08 95       	ret

000004d8 <_ZN8Robotarm9grabBlockEv>:
     4d8:	cf 93       	push	r28

void Robotarm::grabBlock()
{
     4da:	df 93       	push	r29
     4dc:	ec 01       	movw	r28, r24
	M5_Percent = 7.7;
     4de:	86 e6       	ldi	r24, 0x66	; 102
     4e0:	96 e6       	ldi	r25, 0x66	; 102
     4e2:	a6 ef       	ldi	r26, 0xF6	; 246
     4e4:	b0 e4       	ldi	r27, 0x40	; 64
     4e6:	8a a3       	std	Y+34, r24	; 0x22
     4e8:	9b a3       	std	Y+35, r25	; 0x23
     4ea:	ac a3       	std	Y+36, r26	; 0x24
     4ec:	bd a3       	std	Y+37, r27	; 0x25
	M1_Percent = 2.5;
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	a0 e2       	ldi	r26, 0x20	; 32
     4f4:	b0 e4       	ldi	r27, 0x40	; 64
     4f6:	8a 83       	std	Y+2, r24	; 0x02
     4f8:	9b 83       	std	Y+3, r25	; 0x03
     4fa:	ac 83       	std	Y+4, r26	; 0x04
     4fc:	bd 83       	std	Y+5, r27	; 0x05
	vTaskDelay( 1500 / portTICK_RATE_MS );
     4fe:	8c ed       	ldi	r24, 0xDC	; 220
     500:	95 e0       	ldi	r25, 0x05	; 5
     502:	0e 94 12 0b 	call	0x1624	; 0x1624 <vTaskDelay>
	M2_Percent = 5.2; 
     506:	86 e6       	ldi	r24, 0x66	; 102
     508:	96 e6       	ldi	r25, 0x66	; 102
     50a:	a6 ea       	ldi	r26, 0xA6	; 166
     50c:	b0 e4       	ldi	r27, 0x40	; 64
     50e:	8a 87       	std	Y+10, r24	; 0x0a
     510:	9b 87       	std	Y+11, r25	; 0x0b
     512:	ac 87       	std	Y+12, r26	; 0x0c
     514:	bd 87       	std	Y+13, r27	; 0x0d
	M3_Percent = 5.0;
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	a0 ea       	ldi	r26, 0xA0	; 160
     51c:	b0 e4       	ldi	r27, 0x40	; 64
     51e:	8a 8b       	std	Y+18, r24	; 0x12
     520:	9b 8b       	std	Y+19, r25	; 0x13
     522:	ac 8b       	std	Y+20, r26	; 0x14
     524:	bd 8b       	std	Y+21, r27	; 0x15
	vTaskDelay( 1500 / portTICK_RATE_MS );
     526:	8c ed       	ldi	r24, 0xDC	; 220
     528:	95 e0       	ldi	r25, 0x05	; 5
     52a:	0e 94 12 0b 	call	0x1624	; 0x1624 <vTaskDelay>
	M6_Percent = 7.3;
     52e:	8a e9       	ldi	r24, 0x9A	; 154
     530:	99 e9       	ldi	r25, 0x99	; 153
     532:	a9 ee       	ldi	r26, 0xE9	; 233
     534:	b0 e4       	ldi	r27, 0x40	; 64
     536:	8a a7       	std	Y+42, r24	; 0x2a
     538:	9b a7       	std	Y+43, r25	; 0x2b
     53a:	ac a7       	std	Y+44, r26	; 0x2c
     53c:	bd a7       	std	Y+45, r27	; 0x2d
}
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	08 95       	ret

00000544 <_ZN8Robotarm18moveBlockToZoneOneEv>:

void Robotarm::moveBlockToZoneOne()
{
     544:	4f 92       	push	r4
     546:	5f 92       	push	r5
     548:	6f 92       	push	r6
     54a:	7f 92       	push	r7
     54c:	8f 92       	push	r8
     54e:	9f 92       	push	r9
     550:	af 92       	push	r10
     552:	bf 92       	push	r11
     554:	cf 92       	push	r12
     556:	df 92       	push	r13
     558:	ef 92       	push	r14
     55a:	ff 92       	push	r15
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	ec 01       	movw	r28, r24
	M1_Percent = 2.5;
     562:	41 2c       	mov	r4, r1
     564:	51 2c       	mov	r5, r1
     566:	32 01       	movw	r6, r4
     568:	68 94       	set
     56a:	65 f8       	bld	r6, 5
     56c:	76 f8       	bld	r7, 6
     56e:	4a 82       	std	Y+2, r4	; 0x02
     570:	5b 82       	std	Y+3, r5	; 0x03
     572:	6c 82       	std	Y+4, r6	; 0x04
     574:	7d 82       	std	Y+5, r7	; 0x05
	M2_Percent = 7; 
     576:	0f 2e       	mov	r0, r31
     578:	81 2c       	mov	r8, r1
     57a:	91 2c       	mov	r9, r1
     57c:	f0 ee       	ldi	r31, 0xE0	; 224
     57e:	af 2e       	mov	r10, r31
     580:	f0 e4       	ldi	r31, 0x40	; 64
     582:	bf 2e       	mov	r11, r31
     584:	f0 2d       	mov	r31, r0
     586:	8a 86       	std	Y+10, r8	; 0x0a
     588:	9b 86       	std	Y+11, r9	; 0x0b
     58a:	ac 86       	std	Y+12, r10	; 0x0c
     58c:	bd 86       	std	Y+13, r11	; 0x0d
	M3_Percent = 6;
     58e:	0f 2e       	mov	r0, r31
     590:	c1 2c       	mov	r12, r1
     592:	d1 2c       	mov	r13, r1
     594:	f0 ec       	ldi	r31, 0xC0	; 192
     596:	ef 2e       	mov	r14, r31
     598:	f0 e4       	ldi	r31, 0x40	; 64
     59a:	ff 2e       	mov	r15, r31
     59c:	f0 2d       	mov	r31, r0
     59e:	ca 8a       	std	Y+18, r12	; 0x12
     5a0:	db 8a       	std	Y+19, r13	; 0x13
     5a2:	ec 8a       	std	Y+20, r14	; 0x14
     5a4:	fd 8a       	std	Y+21, r15	; 0x15
	M4_Percent = 6;
     5a6:	ca 8e       	std	Y+26, r12	; 0x1a
     5a8:	db 8e       	std	Y+27, r13	; 0x1b
     5aa:	ec 8e       	std	Y+28, r14	; 0x1c
     5ac:	fd 8e       	std	Y+29, r15	; 0x1d
	vTaskDelay( 3000 / portTICK_RATE_MS );
     5ae:	88 eb       	ldi	r24, 0xB8	; 184
     5b0:	9b e0       	ldi	r25, 0x0B	; 11
     5b2:	0e 94 12 0b 	call	0x1624	; 0x1624 <vTaskDelay>
	M2_Percent = 5.2;
     5b6:	86 e6       	ldi	r24, 0x66	; 102
     5b8:	96 e6       	ldi	r25, 0x66	; 102
     5ba:	a6 ea       	ldi	r26, 0xA6	; 166
     5bc:	b0 e4       	ldi	r27, 0x40	; 64
     5be:	8a 87       	std	Y+10, r24	; 0x0a
     5c0:	9b 87       	std	Y+11, r25	; 0x0b
     5c2:	ac 87       	std	Y+12, r26	; 0x0c
     5c4:	bd 87       	std	Y+13, r27	; 0x0d
	M3_Percent = 5.0;
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	a0 ea       	ldi	r26, 0xA0	; 160
     5cc:	b0 e4       	ldi	r27, 0x40	; 64
     5ce:	8a 8b       	std	Y+18, r24	; 0x12
     5d0:	9b 8b       	std	Y+19, r25	; 0x13
     5d2:	ac 8b       	std	Y+20, r26	; 0x14
     5d4:	bd 8b       	std	Y+21, r27	; 0x15
	vTaskDelay( 1500 / portTICK_RATE_MS );
     5d6:	8c ed       	ldi	r24, 0xDC	; 220
     5d8:	95 e0       	ldi	r25, 0x05	; 5
     5da:	0e 94 12 0b 	call	0x1624	; 0x1624 <vTaskDelay>
	M6_Percent = 2.5;
     5de:	4a a6       	std	Y+42, r4	; 0x2a
     5e0:	5b a6       	std	Y+43, r5	; 0x2b
     5e2:	6c a6       	std	Y+44, r6	; 0x2c
     5e4:	7d a6       	std	Y+45, r7	; 0x2d
	vTaskDelay( 1500 / portTICK_RATE_MS );	
     5e6:	8c ed       	ldi	r24, 0xDC	; 220
     5e8:	95 e0       	ldi	r25, 0x05	; 5
     5ea:	0e 94 12 0b 	call	0x1624	; 0x1624 <vTaskDelay>
	M2_Percent = 7; 
     5ee:	8a 86       	std	Y+10, r8	; 0x0a
     5f0:	9b 86       	std	Y+11, r9	; 0x0b
     5f2:	ac 86       	std	Y+12, r10	; 0x0c
     5f4:	bd 86       	std	Y+13, r11	; 0x0d
	M3_Percent = 6;
     5f6:	ca 8a       	std	Y+18, r12	; 0x12
     5f8:	db 8a       	std	Y+19, r13	; 0x13
     5fa:	ec 8a       	std	Y+20, r14	; 0x14
     5fc:	fd 8a       	std	Y+21, r15	; 0x15
	M4_Percent = 6;
     5fe:	ca 8e       	std	Y+26, r12	; 0x1a
     600:	db 8e       	std	Y+27, r13	; 0x1b
     602:	ec 8e       	std	Y+28, r14	; 0x1c
     604:	fd 8e       	std	Y+29, r15	; 0x1d
}
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	ff 90       	pop	r15
     60c:	ef 90       	pop	r14
     60e:	df 90       	pop	r13
     610:	cf 90       	pop	r12
     612:	bf 90       	pop	r11
     614:	af 90       	pop	r10
     616:	9f 90       	pop	r9
     618:	8f 90       	pop	r8
     61a:	7f 90       	pop	r7
     61c:	6f 90       	pop	r6
     61e:	5f 90       	pop	r5
     620:	4f 90       	pop	r4
     622:	08 95       	ret

00000624 <_ZN8Robotarm20MotorSpeedControllerEv>:
	Robotarm* ptr = (Robotarm*) _this;
	ptr->MotorSpeedController();
}

void Robotarm::MotorSpeedController()
{
     624:	ec 01       	movw	r28, r24
			}
			
			if ( M4_Percent > M4_OldPercent )
			{
				M4_OldPercent += 0.0625;
				tmr3_.setDutyCycleComA( M4_OldPercent );
     626:	8c 01       	movw	r16, r24
     628:	0f 5f       	subi	r16, 0xFF	; 255
     62a:	1f 4f       	sbci	r17, 0xFF	; 255
void Robotarm::MotorSpeedController()
{
	while(1)
	{
		{
			if ( M1_Percent > M1_OldPercent )
     62c:	8a 80       	ldd	r8, Y+2	; 0x02
     62e:	9b 80       	ldd	r9, Y+3	; 0x03
     630:	ac 80       	ldd	r10, Y+4	; 0x04
     632:	bd 80       	ldd	r11, Y+5	; 0x05
     634:	ce 80       	ldd	r12, Y+6	; 0x06
     636:	df 80       	ldd	r13, Y+7	; 0x07
     638:	e8 84       	ldd	r14, Y+8	; 0x08
     63a:	f9 84       	ldd	r15, Y+9	; 0x09
     63c:	a7 01       	movw	r20, r14
     63e:	96 01       	movw	r18, r12
     640:	c5 01       	movw	r24, r10
     642:	b4 01       	movw	r22, r8
     644:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__gesf2>
     648:	18 16       	cp	r1, r24
     64a:	a4 f4       	brge	.+40     	; 0x674 <_ZN8Robotarm20MotorSpeedControllerEv+0x50>
			{
				M1_OldPercent += 0.0625 ;
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	40 e8       	ldi	r20, 0x80	; 128
     652:	5d e3       	ldi	r21, 0x3D	; 61
     654:	c7 01       	movw	r24, r14
     656:	b6 01       	movw	r22, r12
     658:	0e 94 89 0b 	call	0x1712	; 0x1712 <__addsf3>
     65c:	ab 01       	movw	r20, r22
     65e:	bc 01       	movw	r22, r24
     660:	4e 83       	std	Y+6, r20	; 0x06
     662:	5f 83       	std	Y+7, r21	; 0x07
     664:	68 87       	std	Y+8, r22	; 0x08
     666:	79 87       	std	Y+9, r23	; 0x09
				tmr1_.setDutyCycleComA( M1_OldPercent );
     668:	ce 01       	movw	r24, r28
     66a:	70 d1       	rcall	.+736    	; 0x94c <_ZN6timer116setDutyCycleComAEf>
				vTaskDelay( xDelay );
     66c:	8a e0       	ldi	r24, 0x0A	; 10
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	d9 d7       	rcall	.+4018   	; 0x1624 <vTaskDelay>
     672:	1b c0       	rjmp	.+54     	; 0x6aa <_ZN8Robotarm20MotorSpeedControllerEv+0x86>
			}
			else if ( M1_Percent < M1_OldPercent )
     674:	a7 01       	movw	r20, r14
     676:	96 01       	movw	r18, r12
     678:	c5 01       	movw	r24, r10
     67a:	b4 01       	movw	r22, r8
     67c:	0e 94 ed 0b 	call	0x17da	; 0x17da <__cmpsf2>
     680:	88 23       	and	r24, r24
     682:	9c f4       	brge	.+38     	; 0x6aa <_ZN8Robotarm20MotorSpeedControllerEv+0x86>
			{
				M1_OldPercent -= 0.0625;
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	40 e8       	ldi	r20, 0x80	; 128
     68a:	5d e3       	ldi	r21, 0x3D	; 61
     68c:	c7 01       	movw	r24, r14
     68e:	b6 01       	movw	r22, r12
     690:	0e 94 88 0b 	call	0x1710	; 0x1710 <__subsf3>
     694:	ab 01       	movw	r20, r22
     696:	bc 01       	movw	r22, r24
     698:	4e 83       	std	Y+6, r20	; 0x06
     69a:	5f 83       	std	Y+7, r21	; 0x07
     69c:	68 87       	std	Y+8, r22	; 0x08
     69e:	79 87       	std	Y+9, r23	; 0x09
				tmr1_.setDutyCycleComA( M1_OldPercent );
     6a0:	ce 01       	movw	r24, r28
     6a2:	54 d1       	rcall	.+680    	; 0x94c <_ZN6timer116setDutyCycleComAEf>
			 	vTaskDelay( xDelay );
     6a4:	8a e0       	ldi	r24, 0x0A	; 10
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	bd d7       	rcall	.+3962   	; 0x1624 <vTaskDelay>
     6aa:	8a 84       	ldd	r8, Y+10	; 0x0a
			}
			
			if ( M2_Percent > M2_OldPercent )
     6ac:	9b 84       	ldd	r9, Y+11	; 0x0b
     6ae:	ac 84       	ldd	r10, Y+12	; 0x0c
     6b0:	bd 84       	ldd	r11, Y+13	; 0x0d
     6b2:	ce 84       	ldd	r12, Y+14	; 0x0e
     6b4:	df 84       	ldd	r13, Y+15	; 0x0f
     6b6:	e8 88       	ldd	r14, Y+16	; 0x10
     6b8:	f9 88       	ldd	r15, Y+17	; 0x11
     6ba:	a7 01       	movw	r20, r14
     6bc:	96 01       	movw	r18, r12
     6be:	c5 01       	movw	r24, r10
     6c0:	b4 01       	movw	r22, r8
     6c2:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__gesf2>
     6c6:	18 16       	cp	r1, r24
     6c8:	a4 f4       	brge	.+40     	; 0x6f2 <_ZN8Robotarm20MotorSpeedControllerEv+0xce>
     6ca:	20 e0       	ldi	r18, 0x00	; 0
			{
				M2_OldPercent += 0.0625;
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	40 e8       	ldi	r20, 0x80	; 128
     6d0:	5d e3       	ldi	r21, 0x3D	; 61
     6d2:	c7 01       	movw	r24, r14
     6d4:	b6 01       	movw	r22, r12
     6d6:	0e 94 89 0b 	call	0x1712	; 0x1712 <__addsf3>
     6da:	ab 01       	movw	r20, r22
     6dc:	bc 01       	movw	r22, r24
     6de:	4e 87       	std	Y+14, r20	; 0x0e
     6e0:	5f 87       	std	Y+15, r21	; 0x0f
     6e2:	68 8b       	std	Y+16, r22	; 0x10
     6e4:	79 8b       	std	Y+17, r23	; 0x11
				tmr1_.setDutyCycleComB( M2_OldPercent );
     6e6:	ce 01       	movw	r24, r28
     6e8:	70 d1       	rcall	.+736    	; 0x9ca <_ZN6timer116setDutyCycleComBEf>
				vTaskDelay( xDelay );
     6ea:	8a e0       	ldi	r24, 0x0A	; 10
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	9a d7       	rcall	.+3892   	; 0x1624 <vTaskDelay>
     6f0:	1b c0       	rjmp	.+54     	; 0x728 <_ZN8Robotarm20MotorSpeedControllerEv+0x104>
     6f2:	a7 01       	movw	r20, r14
			}
			else if ( M2_Percent < M2_OldPercent )
     6f4:	96 01       	movw	r18, r12
     6f6:	c5 01       	movw	r24, r10
     6f8:	b4 01       	movw	r22, r8
     6fa:	0e 94 ed 0b 	call	0x17da	; 0x17da <__cmpsf2>
     6fe:	88 23       	and	r24, r24
     700:	9c f4       	brge	.+38     	; 0x728 <_ZN8Robotarm20MotorSpeedControllerEv+0x104>
     702:	20 e0       	ldi	r18, 0x00	; 0
			{
				M2_OldPercent -= 0.0625;
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	40 e8       	ldi	r20, 0x80	; 128
     708:	5d e3       	ldi	r21, 0x3D	; 61
     70a:	c7 01       	movw	r24, r14
     70c:	b6 01       	movw	r22, r12
     70e:	0e 94 88 0b 	call	0x1710	; 0x1710 <__subsf3>
     712:	ab 01       	movw	r20, r22
     714:	bc 01       	movw	r22, r24
     716:	4e 87       	std	Y+14, r20	; 0x0e
     718:	5f 87       	std	Y+15, r21	; 0x0f
     71a:	68 8b       	std	Y+16, r22	; 0x10
     71c:	79 8b       	std	Y+17, r23	; 0x11
				tmr1_.setDutyCycleComB( M2_OldPercent );
     71e:	ce 01       	movw	r24, r28
     720:	54 d1       	rcall	.+680    	; 0x9ca <_ZN6timer116setDutyCycleComBEf>
				vTaskDelay( xDelay );
     722:	8a e0       	ldi	r24, 0x0A	; 10
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	7e d7       	rcall	.+3836   	; 0x1624 <vTaskDelay>
     728:	8a 88       	ldd	r8, Y+18	; 0x12
			}
			
			if ( M3_Percent > M3_OldPercent )
     72a:	9b 88       	ldd	r9, Y+19	; 0x13
     72c:	ac 88       	ldd	r10, Y+20	; 0x14
     72e:	bd 88       	ldd	r11, Y+21	; 0x15
     730:	ce 88       	ldd	r12, Y+22	; 0x16
     732:	df 88       	ldd	r13, Y+23	; 0x17
     734:	e8 8c       	ldd	r14, Y+24	; 0x18
     736:	f9 8c       	ldd	r15, Y+25	; 0x19
     738:	a7 01       	movw	r20, r14
     73a:	96 01       	movw	r18, r12
     73c:	c5 01       	movw	r24, r10
     73e:	b4 01       	movw	r22, r8
     740:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__gesf2>
     744:	18 16       	cp	r1, r24
     746:	9c f4       	brge	.+38     	; 0x76e <_ZN8Robotarm20MotorSpeedControllerEv+0x14a>
			{
				M3_OldPercent += 0.0625;
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	40 e8       	ldi	r20, 0x80	; 128
     74e:	5d e3       	ldi	r21, 0x3D	; 61
     750:	c7 01       	movw	r24, r14
     752:	b6 01       	movw	r22, r12
     754:	de d7       	rcall	.+4028   	; 0x1712 <__addsf3>
     756:	ab 01       	movw	r20, r22
     758:	bc 01       	movw	r22, r24
     75a:	4e 8b       	std	Y+22, r20	; 0x16
     75c:	5f 8b       	std	Y+23, r21	; 0x17
     75e:	68 8f       	std	Y+24, r22	; 0x18
				tmr1_.setDutyCycleComC( M3_OldPercent );
     760:	79 8f       	std	Y+25, r23	; 0x19
     762:	ce 01       	movw	r24, r28
     764:	71 d1       	rcall	.+738    	; 0xa48 <_ZN6timer116setDutyCycleComCEf>
				vTaskDelay( xDelay );
     766:	8a e0       	ldi	r24, 0x0A	; 10
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	5c d7       	rcall	.+3768   	; 0x1624 <vTaskDelay>
     76c:	1a c0       	rjmp	.+52     	; 0x7a2 <_ZN8Robotarm20MotorSpeedControllerEv+0x17e>
     76e:	a7 01       	movw	r20, r14
			}
			else if ( M3_Percent < M3_OldPercent )
     770:	96 01       	movw	r18, r12
     772:	c5 01       	movw	r24, r10
     774:	b4 01       	movw	r22, r8
     776:	0e 94 ed 0b 	call	0x17da	; 0x17da <__cmpsf2>
     77a:	88 23       	and	r24, r24
     77c:	94 f4       	brge	.+36     	; 0x7a2 <_ZN8Robotarm20MotorSpeedControllerEv+0x17e>
			{
				M3_OldPercent -= 0.0625;
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	40 e8       	ldi	r20, 0x80	; 128
     784:	5d e3       	ldi	r21, 0x3D	; 61
     786:	c7 01       	movw	r24, r14
     788:	b6 01       	movw	r22, r12
     78a:	c2 d7       	rcall	.+3972   	; 0x1710 <__subsf3>
     78c:	ab 01       	movw	r20, r22
     78e:	bc 01       	movw	r22, r24
     790:	4e 8b       	std	Y+22, r20	; 0x16
     792:	5f 8b       	std	Y+23, r21	; 0x17
     794:	68 8f       	std	Y+24, r22	; 0x18
				tmr1_.setDutyCycleComC( M3_OldPercent );
     796:	79 8f       	std	Y+25, r23	; 0x19
     798:	ce 01       	movw	r24, r28
     79a:	56 d1       	rcall	.+684    	; 0xa48 <_ZN6timer116setDutyCycleComCEf>
				vTaskDelay( xDelay );
     79c:	8a e0       	ldi	r24, 0x0A	; 10
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	41 d7       	rcall	.+3714   	; 0x1624 <vTaskDelay>
     7a2:	8a 8c       	ldd	r8, Y+26	; 0x1a
			}
			
			if ( M4_Percent > M4_OldPercent )
     7a4:	9b 8c       	ldd	r9, Y+27	; 0x1b
     7a6:	ac 8c       	ldd	r10, Y+28	; 0x1c
     7a8:	bd 8c       	ldd	r11, Y+29	; 0x1d
     7aa:	ce 8c       	ldd	r12, Y+30	; 0x1e
     7ac:	df 8c       	ldd	r13, Y+31	; 0x1f
     7ae:	e8 a0       	ldd	r14, Y+32	; 0x20
     7b0:	f9 a0       	ldd	r15, Y+33	; 0x21
     7b2:	a7 01       	movw	r20, r14
     7b4:	96 01       	movw	r18, r12
     7b6:	c5 01       	movw	r24, r10
     7b8:	b4 01       	movw	r22, r8
     7ba:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__gesf2>
     7be:	18 16       	cp	r1, r24
     7c0:	9c f4       	brge	.+38     	; 0x7e8 <_ZN8Robotarm20MotorSpeedControllerEv+0x1c4>
			{
				M4_OldPercent += 0.0625;
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e8       	ldi	r20, 0x80	; 128
     7c8:	5d e3       	ldi	r21, 0x3D	; 61
     7ca:	c7 01       	movw	r24, r14
     7cc:	b6 01       	movw	r22, r12
     7ce:	a1 d7       	rcall	.+3906   	; 0x1712 <__addsf3>
     7d0:	ab 01       	movw	r20, r22
     7d2:	bc 01       	movw	r22, r24
     7d4:	4e 8f       	std	Y+30, r20	; 0x1e
     7d6:	5f 8f       	std	Y+31, r21	; 0x1f
				tmr3_.setDutyCycleComA( M4_OldPercent );
     7d8:	68 a3       	std	Y+32, r22	; 0x20
     7da:	79 a3       	std	Y+33, r23	; 0x21
     7dc:	c8 01       	movw	r24, r16
				vTaskDelay( xDelay );
     7de:	90 d1       	rcall	.+800    	; 0xb00 <_ZN6timer316setDutyCycleComAEf>
     7e0:	8a e0       	ldi	r24, 0x0A	; 10
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	1f d7       	rcall	.+3646   	; 0x1624 <vTaskDelay>
     7e6:	19 c0       	rjmp	.+50     	; 0x81a <_ZN8Robotarm20MotorSpeedControllerEv+0x1f6>
			}
			else if ( M4_Percent < M4_OldPercent )
     7e8:	a7 01       	movw	r20, r14
     7ea:	96 01       	movw	r18, r12
     7ec:	c5 01       	movw	r24, r10
     7ee:	b4 01       	movw	r22, r8
     7f0:	f4 d7       	rcall	.+4072   	; 0x17da <__cmpsf2>
     7f2:	88 23       	and	r24, r24
     7f4:	94 f4       	brge	.+36     	; 0x81a <_ZN8Robotarm20MotorSpeedControllerEv+0x1f6>
			{
				M4_OldPercent -= 0.0625;
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	40 e8       	ldi	r20, 0x80	; 128
     7fc:	5d e3       	ldi	r21, 0x3D	; 61
     7fe:	c7 01       	movw	r24, r14
     800:	b6 01       	movw	r22, r12
     802:	86 d7       	rcall	.+3852   	; 0x1710 <__subsf3>
     804:	ab 01       	movw	r20, r22
     806:	bc 01       	movw	r22, r24
     808:	4e 8f       	std	Y+30, r20	; 0x1e
     80a:	5f 8f       	std	Y+31, r21	; 0x1f
     80c:	68 a3       	std	Y+32, r22	; 0x20
				tmr1_.setDutyCycleComA( M4_OldPercent );
     80e:	79 a3       	std	Y+33, r23	; 0x21
     810:	ce 01       	movw	r24, r28
     812:	9c d0       	rcall	.+312    	; 0x94c <_ZN6timer116setDutyCycleComAEf>
				vTaskDelay( xDelay );
     814:	8a e0       	ldi	r24, 0x0A	; 10
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	05 d7       	rcall	.+3594   	; 0x1624 <vTaskDelay>
     81a:	8a a0       	ldd	r8, Y+34	; 0x22
			}
			
			if ( M5_Percent > M5_OldPercent )
     81c:	9b a0       	ldd	r9, Y+35	; 0x23
     81e:	ac a0       	ldd	r10, Y+36	; 0x24
     820:	bd a0       	ldd	r11, Y+37	; 0x25
     822:	ce a0       	ldd	r12, Y+38	; 0x26
     824:	df a0       	ldd	r13, Y+39	; 0x27
     826:	e8 a4       	ldd	r14, Y+40	; 0x28
     828:	f9 a4       	ldd	r15, Y+41	; 0x29
     82a:	a7 01       	movw	r20, r14
     82c:	96 01       	movw	r18, r12
     82e:	c5 01       	movw	r24, r10
     830:	b4 01       	movw	r22, r8
     832:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__gesf2>
     836:	18 16       	cp	r1, r24
     838:	9c f4       	brge	.+38     	; 0x860 <_ZN8Robotarm20MotorSpeedControllerEv+0x23c>
			{
				M5_OldPercent += 0.0625;
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	40 e8       	ldi	r20, 0x80	; 128
     840:	5d e3       	ldi	r21, 0x3D	; 61
     842:	c7 01       	movw	r24, r14
     844:	b6 01       	movw	r22, r12
     846:	65 d7       	rcall	.+3786   	; 0x1712 <__addsf3>
     848:	ab 01       	movw	r20, r22
     84a:	bc 01       	movw	r22, r24
     84c:	4e a3       	std	Y+38, r20	; 0x26
     84e:	5f a3       	std	Y+39, r21	; 0x27
     850:	68 a7       	std	Y+40, r22	; 0x28
				tmr3_.setDutyCycleComB( M5_OldPercent );
     852:	79 a7       	std	Y+41, r23	; 0x29
     854:	c8 01       	movw	r24, r16
     856:	92 d1       	rcall	.+804    	; 0xb7c <_ZN6timer316setDutyCycleComBEf>
				vTaskDelay( xDelay );
     858:	8a e0       	ldi	r24, 0x0A	; 10
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	e3 d6       	rcall	.+3526   	; 0x1624 <vTaskDelay>
     85e:	19 c0       	rjmp	.+50     	; 0x892 <_ZN8Robotarm20MotorSpeedControllerEv+0x26e>
			}
			else if ( M5_Percent < M5_OldPercent )
     860:	a7 01       	movw	r20, r14
     862:	96 01       	movw	r18, r12
     864:	c5 01       	movw	r24, r10
     866:	b4 01       	movw	r22, r8
     868:	b8 d7       	rcall	.+3952   	; 0x17da <__cmpsf2>
     86a:	88 23       	and	r24, r24
     86c:	94 f4       	brge	.+36     	; 0x892 <_ZN8Robotarm20MotorSpeedControllerEv+0x26e>
			{
				M5_OldPercent -= 0.0625;
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	40 e8       	ldi	r20, 0x80	; 128
     874:	5d e3       	ldi	r21, 0x3D	; 61
     876:	c7 01       	movw	r24, r14
     878:	b6 01       	movw	r22, r12
     87a:	4a d7       	rcall	.+3732   	; 0x1710 <__subsf3>
     87c:	ab 01       	movw	r20, r22
     87e:	bc 01       	movw	r22, r24
     880:	4e a3       	std	Y+38, r20	; 0x26
     882:	5f a3       	std	Y+39, r21	; 0x27
     884:	68 a7       	std	Y+40, r22	; 0x28
     886:	79 a7       	std	Y+41, r23	; 0x29
     888:	c8 01       	movw	r24, r16
				tmr3_.setDutyCycleComB( M5_OldPercent );
     88a:	78 d1       	rcall	.+752    	; 0xb7c <_ZN6timer316setDutyCycleComBEf>
     88c:	8a e0       	ldi	r24, 0x0A	; 10
     88e:	90 e0       	ldi	r25, 0x00	; 0
				vTaskDelay( xDelay );
     890:	c9 d6       	rcall	.+3474   	; 0x1624 <vTaskDelay>
     892:	8a a4       	ldd	r8, Y+42	; 0x2a
     894:	9b a4       	ldd	r9, Y+43	; 0x2b
     896:	ac a4       	ldd	r10, Y+44	; 0x2c
			}
			
			if ( M6_Percent > M6_OldPercent )
     898:	bd a4       	ldd	r11, Y+45	; 0x2d
     89a:	ce a4       	ldd	r12, Y+46	; 0x2e
     89c:	df a4       	ldd	r13, Y+47	; 0x2f
     89e:	e8 a8       	ldd	r14, Y+48	; 0x30
     8a0:	f9 a8       	ldd	r15, Y+49	; 0x31
     8a2:	a7 01       	movw	r20, r14
     8a4:	96 01       	movw	r18, r12
     8a6:	c5 01       	movw	r24, r10
     8a8:	b4 01       	movw	r22, r8
     8aa:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__gesf2>
     8ae:	18 16       	cp	r1, r24
     8b0:	9c f4       	brge	.+38     	; 0x8d8 <_ZN8Robotarm20MotorSpeedControllerEv+0x2b4>
			{
				M6_OldPercent += 0.0625;
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	40 e8       	ldi	r20, 0x80	; 128
     8b8:	5d e3       	ldi	r21, 0x3D	; 61
     8ba:	c7 01       	movw	r24, r14
     8bc:	b6 01       	movw	r22, r12
     8be:	29 d7       	rcall	.+3666   	; 0x1712 <__addsf3>
     8c0:	ab 01       	movw	r20, r22
     8c2:	bc 01       	movw	r22, r24
     8c4:	4e a7       	std	Y+46, r20	; 0x2e
     8c6:	5f a7       	std	Y+47, r21	; 0x2f
     8c8:	68 ab       	std	Y+48, r22	; 0x30
				tmr3_.setDutyCycleComC( M6_OldPercent );
     8ca:	79 ab       	std	Y+49, r23	; 0x31
     8cc:	c8 01       	movw	r24, r16
     8ce:	93 d1       	rcall	.+806    	; 0xbf6 <_ZN6timer316setDutyCycleComCEf>
				vTaskDelay( xDelay );
     8d0:	8a e0       	ldi	r24, 0x0A	; 10
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	a7 d6       	rcall	.+3406   	; 0x1624 <vTaskDelay>
     8d6:	aa ce       	rjmp	.-684    	; 0x62c <_ZN8Robotarm20MotorSpeedControllerEv+0x8>
			}
			else if ( M6_Percent < M6_OldPercent )
     8d8:	a7 01       	movw	r20, r14
     8da:	96 01       	movw	r18, r12
     8dc:	c5 01       	movw	r24, r10
     8de:	b4 01       	movw	r22, r8
     8e0:	7c d7       	rcall	.+3832   	; 0x17da <__cmpsf2>
     8e2:	88 23       	and	r24, r24
     8e4:	0c f0       	brlt	.+2      	; 0x8e8 <_ZN8Robotarm20MotorSpeedControllerEv+0x2c4>
     8e6:	a2 ce       	rjmp	.-700    	; 0x62c <_ZN8Robotarm20MotorSpeedControllerEv+0x8>
			{
				M6_OldPercent -= 0.0625;
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	40 e8       	ldi	r20, 0x80	; 128
     8ee:	5d e3       	ldi	r21, 0x3D	; 61
     8f0:	c7 01       	movw	r24, r14
     8f2:	b6 01       	movw	r22, r12
     8f4:	0d d7       	rcall	.+3610   	; 0x1710 <__subsf3>
     8f6:	ab 01       	movw	r20, r22
     8f8:	bc 01       	movw	r22, r24
     8fa:	4e a7       	std	Y+46, r20	; 0x2e
     8fc:	5f a7       	std	Y+47, r21	; 0x2f
     8fe:	68 ab       	std	Y+48, r22	; 0x30
     900:	79 ab       	std	Y+49, r23	; 0x31
     902:	c8 01       	movw	r24, r16
				tmr3_.setDutyCycleComC( M6_OldPercent );
     904:	78 d1       	rcall	.+752    	; 0xbf6 <_ZN6timer316setDutyCycleComCEf>
     906:	8a e0       	ldi	r24, 0x0A	; 10
     908:	90 e0       	ldi	r25, 0x00	; 0
				vTaskDelay( xDelay );
     90a:	8c d6       	rcall	.+3352   	; 0x1624 <vTaskDelay>
     90c:	8f ce       	rjmp	.-738    	; 0x62c <_ZN8Robotarm20MotorSpeedControllerEv+0x8>

0000090e <_ZN8Robotarm14startMotorImplEPv>:
     90e:	8a de       	rcall	.-748    	; 0x624 <_ZN8Robotarm20MotorSpeedControllerEv>

00000910 <_ZN6timer1C1Ev>:
#include <avr/io.h>

timer1::timer1()
{
	// Set B5 to output
	DDRB = DDRB | ( 1 << 5 ) | ( 1 << 6 ) | ( 1 << 7 );
     910:	84 b1       	in	r24, 0x04	; 4
     912:	80 6e       	ori	r24, 0xE0	; 224
     914:	84 b9       	out	0x04, r24	; 4
	
	// Set timer to run in PWM, Phase Correct mode with 50 Hz freq. 
	TCCR1A = ( 1 << COM1A1 ) | ( 1 << COM1B1 ) | ( 1 << COM1C1 ) | ( 0 << WGM10 ) | ( 0 << WGM11 );
     916:	88 ea       	ldi	r24, 0xA8	; 168
     918:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = ( 1 << WGM13 ) | ( 0 << CS10 )  | ( 1 << CS12 );
     91c:	84 e1       	ldi	r24, 0x14	; 20
     91e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	TCCR1C = 0;
     922:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
	ICR1 = 622;
     926:	8e e6       	ldi	r24, 0x6E	; 110
     928:	92 e0       	ldi	r25, 0x02	; 2
     92a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
     92e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
	
	OCR1A = 0;
     932:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     936:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	OCR1B = 0;
     93a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     93e:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
	OCR1C = 0;
     942:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <__TEXT_REGION_LENGTH__+0x70008d>
     946:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x70008c>
     94a:	08 95       	ret

0000094c <_ZN6timer116setDutyCycleComAEf>:
}

void timer1::setDutyCycleComA( float dutyCycle )
{
     94c:	cf 92       	push	r12
     94e:	df 92       	push	r13
     950:	ef 92       	push	r14
     952:	ff 92       	push	r15
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	00 d0       	rcall	.+0      	; 0x95a <_ZN6timer116setDutyCycleComAEf+0xe>
     95a:	1f 92       	push	r1
     95c:	cd b7       	in	r28, 0x3d	; 61
     95e:	de b7       	in	r29, 0x3e	; 62
     960:	6a 01       	movw	r12, r20
     962:	7b 01       	movw	r14, r22
	volatile float percent = ICR1/100;
     964:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
     968:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
     96c:	36 95       	lsr	r19
     96e:	27 95       	ror	r18
     970:	36 95       	lsr	r19
     972:	27 95       	ror	r18
     974:	ab e7       	ldi	r26, 0x7B	; 123
     976:	b4 e1       	ldi	r27, 0x14	; 20
     978:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__umulhisi3>
     97c:	96 95       	lsr	r25
     97e:	87 95       	ror	r24
     980:	bc 01       	movw	r22, r24
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	c1 d7       	rcall	.+3970   	; 0x190a <__floatunsisf>
     988:	69 83       	std	Y+1, r22	; 0x01
     98a:	7a 83       	std	Y+2, r23	; 0x02
     98c:	8b 83       	std	Y+3, r24	; 0x03
     98e:	9c 83       	std	Y+4, r25	; 0x04
	OCR1A = (uint8_t)percent*dutyCycle;
     990:	69 81       	ldd	r22, Y+1	; 0x01
     992:	7a 81       	ldd	r23, Y+2	; 0x02
     994:	8b 81       	ldd	r24, Y+3	; 0x03
     996:	9c 81       	ldd	r25, Y+4	; 0x04
     998:	8c d7       	rcall	.+3864   	; 0x18b2 <__fixunssfsi>
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	b6 d7       	rcall	.+3948   	; 0x190e <__floatsisf>
     9a2:	a7 01       	movw	r20, r14
     9a4:	96 01       	movw	r18, r12
     9a6:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__mulsf3>
     9aa:	83 d7       	rcall	.+3846   	; 0x18b2 <__fixunssfsi>
     9ac:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     9b0:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
}
     9b4:	0f 90       	pop	r0
     9b6:	0f 90       	pop	r0
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	ff 90       	pop	r15
     9c2:	ef 90       	pop	r14
     9c4:	df 90       	pop	r13
     9c6:	cf 90       	pop	r12
     9c8:	08 95       	ret

000009ca <_ZN6timer116setDutyCycleComBEf>:

void timer1::setDutyCycleComB( float dutyCycle )
{
     9ca:	cf 92       	push	r12
     9cc:	df 92       	push	r13
     9ce:	ef 92       	push	r14
     9d0:	ff 92       	push	r15
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	00 d0       	rcall	.+0      	; 0x9d8 <_ZN6timer116setDutyCycleComBEf+0xe>
     9d8:	1f 92       	push	r1
     9da:	cd b7       	in	r28, 0x3d	; 61
     9dc:	de b7       	in	r29, 0x3e	; 62
     9de:	6a 01       	movw	r12, r20
     9e0:	7b 01       	movw	r14, r22
	volatile float percent = ICR1/100;
     9e2:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
     9e6:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
     9ea:	36 95       	lsr	r19
     9ec:	27 95       	ror	r18
     9ee:	36 95       	lsr	r19
     9f0:	27 95       	ror	r18
     9f2:	ab e7       	ldi	r26, 0x7B	; 123
     9f4:	b4 e1       	ldi	r27, 0x14	; 20
     9f6:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__umulhisi3>
     9fa:	96 95       	lsr	r25
     9fc:	87 95       	ror	r24
     9fe:	bc 01       	movw	r22, r24
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	82 d7       	rcall	.+3844   	; 0x190a <__floatunsisf>
     a06:	69 83       	std	Y+1, r22	; 0x01
     a08:	7a 83       	std	Y+2, r23	; 0x02
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	9c 83       	std	Y+4, r25	; 0x04
	OCR1B = (uint8_t)percent*dutyCycle;
     a0e:	69 81       	ldd	r22, Y+1	; 0x01
     a10:	7a 81       	ldd	r23, Y+2	; 0x02
     a12:	8b 81       	ldd	r24, Y+3	; 0x03
     a14:	9c 81       	ldd	r25, Y+4	; 0x04
     a16:	4d d7       	rcall	.+3738   	; 0x18b2 <__fixunssfsi>
     a18:	70 e0       	ldi	r23, 0x00	; 0
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	77 d7       	rcall	.+3822   	; 0x190e <__floatsisf>
     a20:	a7 01       	movw	r20, r14
     a22:	96 01       	movw	r18, r12
     a24:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__mulsf3>
     a28:	44 d7       	rcall	.+3720   	; 0x18b2 <__fixunssfsi>
     a2a:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     a2e:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
}
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	ff 90       	pop	r15
     a40:	ef 90       	pop	r14
     a42:	df 90       	pop	r13
     a44:	cf 90       	pop	r12
     a46:	08 95       	ret

00000a48 <_ZN6timer116setDutyCycleComCEf>:

void timer1::setDutyCycleComC( float dutyCycle )
{
     a48:	cf 92       	push	r12
     a4a:	df 92       	push	r13
     a4c:	ef 92       	push	r14
     a4e:	ff 92       	push	r15
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	00 d0       	rcall	.+0      	; 0xa56 <_ZN6timer116setDutyCycleComCEf+0xe>
     a56:	1f 92       	push	r1
     a58:	cd b7       	in	r28, 0x3d	; 61
     a5a:	de b7       	in	r29, 0x3e	; 62
     a5c:	6a 01       	movw	r12, r20
     a5e:	7b 01       	movw	r14, r22
	volatile float percent = ICR1/100;
     a60:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
     a64:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
     a68:	36 95       	lsr	r19
     a6a:	27 95       	ror	r18
     a6c:	36 95       	lsr	r19
     a6e:	27 95       	ror	r18
     a70:	ab e7       	ldi	r26, 0x7B	; 123
     a72:	b4 e1       	ldi	r27, 0x14	; 20
     a74:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__umulhisi3>
     a78:	96 95       	lsr	r25
     a7a:	87 95       	ror	r24
     a7c:	bc 01       	movw	r22, r24
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	43 d7       	rcall	.+3718   	; 0x190a <__floatunsisf>
     a84:	69 83       	std	Y+1, r22	; 0x01
     a86:	7a 83       	std	Y+2, r23	; 0x02
     a88:	8b 83       	std	Y+3, r24	; 0x03
     a8a:	9c 83       	std	Y+4, r25	; 0x04
	OCR1C = (uint8_t)percent*dutyCycle;
     a8c:	69 81       	ldd	r22, Y+1	; 0x01
     a8e:	7a 81       	ldd	r23, Y+2	; 0x02
     a90:	8b 81       	ldd	r24, Y+3	; 0x03
     a92:	9c 81       	ldd	r25, Y+4	; 0x04
     a94:	0e d7       	rcall	.+3612   	; 0x18b2 <__fixunssfsi>
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	38 d7       	rcall	.+3696   	; 0x190e <__floatsisf>
     a9e:	a7 01       	movw	r20, r14
     aa0:	96 01       	movw	r18, r12
     aa2:	e9 d7       	rcall	.+4050   	; 0x1a76 <__mulsf3>
     aa4:	06 d7       	rcall	.+3596   	; 0x18b2 <__fixunssfsi>
     aa6:	70 93 8d 00 	sts	0x008D, r23	; 0x80008d <__TEXT_REGION_LENGTH__+0x70008d>
     aaa:	60 93 8c 00 	sts	0x008C, r22	; 0x80008c <__TEXT_REGION_LENGTH__+0x70008c>
     aae:	0f 90       	pop	r0
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	ff 90       	pop	r15
     abc:	ef 90       	pop	r14
     abe:	df 90       	pop	r13
     ac0:	cf 90       	pop	r12
     ac2:	08 95       	ret

00000ac4 <_ZN6timer3C1Ev>:
#include <avr/io.h>

timer3::timer3()
{
	// Set B5 to output
	DDRE = DDRE | ( 1 << 3 ) | ( 1 << 4 ) | ( 1 << 5 );
     ac4:	8d b1       	in	r24, 0x0d	; 13
     ac6:	88 63       	ori	r24, 0x38	; 56
     ac8:	8d b9       	out	0x0d, r24	; 13
	
	// Set timer to run in PWM, Phase Correct mode with 50 Hz freq.
	TCCR3A = ( 1 << COM3A1 ) | ( 1 << COM3B1 ) | ( 1 << COM3C1 ) | ( 0 << WGM30 ) | ( 0 << WGM31 );
     aca:	88 ea       	ldi	r24, 0xA8	; 168
     acc:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
	TCCR3B = ( 1 << WGM33 ) | ( 0 << CS30 )  | ( 1 << CS32 );
     ad0:	84 e1       	ldi	r24, 0x14	; 20
     ad2:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	TCCR3C = 0;
     ad6:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__TEXT_REGION_LENGTH__+0x700092>
	ICR3 = 622;
     ada:	8e e6       	ldi	r24, 0x6E	; 110
     adc:	92 e0       	ldi	r25, 0x02	; 2
     ade:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
     ae2:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
	
	OCR3A = 0;
     ae6:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     aea:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
	OCR3B = 0;
     aee:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
     af2:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
	OCR3C = 0;
     af6:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <__TEXT_REGION_LENGTH__+0x70009d>
     afa:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <__TEXT_REGION_LENGTH__+0x70009c>
     afe:	08 95       	ret

00000b00 <_ZN6timer316setDutyCycleComAEf>:
}

void timer3::setDutyCycleComA( float dutyCycle )
{
     b00:	cf 92       	push	r12
     b02:	df 92       	push	r13
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	00 d0       	rcall	.+0      	; 0xb0e <_ZN6timer316setDutyCycleComAEf+0xe>
     b0e:	1f 92       	push	r1
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	6a 01       	movw	r12, r20
     b16:	7b 01       	movw	r14, r22
	volatile float percent = ICR3/100;
     b18:	20 91 96 00 	lds	r18, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
     b1c:	30 91 97 00 	lds	r19, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
     b20:	36 95       	lsr	r19
     b22:	27 95       	ror	r18
     b24:	36 95       	lsr	r19
     b26:	27 95       	ror	r18
     b28:	ab e7       	ldi	r26, 0x7B	; 123
     b2a:	b4 e1       	ldi	r27, 0x14	; 20
     b2c:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__umulhisi3>
     b30:	96 95       	lsr	r25
     b32:	87 95       	ror	r24
     b34:	bc 01       	movw	r22, r24
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	e7 d6       	rcall	.+3534   	; 0x190a <__floatunsisf>
     b3c:	69 83       	std	Y+1, r22	; 0x01
     b3e:	7a 83       	std	Y+2, r23	; 0x02
     b40:	8b 83       	std	Y+3, r24	; 0x03
     b42:	9c 83       	std	Y+4, r25	; 0x04
	OCR3A = (uint8_t)percent*dutyCycle;
     b44:	69 81       	ldd	r22, Y+1	; 0x01
     b46:	7a 81       	ldd	r23, Y+2	; 0x02
     b48:	8b 81       	ldd	r24, Y+3	; 0x03
     b4a:	9c 81       	ldd	r25, Y+4	; 0x04
     b4c:	b2 d6       	rcall	.+3428   	; 0x18b2 <__fixunssfsi>
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	dc d6       	rcall	.+3512   	; 0x190e <__floatsisf>
     b56:	a7 01       	movw	r20, r14
     b58:	96 01       	movw	r18, r12
     b5a:	8d d7       	rcall	.+3866   	; 0x1a76 <__mulsf3>
     b5c:	aa d6       	rcall	.+3412   	; 0x18b2 <__fixunssfsi>
     b5e:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     b62:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
}
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	0f 90       	pop	r0
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	ff 90       	pop	r15
     b74:	ef 90       	pop	r14
     b76:	df 90       	pop	r13
     b78:	cf 90       	pop	r12
     b7a:	08 95       	ret

00000b7c <_ZN6timer316setDutyCycleComBEf>:

void timer3::setDutyCycleComB( float dutyCycle )
{
     b7c:	cf 92       	push	r12
     b7e:	df 92       	push	r13
     b80:	ef 92       	push	r14
     b82:	ff 92       	push	r15
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	00 d0       	rcall	.+0      	; 0xb8a <_ZN6timer316setDutyCycleComBEf+0xe>
     b8a:	1f 92       	push	r1
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	6a 01       	movw	r12, r20
     b92:	7b 01       	movw	r14, r22
	volatile float percent = ICR3/100;
     b94:	20 91 96 00 	lds	r18, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
     b98:	30 91 97 00 	lds	r19, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
     b9c:	36 95       	lsr	r19
     b9e:	27 95       	ror	r18
     ba0:	36 95       	lsr	r19
     ba2:	27 95       	ror	r18
     ba4:	ab e7       	ldi	r26, 0x7B	; 123
     ba6:	b4 e1       	ldi	r27, 0x14	; 20
     ba8:	c9 d7       	rcall	.+3986   	; 0x1b3c <__umulhisi3>
     baa:	96 95       	lsr	r25
     bac:	87 95       	ror	r24
     bae:	bc 01       	movw	r22, r24
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	aa d6       	rcall	.+3412   	; 0x190a <__floatunsisf>
     bb6:	69 83       	std	Y+1, r22	; 0x01
     bb8:	7a 83       	std	Y+2, r23	; 0x02
     bba:	8b 83       	std	Y+3, r24	; 0x03
     bbc:	9c 83       	std	Y+4, r25	; 0x04
	OCR3B = (uint8_t)percent*dutyCycle;
     bbe:	69 81       	ldd	r22, Y+1	; 0x01
     bc0:	7a 81       	ldd	r23, Y+2	; 0x02
     bc2:	8b 81       	ldd	r24, Y+3	; 0x03
     bc4:	9c 81       	ldd	r25, Y+4	; 0x04
     bc6:	75 d6       	rcall	.+3306   	; 0x18b2 <__fixunssfsi>
     bc8:	70 e0       	ldi	r23, 0x00	; 0
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9f d6       	rcall	.+3390   	; 0x190e <__floatsisf>
     bd0:	a7 01       	movw	r20, r14
     bd2:	96 01       	movw	r18, r12
     bd4:	50 d7       	rcall	.+3744   	; 0x1a76 <__mulsf3>
     bd6:	6d d6       	rcall	.+3290   	; 0x18b2 <__fixunssfsi>
     bd8:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
     bdc:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
}
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	df 90       	pop	r13
     bf2:	cf 90       	pop	r12
     bf4:	08 95       	ret

00000bf6 <_ZN6timer316setDutyCycleComCEf>:

void timer3::setDutyCycleComC( float dutyCycle )
{
     bf6:	cf 92       	push	r12
     bf8:	df 92       	push	r13
     bfa:	ef 92       	push	r14
     bfc:	ff 92       	push	r15
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	00 d0       	rcall	.+0      	; 0xc04 <_ZN6timer316setDutyCycleComCEf+0xe>
     c04:	1f 92       	push	r1
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	6a 01       	movw	r12, r20
     c0c:	7b 01       	movw	r14, r22
	volatile float percent = ICR3/100;
     c0e:	20 91 96 00 	lds	r18, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
     c12:	30 91 97 00 	lds	r19, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
     c16:	36 95       	lsr	r19
     c18:	27 95       	ror	r18
     c1a:	36 95       	lsr	r19
     c1c:	27 95       	ror	r18
     c1e:	ab e7       	ldi	r26, 0x7B	; 123
     c20:	b4 e1       	ldi	r27, 0x14	; 20
     c22:	8c d7       	rcall	.+3864   	; 0x1b3c <__umulhisi3>
     c24:	96 95       	lsr	r25
     c26:	87 95       	ror	r24
     c28:	bc 01       	movw	r22, r24
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	6d d6       	rcall	.+3290   	; 0x190a <__floatunsisf>
     c30:	69 83       	std	Y+1, r22	; 0x01
     c32:	7a 83       	std	Y+2, r23	; 0x02
     c34:	8b 83       	std	Y+3, r24	; 0x03
     c36:	9c 83       	std	Y+4, r25	; 0x04
	OCR3C = (uint8_t)percent*dutyCycle;
     c38:	69 81       	ldd	r22, Y+1	; 0x01
     c3a:	7a 81       	ldd	r23, Y+2	; 0x02
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	9c 81       	ldd	r25, Y+4	; 0x04
     c40:	38 d6       	rcall	.+3184   	; 0x18b2 <__fixunssfsi>
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	62 d6       	rcall	.+3268   	; 0x190e <__floatsisf>
     c4a:	a7 01       	movw	r20, r14
     c4c:	96 01       	movw	r18, r12
     c4e:	13 d7       	rcall	.+3622   	; 0x1a76 <__mulsf3>
     c50:	30 d6       	rcall	.+3168   	; 0x18b2 <__fixunssfsi>
     c52:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <__TEXT_REGION_LENGTH__+0x70009d>
     c56:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <__TEXT_REGION_LENGTH__+0x70009c>
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	ff 90       	pop	r15
     c68:	ef 90       	pop	r14
     c6a:	df 90       	pop	r13
     c6c:	cf 90       	pop	r12
     c6e:	08 95       	ret

00000c70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     c70:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     c72:	03 96       	adiw	r24, 0x03	; 3
     c74:	92 83       	std	Z+2, r25	; 0x02
     c76:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     c78:	2f ef       	ldi	r18, 0xFF	; 255
     c7a:	3f ef       	ldi	r19, 0xFF	; 255
     c7c:	34 83       	std	Z+4, r19	; 0x04
     c7e:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     c80:	96 83       	std	Z+6, r25	; 0x06
     c82:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     c84:	90 87       	std	Z+8, r25	; 0x08
     c86:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     c88:	10 82       	st	Z, r1
     c8a:	08 95       	ret

00000c8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     c8c:	fc 01       	movw	r30, r24
     c8e:	11 86       	std	Z+9, r1	; 0x09
     c90:	10 86       	std	Z+8, r1	; 0x08
     c92:	08 95       	ret

00000c94 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	fc 01       	movw	r30, r24
     c9a:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     c9c:	21 81       	ldd	r18, Z+1	; 0x01
     c9e:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     ca0:	e9 01       	movw	r28, r18
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	9b 81       	ldd	r25, Y+3	; 0x03
     ca6:	13 96       	adiw	r26, 0x03	; 3
     ca8:	9c 93       	st	X, r25
     caa:	8e 93       	st	-X, r24
     cac:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     cae:	81 81       	ldd	r24, Z+1	; 0x01
     cb0:	92 81       	ldd	r25, Z+2	; 0x02
     cb2:	15 96       	adiw	r26, 0x05	; 5
     cb4:	9c 93       	st	X, r25
     cb6:	8e 93       	st	-X, r24
     cb8:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	9b 81       	ldd	r25, Y+3	; 0x03
     cbe:	ec 01       	movw	r28, r24
     cc0:	7d 83       	std	Y+5, r23	; 0x05
     cc2:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     cc4:	e9 01       	movw	r28, r18
     cc6:	7b 83       	std	Y+3, r23	; 0x03
     cc8:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     cca:	72 83       	std	Z+2, r23	; 0x02
     ccc:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     cce:	19 96       	adiw	r26, 0x09	; 9
     cd0:	fc 93       	st	X, r31
     cd2:	ee 93       	st	-X, r30
     cd4:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     cd6:	80 81       	ld	r24, Z
     cd8:	8f 5f       	subi	r24, 0xFF	; 255
     cda:	80 83       	st	Z, r24
}
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     ce8:	48 81       	ld	r20, Y
     cea:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     cec:	4f 3f       	cpi	r20, 0xFF	; 255
     cee:	2f ef       	ldi	r18, 0xFF	; 255
     cf0:	52 07       	cpc	r21, r18
     cf2:	31 f4       	brne	.+12     	; 0xd00 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     cf4:	dc 01       	movw	r26, r24
     cf6:	17 96       	adiw	r26, 0x07	; 7
     cf8:	ed 91       	ld	r30, X+
     cfa:	fc 91       	ld	r31, X
     cfc:	18 97       	sbiw	r26, 0x08	; 8
     cfe:	0d c0       	rjmp	.+26     	; 0xd1a <vListInsert+0x38>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     d00:	fc 01       	movw	r30, r24
     d02:	33 96       	adiw	r30, 0x03	; 3
     d04:	03 c0       	rjmp	.+6      	; 0xd0c <vListInsert+0x2a>
     d06:	02 80       	ldd	r0, Z+2	; 0x02
     d08:	f3 81       	ldd	r31, Z+3	; 0x03
     d0a:	e0 2d       	mov	r30, r0
     d0c:	a2 81       	ldd	r26, Z+2	; 0x02
     d0e:	b3 81       	ldd	r27, Z+3	; 0x03
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	42 17       	cp	r20, r18
     d16:	53 07       	cpc	r21, r19
     d18:	b0 f7       	brcc	.-20     	; 0xd06 <vListInsert+0x24>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     d1a:	a2 81       	ldd	r26, Z+2	; 0x02
     d1c:	b3 81       	ldd	r27, Z+3	; 0x03
     d1e:	bb 83       	std	Y+3, r27	; 0x03
     d20:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     d22:	15 96       	adiw	r26, 0x05	; 5
     d24:	dc 93       	st	X, r29
     d26:	ce 93       	st	-X, r28
     d28:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     d2a:	fd 83       	std	Y+5, r31	; 0x05
     d2c:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     d2e:	d3 83       	std	Z+3, r29	; 0x03
     d30:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     d32:	99 87       	std	Y+9, r25	; 0x09
     d34:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     d36:	fc 01       	movw	r30, r24
     d38:	20 81       	ld	r18, Z
     d3a:	2f 5f       	subi	r18, 0xFF	; 255
     d3c:	20 83       	st	Z, r18
}
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	08 95       	ret

00000d44 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     d44:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     d46:	a2 81       	ldd	r26, Z+2	; 0x02
     d48:	b3 81       	ldd	r27, Z+3	; 0x03
     d4a:	84 81       	ldd	r24, Z+4	; 0x04
     d4c:	95 81       	ldd	r25, Z+5	; 0x05
     d4e:	15 96       	adiw	r26, 0x05	; 5
     d50:	9c 93       	st	X, r25
     d52:	8e 93       	st	-X, r24
     d54:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     d56:	a4 81       	ldd	r26, Z+4	; 0x04
     d58:	b5 81       	ldd	r27, Z+5	; 0x05
     d5a:	82 81       	ldd	r24, Z+2	; 0x02
     d5c:	93 81       	ldd	r25, Z+3	; 0x03
     d5e:	13 96       	adiw	r26, 0x03	; 3
     d60:	9c 93       	st	X, r25
     d62:	8e 93       	st	-X, r24
     d64:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     d66:	a0 85       	ldd	r26, Z+8	; 0x08
     d68:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     d6a:	11 96       	adiw	r26, 0x01	; 1
     d6c:	8d 91       	ld	r24, X+
     d6e:	9c 91       	ld	r25, X
     d70:	12 97       	sbiw	r26, 0x02	; 2
     d72:	e8 17       	cp	r30, r24
     d74:	f9 07       	cpc	r31, r25
     d76:	31 f4       	brne	.+12     	; 0xd84 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     d78:	84 81       	ldd	r24, Z+4	; 0x04
     d7a:	95 81       	ldd	r25, Z+5	; 0x05
     d7c:	12 96       	adiw	r26, 0x02	; 2
     d7e:	9c 93       	st	X, r25
     d80:	8e 93       	st	-X, r24
     d82:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     d84:	11 86       	std	Z+9, r1	; 0x09
     d86:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     d88:	8c 91       	ld	r24, X
     d8a:	81 50       	subi	r24, 0x01	; 1
     d8c:	8c 93       	st	X, r24
     d8e:	08 95       	ret

00000d90 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     d90:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     d94:	89 ef       	ldi	r24, 0xF9	; 249
     d96:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     d9a:	8b e0       	ldi	r24, 0x0B	; 11
     d9c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
     da0:	e3 e7       	ldi	r30, 0x73	; 115
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	82 60       	ori	r24, 0x02	; 2
     da8:	80 83       	st	Z, r24
     daa:	08 95       	ret

00000dac <pxPortInitialiseStack>:
     dac:	31 e1       	ldi	r19, 0x11	; 17
     dae:	fc 01       	movw	r30, r24
     db0:	30 83       	st	Z, r19
     db2:	31 97       	sbiw	r30, 0x01	; 1
     db4:	22 e2       	ldi	r18, 0x22	; 34
     db6:	20 83       	st	Z, r18
     db8:	31 97       	sbiw	r30, 0x01	; 1
     dba:	a3 e3       	ldi	r26, 0x33	; 51
     dbc:	a0 83       	st	Z, r26
     dbe:	31 97       	sbiw	r30, 0x01	; 1
     dc0:	60 83       	st	Z, r22
     dc2:	31 97       	sbiw	r30, 0x01	; 1
     dc4:	70 83       	st	Z, r23
     dc6:	31 97       	sbiw	r30, 0x01	; 1
     dc8:	10 82       	st	Z, r1
     dca:	31 97       	sbiw	r30, 0x01	; 1
     dcc:	10 82       	st	Z, r1
     dce:	31 97       	sbiw	r30, 0x01	; 1
     dd0:	60 e8       	ldi	r22, 0x80	; 128
     dd2:	60 83       	st	Z, r22
     dd4:	31 97       	sbiw	r30, 0x01	; 1
     dd6:	10 82       	st	Z, r1
     dd8:	31 97       	sbiw	r30, 0x01	; 1
     dda:	10 82       	st	Z, r1
     ddc:	31 97       	sbiw	r30, 0x01	; 1
     dde:	10 82       	st	Z, r1
     de0:	31 97       	sbiw	r30, 0x01	; 1
     de2:	62 e0       	ldi	r22, 0x02	; 2
     de4:	60 83       	st	Z, r22
     de6:	31 97       	sbiw	r30, 0x01	; 1
     de8:	63 e0       	ldi	r22, 0x03	; 3
     dea:	60 83       	st	Z, r22
     dec:	31 97       	sbiw	r30, 0x01	; 1
     dee:	64 e0       	ldi	r22, 0x04	; 4
     df0:	60 83       	st	Z, r22
     df2:	31 97       	sbiw	r30, 0x01	; 1
     df4:	65 e0       	ldi	r22, 0x05	; 5
     df6:	60 83       	st	Z, r22
     df8:	31 97       	sbiw	r30, 0x01	; 1
     dfa:	66 e0       	ldi	r22, 0x06	; 6
     dfc:	60 83       	st	Z, r22
     dfe:	31 97       	sbiw	r30, 0x01	; 1
     e00:	67 e0       	ldi	r22, 0x07	; 7
     e02:	60 83       	st	Z, r22
     e04:	31 97       	sbiw	r30, 0x01	; 1
     e06:	68 e0       	ldi	r22, 0x08	; 8
     e08:	60 83       	st	Z, r22
     e0a:	31 97       	sbiw	r30, 0x01	; 1
     e0c:	69 e0       	ldi	r22, 0x09	; 9
     e0e:	60 83       	st	Z, r22
     e10:	31 97       	sbiw	r30, 0x01	; 1
     e12:	60 e1       	ldi	r22, 0x10	; 16
     e14:	60 83       	st	Z, r22
     e16:	31 97       	sbiw	r30, 0x01	; 1
     e18:	30 83       	st	Z, r19
     e1a:	31 97       	sbiw	r30, 0x01	; 1
     e1c:	32 e1       	ldi	r19, 0x12	; 18
     e1e:	30 83       	st	Z, r19
     e20:	31 97       	sbiw	r30, 0x01	; 1
     e22:	33 e1       	ldi	r19, 0x13	; 19
     e24:	30 83       	st	Z, r19
     e26:	31 97       	sbiw	r30, 0x01	; 1
     e28:	34 e1       	ldi	r19, 0x14	; 20
     e2a:	30 83       	st	Z, r19
     e2c:	31 97       	sbiw	r30, 0x01	; 1
     e2e:	35 e1       	ldi	r19, 0x15	; 21
     e30:	30 83       	st	Z, r19
     e32:	31 97       	sbiw	r30, 0x01	; 1
     e34:	36 e1       	ldi	r19, 0x16	; 22
     e36:	30 83       	st	Z, r19
     e38:	31 97       	sbiw	r30, 0x01	; 1
     e3a:	37 e1       	ldi	r19, 0x17	; 23
     e3c:	30 83       	st	Z, r19
     e3e:	31 97       	sbiw	r30, 0x01	; 1
     e40:	38 e1       	ldi	r19, 0x18	; 24
     e42:	30 83       	st	Z, r19
     e44:	31 97       	sbiw	r30, 0x01	; 1
     e46:	39 e1       	ldi	r19, 0x19	; 25
     e48:	30 83       	st	Z, r19
     e4a:	31 97       	sbiw	r30, 0x01	; 1
     e4c:	30 e2       	ldi	r19, 0x20	; 32
     e4e:	30 83       	st	Z, r19
     e50:	31 97       	sbiw	r30, 0x01	; 1
     e52:	31 e2       	ldi	r19, 0x21	; 33
     e54:	30 83       	st	Z, r19
     e56:	31 97       	sbiw	r30, 0x01	; 1
     e58:	20 83       	st	Z, r18
     e5a:	31 97       	sbiw	r30, 0x01	; 1
     e5c:	23 e2       	ldi	r18, 0x23	; 35
     e5e:	20 83       	st	Z, r18
     e60:	31 97       	sbiw	r30, 0x01	; 1
     e62:	40 83       	st	Z, r20
     e64:	31 97       	sbiw	r30, 0x01	; 1
     e66:	50 83       	st	Z, r21
     e68:	31 97       	sbiw	r30, 0x01	; 1
     e6a:	26 e2       	ldi	r18, 0x26	; 38
     e6c:	20 83       	st	Z, r18
     e6e:	31 97       	sbiw	r30, 0x01	; 1
     e70:	27 e2       	ldi	r18, 0x27	; 39
     e72:	20 83       	st	Z, r18
     e74:	31 97       	sbiw	r30, 0x01	; 1
     e76:	28 e2       	ldi	r18, 0x28	; 40
     e78:	20 83       	st	Z, r18
     e7a:	31 97       	sbiw	r30, 0x01	; 1
     e7c:	29 e2       	ldi	r18, 0x29	; 41
     e7e:	20 83       	st	Z, r18
     e80:	31 97       	sbiw	r30, 0x01	; 1
     e82:	20 e3       	ldi	r18, 0x30	; 48
     e84:	20 83       	st	Z, r18
     e86:	31 97       	sbiw	r30, 0x01	; 1
     e88:	21 e3       	ldi	r18, 0x31	; 49
     e8a:	20 83       	st	Z, r18
     e8c:	89 97       	sbiw	r24, 0x29	; 41
     e8e:	08 95       	ret

00000e90 <xPortStartScheduler>:
     e90:	7f df       	rcall	.-258    	; 0xd90 <prvSetupTimerInterrupt>
     e92:	a0 91 e1 15 	lds	r26, 0x15E1	; 0x8015e1 <pxCurrentTCB>
     e96:	b0 91 e2 15 	lds	r27, 0x15E2	; 0x8015e2 <pxCurrentTCB+0x1>
     e9a:	cd 91       	ld	r28, X+
     e9c:	cd bf       	out	0x3d, r28	; 61
     e9e:	dd 91       	ld	r29, X+
     ea0:	de bf       	out	0x3e, r29	; 62
     ea2:	ff 91       	pop	r31
     ea4:	ef 91       	pop	r30
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	bf 91       	pop	r27
     eac:	af 91       	pop	r26
     eae:	9f 91       	pop	r25
     eb0:	8f 91       	pop	r24
     eb2:	7f 91       	pop	r23
     eb4:	6f 91       	pop	r22
     eb6:	5f 91       	pop	r21
     eb8:	4f 91       	pop	r20
     eba:	3f 91       	pop	r19
     ebc:	2f 91       	pop	r18
     ebe:	1f 91       	pop	r17
     ec0:	0f 91       	pop	r16
     ec2:	ff 90       	pop	r15
     ec4:	ef 90       	pop	r14
     ec6:	df 90       	pop	r13
     ec8:	cf 90       	pop	r12
     eca:	bf 90       	pop	r11
     ecc:	af 90       	pop	r10
     ece:	9f 90       	pop	r9
     ed0:	8f 90       	pop	r8
     ed2:	7f 90       	pop	r7
     ed4:	6f 90       	pop	r6
     ed6:	5f 90       	pop	r5
     ed8:	4f 90       	pop	r4
     eda:	3f 90       	pop	r3
     edc:	2f 90       	pop	r2
     ede:	1f 90       	pop	r1
     ee0:	0f 90       	pop	r0
     ee2:	0c be       	out	0x3c, r0	; 60
     ee4:	0f 90       	pop	r0
     ee6:	0b be       	out	0x3b, r0	; 59
     ee8:	0f 90       	pop	r0
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	0f 90       	pop	r0
     eee:	08 95       	ret
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	08 95       	ret

00000ef4 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     ef4:	0f 92       	push	r0
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	f8 94       	cli
     efa:	0f 92       	push	r0
     efc:	0b b6       	in	r0, 0x3b	; 59
     efe:	0f 92       	push	r0
     f00:	0c b6       	in	r0, 0x3c	; 60
     f02:	0f 92       	push	r0
     f04:	1f 92       	push	r1
     f06:	11 24       	eor	r1, r1
     f08:	2f 92       	push	r2
     f0a:	3f 92       	push	r3
     f0c:	4f 92       	push	r4
     f0e:	5f 92       	push	r5
     f10:	6f 92       	push	r6
     f12:	7f 92       	push	r7
     f14:	8f 92       	push	r8
     f16:	9f 92       	push	r9
     f18:	af 92       	push	r10
     f1a:	bf 92       	push	r11
     f1c:	cf 92       	push	r12
     f1e:	df 92       	push	r13
     f20:	ef 92       	push	r14
     f22:	ff 92       	push	r15
     f24:	0f 93       	push	r16
     f26:	1f 93       	push	r17
     f28:	2f 93       	push	r18
     f2a:	3f 93       	push	r19
     f2c:	4f 93       	push	r20
     f2e:	5f 93       	push	r21
     f30:	6f 93       	push	r22
     f32:	7f 93       	push	r23
     f34:	8f 93       	push	r24
     f36:	9f 93       	push	r25
     f38:	af 93       	push	r26
     f3a:	bf 93       	push	r27
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	ef 93       	push	r30
     f42:	ff 93       	push	r31
     f44:	a0 91 e1 15 	lds	r26, 0x15E1	; 0x8015e1 <pxCurrentTCB>
     f48:	b0 91 e2 15 	lds	r27, 0x15E2	; 0x8015e2 <pxCurrentTCB+0x1>
     f4c:	0d b6       	in	r0, 0x3d	; 61
     f4e:	0d 92       	st	X+, r0
     f50:	0e b6       	in	r0, 0x3e	; 62
     f52:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     f54:	84 d3       	rcall	.+1800   	; 0x165e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     f56:	a0 91 e1 15 	lds	r26, 0x15E1	; 0x8015e1 <pxCurrentTCB>
     f5a:	b0 91 e2 15 	lds	r27, 0x15E2	; 0x8015e2 <pxCurrentTCB+0x1>
     f5e:	cd 91       	ld	r28, X+
     f60:	cd bf       	out	0x3d, r28	; 61
     f62:	dd 91       	ld	r29, X+
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	ff 91       	pop	r31
     f68:	ef 91       	pop	r30
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	bf 91       	pop	r27
     f70:	af 91       	pop	r26
     f72:	9f 91       	pop	r25
     f74:	8f 91       	pop	r24
     f76:	7f 91       	pop	r23
     f78:	6f 91       	pop	r22
     f7a:	5f 91       	pop	r21
     f7c:	4f 91       	pop	r20
     f7e:	3f 91       	pop	r19
     f80:	2f 91       	pop	r18
     f82:	1f 91       	pop	r17
     f84:	0f 91       	pop	r16
     f86:	ff 90       	pop	r15
     f88:	ef 90       	pop	r14
     f8a:	df 90       	pop	r13
     f8c:	cf 90       	pop	r12
     f8e:	bf 90       	pop	r11
     f90:	af 90       	pop	r10
     f92:	9f 90       	pop	r9
     f94:	8f 90       	pop	r8
     f96:	7f 90       	pop	r7
     f98:	6f 90       	pop	r6
     f9a:	5f 90       	pop	r5
     f9c:	4f 90       	pop	r4
     f9e:	3f 90       	pop	r3
     fa0:	2f 90       	pop	r2
     fa2:	1f 90       	pop	r1
     fa4:	0f 90       	pop	r0
     fa6:	0c be       	out	0x3c, r0	; 60
     fa8:	0f 90       	pop	r0
     faa:	0b be       	out	0x3b, r0	; 59
     fac:	0f 90       	pop	r0
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	0f 90       	pop	r0

	asm volatile ( "ret" );
     fb2:	08 95       	ret

00000fb4 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     fb4:	0f 92       	push	r0
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	0f 92       	push	r0
     fbc:	0b b6       	in	r0, 0x3b	; 59
     fbe:	0f 92       	push	r0
     fc0:	0c b6       	in	r0, 0x3c	; 60
     fc2:	0f 92       	push	r0
     fc4:	1f 92       	push	r1
     fc6:	11 24       	eor	r1, r1
     fc8:	2f 92       	push	r2
     fca:	3f 92       	push	r3
     fcc:	4f 92       	push	r4
     fce:	5f 92       	push	r5
     fd0:	6f 92       	push	r6
     fd2:	7f 92       	push	r7
     fd4:	8f 92       	push	r8
     fd6:	9f 92       	push	r9
     fd8:	af 92       	push	r10
     fda:	bf 92       	push	r11
     fdc:	cf 92       	push	r12
     fde:	df 92       	push	r13
     fe0:	ef 92       	push	r14
     fe2:	ff 92       	push	r15
     fe4:	0f 93       	push	r16
     fe6:	1f 93       	push	r17
     fe8:	2f 93       	push	r18
     fea:	3f 93       	push	r19
     fec:	4f 93       	push	r20
     fee:	5f 93       	push	r21
     ff0:	6f 93       	push	r22
     ff2:	7f 93       	push	r23
     ff4:	8f 93       	push	r24
     ff6:	9f 93       	push	r25
     ff8:	af 93       	push	r26
     ffa:	bf 93       	push	r27
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	ef 93       	push	r30
    1002:	ff 93       	push	r31
    1004:	a0 91 e1 15 	lds	r26, 0x15E1	; 0x8015e1 <pxCurrentTCB>
    1008:	b0 91 e2 15 	lds	r27, 0x15E2	; 0x8015e2 <pxCurrentTCB+0x1>
    100c:	0d b6       	in	r0, 0x3d	; 61
    100e:	0d 92       	st	X+, r0
    1010:	0e b6       	in	r0, 0x3e	; 62
    1012:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    1014:	ef d1       	rcall	.+990    	; 0x13f4 <vTaskIncrementTick>
	vTaskSwitchContext();
    1016:	23 d3       	rcall	.+1606   	; 0x165e <vTaskSwitchContext>
    1018:	a0 91 e1 15 	lds	r26, 0x15E1	; 0x8015e1 <pxCurrentTCB>
	portRESTORE_CONTEXT();
    101c:	b0 91 e2 15 	lds	r27, 0x15E2	; 0x8015e2 <pxCurrentTCB+0x1>
    1020:	cd 91       	ld	r28, X+
    1022:	cd bf       	out	0x3d, r28	; 61
    1024:	dd 91       	ld	r29, X+
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	ff 91       	pop	r31
    102a:	ef 91       	pop	r30
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	bf 91       	pop	r27
    1032:	af 91       	pop	r26
    1034:	9f 91       	pop	r25
    1036:	8f 91       	pop	r24
    1038:	7f 91       	pop	r23
    103a:	6f 91       	pop	r22
    103c:	5f 91       	pop	r21
    103e:	4f 91       	pop	r20
    1040:	3f 91       	pop	r19
    1042:	2f 91       	pop	r18
    1044:	1f 91       	pop	r17
    1046:	0f 91       	pop	r16
    1048:	ff 90       	pop	r15
    104a:	ef 90       	pop	r14
    104c:	df 90       	pop	r13
    104e:	cf 90       	pop	r12
    1050:	bf 90       	pop	r11
    1052:	af 90       	pop	r10
    1054:	9f 90       	pop	r9
    1056:	8f 90       	pop	r8
    1058:	7f 90       	pop	r7
    105a:	6f 90       	pop	r6
    105c:	5f 90       	pop	r5
    105e:	4f 90       	pop	r4
    1060:	3f 90       	pop	r3
    1062:	2f 90       	pop	r2
    1064:	1f 90       	pop	r1
    1066:	0f 90       	pop	r0
    1068:	0c be       	out	0x3c, r0	; 60
    106a:	0f 90       	pop	r0
    106c:	0b be       	out	0x3b, r0	; 59
    106e:	0f 90       	pop	r0
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	0f 90       	pop	r0
    1074:	08 95       	ret

00001076 <__vector_47>:
	asm volatile ( "ret" );
    1076:	9e df       	rcall	.-196    	; 0xfb4 <vPortYieldFromTick>
//	void SIG_OUTPUT_COMPARE1A( void )
	void TIMER5_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER5_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
    1078:	18 95       	reti

0000107a <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    1080:	b3 d1       	rcall	.+870    	; 0x13e8 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    1082:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <xNextFreeByte>
    1086:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <xNextFreeByte+0x1>
    108a:	c9 01       	movw	r24, r18
    108c:	8c 0f       	add	r24, r28
    108e:	9d 1f       	adc	r25, r29
    1090:	88 38       	cpi	r24, 0x88	; 136
    1092:	43 e1       	ldi	r20, 0x13	; 19
    1094:	94 07       	cpc	r25, r20
    1096:	58 f4       	brcc	.+22     	; 0x10ae <pvPortMalloc+0x34>
    1098:	28 17       	cp	r18, r24
    109a:	39 07       	cpc	r19, r25
    109c:	58 f4       	brcc	.+22     	; 0x10b4 <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    109e:	e9 01       	movw	r28, r18
    10a0:	ca 5d       	subi	r28, 0xDA	; 218
    10a2:	dd 4f       	sbci	r29, 0xFD	; 253
			xNextFreeByte += xWantedSize;			
    10a4:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <xNextFreeByte+0x1>
    10a8:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <xNextFreeByte>
    10ac:	05 c0       	rjmp	.+10     	; 0x10b8 <pvPortMalloc+0x3e>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
    10ae:	c0 e0       	ldi	r28, 0x00	; 0
    10b0:	d0 e0       	ldi	r29, 0x00	; 0
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <pvPortMalloc+0x3e>
    10b4:	c0 e0       	ldi	r28, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
    10b6:	d0 e0       	ldi	r29, 0x00	; 0
    10b8:	44 d2       	rcall	.+1160   	; 0x1542 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
    10ba:	ce 01       	movw	r24, r28
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	08 95       	ret

000010c2 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    10c2:	08 95       	ret

000010c4 <prvIdleTask>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    10c4:	80 91 d8 15 	lds	r24, 0x15D8	; 0x8015d8 <pxReadyTasksLists>
    10c8:	82 30       	cpi	r24, 0x02	; 2
    10ca:	e0 f3       	brcs	.-8      	; 0x10c4 <prvIdleTask>
    10cc:	13 df       	rcall	.-474    	; 0xef4 <vPortYield>
    10ce:	fa cf       	rjmp	.-12     	; 0x10c4 <prvIdleTask>

000010d0 <prvAllocateTCBAndStack>:
    10d0:	ef 92       	push	r14
    10d2:	ff 92       	push	r15
    10d4:	0f 93       	push	r16
    10d6:	1f 93       	push	r17
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	7c 01       	movw	r14, r24
    10de:	eb 01       	movw	r28, r22
    10e0:	81 e2       	ldi	r24, 0x21	; 33
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	ca df       	rcall	.-108    	; 0x107a <pvPortMalloc>
    10e6:	8c 01       	movw	r16, r24
    10e8:	89 2b       	or	r24, r25
    10ea:	a1 f0       	breq	.+40     	; 0x1114 <prvAllocateTCBAndStack+0x44>
    10ec:	20 97       	sbiw	r28, 0x00	; 0
    10ee:	19 f4       	brne	.+6      	; 0x10f6 <prvAllocateTCBAndStack+0x26>
    10f0:	c7 01       	movw	r24, r14
    10f2:	c3 df       	rcall	.-122    	; 0x107a <pvPortMalloc>
    10f4:	01 c0       	rjmp	.+2      	; 0x10f8 <prvAllocateTCBAndStack+0x28>
    10f6:	ce 01       	movw	r24, r28
    10f8:	f8 01       	movw	r30, r16
    10fa:	90 8f       	std	Z+24, r25	; 0x18
    10fc:	87 8b       	std	Z+23, r24	; 0x17
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	29 f4       	brne	.+10     	; 0x110c <prvAllocateTCBAndStack+0x3c>
    1102:	c8 01       	movw	r24, r16
    1104:	de df       	rcall	.-68     	; 0x10c2 <vPortFree>
    1106:	00 e0       	ldi	r16, 0x00	; 0
    1108:	10 e0       	ldi	r17, 0x00	; 0
    110a:	04 c0       	rjmp	.+8      	; 0x1114 <prvAllocateTCBAndStack+0x44>
    110c:	a7 01       	movw	r20, r14
    110e:	65 ea       	ldi	r22, 0xA5	; 165
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	23 d5       	rcall	.+2630   	; 0x1b5a <memset>
    1114:	c8 01       	movw	r24, r16
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	1f 91       	pop	r17
    111c:	0f 91       	pop	r16
    111e:	ff 90       	pop	r15
    1120:	ef 90       	pop	r14
    1122:	08 95       	ret

00001124 <prvInitialiseTCBVariables>:
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	ec 01       	movw	r28, r24
    112c:	14 2f       	mov	r17, r20
    112e:	48 e0       	ldi	r20, 0x08	; 8
    1130:	50 e0       	ldi	r21, 0x00	; 0
    1132:	49 96       	adiw	r24, 0x19	; 25
    1134:	19 d5       	rcall	.+2610   	; 0x1b68 <strncpy>
    1136:	18 a2       	std	Y+32, r1	; 0x20
    1138:	11 11       	cpse	r17, r1
    113a:	10 e0       	ldi	r17, 0x00	; 0
    113c:	1e 8b       	std	Y+22, r17	; 0x16
    113e:	ce 01       	movw	r24, r28
    1140:	02 96       	adiw	r24, 0x02	; 2
    1142:	a4 dd       	rcall	.-1208   	; 0xc8c <vListInitialiseItem>
    1144:	ce 01       	movw	r24, r28
    1146:	0c 96       	adiw	r24, 0x0c	; 12
    1148:	a1 dd       	rcall	.-1214   	; 0xc8c <vListInitialiseItem>
    114a:	d9 87       	std	Y+9, r29	; 0x09
    114c:	c8 87       	std	Y+8, r28	; 0x08
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	81 1b       	sub	r24, r17
    1154:	91 09       	sbc	r25, r1
    1156:	9d 87       	std	Y+13, r25	; 0x0d
    1158:	8c 87       	std	Y+12, r24	; 0x0c
    115a:	db 8b       	std	Y+19, r29	; 0x13
    115c:	ca 8b       	std	Y+18, r28	; 0x12
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	08 95       	ret

00001166 <prvInitialiseTaskLists>:
    1166:	cf 93       	push	r28
    1168:	c0 e0       	ldi	r28, 0x00	; 0
    116a:	0f c0       	rjmp	.+30     	; 0x118a <prvInitialiseTaskLists+0x24>
    116c:	8c 2f       	mov	r24, r28
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	9c 01       	movw	r18, r24
    1172:	22 0f       	add	r18, r18
    1174:	33 1f       	adc	r19, r19
    1176:	22 0f       	add	r18, r18
    1178:	33 1f       	adc	r19, r19
    117a:	22 0f       	add	r18, r18
    117c:	33 1f       	adc	r19, r19
    117e:	82 0f       	add	r24, r18
    1180:	93 1f       	adc	r25, r19
    1182:	88 52       	subi	r24, 0x28	; 40
    1184:	9a 4e       	sbci	r25, 0xEA	; 234
    1186:	74 dd       	rcall	.-1304   	; 0xc70 <vListInitialise>
    1188:	cf 5f       	subi	r28, 0xFF	; 255
    118a:	cc 23       	and	r28, r28
    118c:	79 f3       	breq	.-34     	; 0x116c <prvInitialiseTaskLists+0x6>
    118e:	8f ec       	ldi	r24, 0xCF	; 207
    1190:	95 e1       	ldi	r25, 0x15	; 21
    1192:	6e dd       	rcall	.-1316   	; 0xc70 <vListInitialise>
    1194:	86 ec       	ldi	r24, 0xC6	; 198
    1196:	95 e1       	ldi	r25, 0x15	; 21
    1198:	6b dd       	rcall	.-1322   	; 0xc70 <vListInitialise>
    119a:	89 eb       	ldi	r24, 0xB9	; 185
    119c:	95 e1       	ldi	r25, 0x15	; 21
    119e:	68 dd       	rcall	.-1328   	; 0xc70 <vListInitialise>
    11a0:	8f ec       	ldi	r24, 0xCF	; 207
    11a2:	95 e1       	ldi	r25, 0x15	; 21
    11a4:	90 93 c5 15 	sts	0x15C5, r25	; 0x8015c5 <pxDelayedTaskList+0x1>
    11a8:	80 93 c4 15 	sts	0x15C4, r24	; 0x8015c4 <pxDelayedTaskList>
    11ac:	86 ec       	ldi	r24, 0xC6	; 198
    11ae:	95 e1       	ldi	r25, 0x15	; 21
    11b0:	90 93 c3 15 	sts	0x15C3, r25	; 0x8015c3 <pxOverflowDelayedTaskList+0x1>
    11b4:	80 93 c2 15 	sts	0x15C2, r24	; 0x8015c2 <pxOverflowDelayedTaskList>
    11b8:	cf 91       	pop	r28
    11ba:	08 95       	ret

000011bc <prvAddCurrentTaskToDelayedList>:
    11bc:	cf 93       	push	r28
    11be:	df 93       	push	r29
    11c0:	ec 01       	movw	r28, r24
    11c2:	e0 91 e1 15 	lds	r30, 0x15E1	; 0x8015e1 <pxCurrentTCB>
    11c6:	f0 91 e2 15 	lds	r31, 0x15E2	; 0x8015e2 <pxCurrentTCB+0x1>
    11ca:	93 83       	std	Z+3, r25	; 0x03
    11cc:	82 83       	std	Z+2, r24	; 0x02
    11ce:	80 91 b6 15 	lds	r24, 0x15B6	; 0x8015b6 <xTickCount>
    11d2:	90 91 b7 15 	lds	r25, 0x15B7	; 0x8015b7 <xTickCount+0x1>
    11d6:	c8 17       	cp	r28, r24
    11d8:	d9 07       	cpc	r29, r25
    11da:	60 f4       	brcc	.+24     	; 0x11f4 <prvAddCurrentTaskToDelayedList+0x38>
    11dc:	60 91 e1 15 	lds	r22, 0x15E1	; 0x8015e1 <pxCurrentTCB>
    11e0:	70 91 e2 15 	lds	r23, 0x15E2	; 0x8015e2 <pxCurrentTCB+0x1>
    11e4:	80 91 c2 15 	lds	r24, 0x15C2	; 0x8015c2 <pxOverflowDelayedTaskList>
    11e8:	90 91 c3 15 	lds	r25, 0x15C3	; 0x8015c3 <pxOverflowDelayedTaskList+0x1>
    11ec:	6e 5f       	subi	r22, 0xFE	; 254
    11ee:	7f 4f       	sbci	r23, 0xFF	; 255
    11f0:	78 dd       	rcall	.-1296   	; 0xce2 <vListInsert>
    11f2:	16 c0       	rjmp	.+44     	; 0x1220 <prvAddCurrentTaskToDelayedList+0x64>
    11f4:	60 91 e1 15 	lds	r22, 0x15E1	; 0x8015e1 <pxCurrentTCB>
    11f8:	70 91 e2 15 	lds	r23, 0x15E2	; 0x8015e2 <pxCurrentTCB+0x1>
    11fc:	80 91 c4 15 	lds	r24, 0x15C4	; 0x8015c4 <pxDelayedTaskList>
    1200:	90 91 c5 15 	lds	r25, 0x15C5	; 0x8015c5 <pxDelayedTaskList+0x1>
    1204:	6e 5f       	subi	r22, 0xFE	; 254
    1206:	7f 4f       	sbci	r23, 0xFF	; 255
    1208:	6c dd       	rcall	.-1320   	; 0xce2 <vListInsert>
    120a:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <xNextTaskUnblockTime>
    120e:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <xNextTaskUnblockTime+0x1>
    1212:	c8 17       	cp	r28, r24
    1214:	d9 07       	cpc	r29, r25
    1216:	20 f4       	brcc	.+8      	; 0x1220 <prvAddCurrentTaskToDelayedList+0x64>
    1218:	d0 93 06 02 	sts	0x0206, r29	; 0x800206 <xNextTaskUnblockTime+0x1>
    121c:	c0 93 05 02 	sts	0x0205, r28	; 0x800205 <xNextTaskUnblockTime>
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	08 95       	ret

00001226 <xTaskGenericCreate>:
    1226:	2f 92       	push	r2
    1228:	3f 92       	push	r3
    122a:	4f 92       	push	r4
    122c:	5f 92       	push	r5
    122e:	7f 92       	push	r7
    1230:	8f 92       	push	r8
    1232:	9f 92       	push	r9
    1234:	af 92       	push	r10
    1236:	bf 92       	push	r11
    1238:	cf 92       	push	r12
    123a:	df 92       	push	r13
    123c:	ef 92       	push	r14
    123e:	ff 92       	push	r15
    1240:	0f 93       	push	r16
    1242:	1f 93       	push	r17
    1244:	cf 93       	push	r28
    1246:	df 93       	push	r29
    1248:	00 d0       	rcall	.+0      	; 0x124a <xTaskGenericCreate+0x24>
    124a:	1f 92       	push	r1
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	9a 83       	std	Y+2, r25	; 0x02
    1252:	89 83       	std	Y+1, r24	; 0x01
    1254:	4b 01       	movw	r8, r22
    1256:	5c 83       	std	Y+4, r21	; 0x04
    1258:	4b 83       	std	Y+3, r20	; 0x03
    125a:	19 01       	movw	r2, r18
    125c:	70 2e       	mov	r7, r16
    125e:	b6 01       	movw	r22, r12
    1260:	25 01       	movw	r4, r10
    1262:	ca 01       	movw	r24, r20
    1264:	35 df       	rcall	.-406    	; 0x10d0 <prvAllocateTCBAndStack>
    1266:	5c 01       	movw	r10, r24
    1268:	00 97       	sbiw	r24, 0x00	; 0
    126a:	09 f4       	brne	.+2      	; 0x126e <xTaskGenericCreate+0x48>
    126c:	6c c0       	rjmp	.+216    	; 0x1346 <xTaskGenericCreate+0x120>
    126e:	fc 01       	movw	r30, r24
    1270:	c7 88       	ldd	r12, Z+23	; 0x17
    1272:	d0 8c       	ldd	r13, Z+24	; 0x18
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	01 97       	sbiw	r24, 0x01	; 1
    127a:	c8 0e       	add	r12, r24
    127c:	d9 1e       	adc	r13, r25
    127e:	0b 81       	ldd	r16, Y+3	; 0x03
    1280:	1c 81       	ldd	r17, Y+4	; 0x04
    1282:	92 01       	movw	r18, r4
    1284:	47 2d       	mov	r20, r7
    1286:	b4 01       	movw	r22, r8
    1288:	c5 01       	movw	r24, r10
    128a:	4c df       	rcall	.-360    	; 0x1124 <prvInitialiseTCBVariables>
    128c:	a1 01       	movw	r20, r2
    128e:	69 81       	ldd	r22, Y+1	; 0x01
    1290:	7a 81       	ldd	r23, Y+2	; 0x02
    1292:	c6 01       	movw	r24, r12
    1294:	8b dd       	rcall	.-1258   	; 0xdac <pxPortInitialiseStack>
    1296:	f5 01       	movw	r30, r10
    1298:	91 83       	std	Z+1, r25	; 0x01
    129a:	80 83       	st	Z, r24
    129c:	e1 14       	cp	r14, r1
    129e:	f1 04       	cpc	r15, r1
    12a0:	19 f0       	breq	.+6      	; 0x12a8 <xTaskGenericCreate+0x82>
    12a2:	f7 01       	movw	r30, r14
    12a4:	b1 82       	std	Z+1, r11	; 0x01
    12a6:	a0 82       	st	Z, r10
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	0f 92       	push	r0
    12ae:	80 91 b8 15 	lds	r24, 0x15B8	; 0x8015b8 <uxCurrentNumberOfTasks>
    12b2:	8f 5f       	subi	r24, 0xFF	; 255
    12b4:	80 93 b8 15 	sts	0x15B8, r24	; 0x8015b8 <uxCurrentNumberOfTasks>
    12b8:	80 91 e1 15 	lds	r24, 0x15E1	; 0x8015e1 <pxCurrentTCB>
    12bc:	90 91 e2 15 	lds	r25, 0x15E2	; 0x8015e2 <pxCurrentTCB+0x1>
    12c0:	89 2b       	or	r24, r25
    12c2:	51 f4       	brne	.+20     	; 0x12d8 <xTaskGenericCreate+0xb2>
    12c4:	b0 92 e2 15 	sts	0x15E2, r11	; 0x8015e2 <pxCurrentTCB+0x1>
    12c8:	a0 92 e1 15 	sts	0x15E1, r10	; 0x8015e1 <pxCurrentTCB>
    12cc:	80 91 b8 15 	lds	r24, 0x15B8	; 0x8015b8 <uxCurrentNumberOfTasks>
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	89 f4       	brne	.+34     	; 0x12f6 <xTaskGenericCreate+0xd0>
    12d4:	48 df       	rcall	.-368    	; 0x1166 <prvInitialiseTaskLists>
    12d6:	0f c0       	rjmp	.+30     	; 0x12f6 <xTaskGenericCreate+0xd0>
    12d8:	80 91 b3 15 	lds	r24, 0x15B3	; 0x8015b3 <xSchedulerRunning>
    12dc:	81 11       	cpse	r24, r1
    12de:	0b c0       	rjmp	.+22     	; 0x12f6 <xTaskGenericCreate+0xd0>
    12e0:	e0 91 e1 15 	lds	r30, 0x15E1	; 0x8015e1 <pxCurrentTCB>
    12e4:	f0 91 e2 15 	lds	r31, 0x15E2	; 0x8015e2 <pxCurrentTCB+0x1>
    12e8:	86 89       	ldd	r24, Z+22	; 0x16
    12ea:	78 16       	cp	r7, r24
    12ec:	20 f0       	brcs	.+8      	; 0x12f6 <xTaskGenericCreate+0xd0>
    12ee:	b0 92 e2 15 	sts	0x15E2, r11	; 0x8015e2 <pxCurrentTCB+0x1>
    12f2:	a0 92 e1 15 	sts	0x15E1, r10	; 0x8015e1 <pxCurrentTCB>
    12f6:	f5 01       	movw	r30, r10
    12f8:	86 89       	ldd	r24, Z+22	; 0x16
    12fa:	90 91 b5 15 	lds	r25, 0x15B5	; 0x8015b5 <uxTopUsedPriority>
    12fe:	98 17       	cp	r25, r24
    1300:	10 f4       	brcc	.+4      	; 0x1306 <xTaskGenericCreate+0xe0>
    1302:	80 93 b5 15 	sts	0x15B5, r24	; 0x8015b5 <uxTopUsedPriority>
    1306:	90 91 ae 15 	lds	r25, 0x15AE	; 0x8015ae <uxTCBNumber>
    130a:	9f 5f       	subi	r25, 0xFF	; 255
    130c:	90 93 ae 15 	sts	0x15AE, r25	; 0x8015ae <uxTCBNumber>
    1310:	90 91 b4 15 	lds	r25, 0x15B4	; 0x8015b4 <uxTopReadyPriority>
    1314:	98 17       	cp	r25, r24
    1316:	10 f4       	brcc	.+4      	; 0x131c <xTaskGenericCreate+0xf6>
    1318:	80 93 b4 15 	sts	0x15B4, r24	; 0x8015b4 <uxTopReadyPriority>
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	b5 01       	movw	r22, r10
    1320:	6e 5f       	subi	r22, 0xFE	; 254
    1322:	7f 4f       	sbci	r23, 0xFF	; 255
    1324:	9c 01       	movw	r18, r24
    1326:	22 0f       	add	r18, r18
    1328:	33 1f       	adc	r19, r19
    132a:	22 0f       	add	r18, r18
    132c:	33 1f       	adc	r19, r19
    132e:	22 0f       	add	r18, r18
    1330:	33 1f       	adc	r19, r19
    1332:	82 0f       	add	r24, r18
    1334:	93 1f       	adc	r25, r19
    1336:	88 52       	subi	r24, 0x28	; 40
    1338:	9a 4e       	sbci	r25, 0xEA	; 234
    133a:	ac dc       	rcall	.-1704   	; 0xc94 <vListInsertEnd>
    133c:	0f 90       	pop	r0
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	f1 e0       	ldi	r31, 0x01	; 1
    1342:	f9 83       	std	Y+1, r31	; 0x01
    1344:	02 c0       	rjmp	.+4      	; 0x134a <xTaskGenericCreate+0x124>
    1346:	8f ef       	ldi	r24, 0xFF	; 255
    1348:	89 83       	std	Y+1, r24	; 0x01
    134a:	e9 81       	ldd	r30, Y+1	; 0x01
    134c:	e1 30       	cpi	r30, 0x01	; 1
    134e:	61 f4       	brne	.+24     	; 0x1368 <xTaskGenericCreate+0x142>
    1350:	80 91 b3 15 	lds	r24, 0x15B3	; 0x8015b3 <xSchedulerRunning>
    1354:	88 23       	and	r24, r24
    1356:	41 f0       	breq	.+16     	; 0x1368 <xTaskGenericCreate+0x142>
    1358:	e0 91 e1 15 	lds	r30, 0x15E1	; 0x8015e1 <pxCurrentTCB>
    135c:	f0 91 e2 15 	lds	r31, 0x15E2	; 0x8015e2 <pxCurrentTCB+0x1>
    1360:	86 89       	ldd	r24, Z+22	; 0x16
    1362:	87 15       	cp	r24, r7
    1364:	08 f4       	brcc	.+2      	; 0x1368 <xTaskGenericCreate+0x142>
    1366:	c6 dd       	rcall	.-1140   	; 0xef4 <vPortYield>
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	1f 91       	pop	r17
    1378:	0f 91       	pop	r16
    137a:	ff 90       	pop	r15
    137c:	ef 90       	pop	r14
    137e:	df 90       	pop	r13
    1380:	cf 90       	pop	r12
    1382:	bf 90       	pop	r11
    1384:	af 90       	pop	r10
    1386:	9f 90       	pop	r9
    1388:	8f 90       	pop	r8
    138a:	7f 90       	pop	r7
    138c:	5f 90       	pop	r5
    138e:	4f 90       	pop	r4
    1390:	3f 90       	pop	r3
    1392:	2f 90       	pop	r2
    1394:	08 95       	ret

00001396 <vTaskStartScheduler>:
    1396:	af 92       	push	r10
    1398:	bf 92       	push	r11
    139a:	cf 92       	push	r12
    139c:	df 92       	push	r13
    139e:	ef 92       	push	r14
    13a0:	ff 92       	push	r15
    13a2:	0f 93       	push	r16
    13a4:	a1 2c       	mov	r10, r1
    13a6:	b1 2c       	mov	r11, r1
    13a8:	c1 2c       	mov	r12, r1
    13aa:	d1 2c       	mov	r13, r1
    13ac:	e1 2c       	mov	r14, r1
    13ae:	f1 2c       	mov	r15, r1
    13b0:	00 e0       	ldi	r16, 0x00	; 0
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	45 e5       	ldi	r20, 0x55	; 85
    13b8:	50 e0       	ldi	r21, 0x00	; 0
    13ba:	63 e1       	ldi	r22, 0x13	; 19
    13bc:	72 e0       	ldi	r23, 0x02	; 2
    13be:	82 e6       	ldi	r24, 0x62	; 98
    13c0:	98 e0       	ldi	r25, 0x08	; 8
    13c2:	31 df       	rcall	.-414    	; 0x1226 <xTaskGenericCreate>
    13c4:	81 30       	cpi	r24, 0x01	; 1
    13c6:	41 f4       	brne	.+16     	; 0x13d8 <vTaskStartScheduler+0x42>
    13c8:	f8 94       	cli
    13ca:	80 93 b3 15 	sts	0x15B3, r24	; 0x8015b3 <xSchedulerRunning>
    13ce:	10 92 b7 15 	sts	0x15B7, r1	; 0x8015b7 <xTickCount+0x1>
    13d2:	10 92 b6 15 	sts	0x15B6, r1	; 0x8015b6 <xTickCount>
    13d6:	5c dd       	rcall	.-1352   	; 0xe90 <xPortStartScheduler>
    13d8:	0f 91       	pop	r16
    13da:	ff 90       	pop	r15
    13dc:	ef 90       	pop	r14
    13de:	df 90       	pop	r13
    13e0:	cf 90       	pop	r12
    13e2:	bf 90       	pop	r11
    13e4:	af 90       	pop	r10
    13e6:	08 95       	ret

000013e8 <vTaskSuspendAll>:
    13e8:	80 91 b2 15 	lds	r24, 0x15B2	; 0x8015b2 <uxSchedulerSuspended>
    13ec:	8f 5f       	subi	r24, 0xFF	; 255
    13ee:	80 93 b2 15 	sts	0x15B2, r24	; 0x8015b2 <uxSchedulerSuspended>
    13f2:	08 95       	ret

000013f4 <vTaskIncrementTick>:
    13f4:	0f 93       	push	r16
    13f6:	1f 93       	push	r17
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
    13fc:	80 91 b2 15 	lds	r24, 0x15B2	; 0x8015b2 <uxSchedulerSuspended>
    1400:	81 11       	cpse	r24, r1
    1402:	95 c0       	rjmp	.+298    	; 0x152e <vTaskIncrementTick+0x13a>
    1404:	80 91 b6 15 	lds	r24, 0x15B6	; 0x8015b6 <xTickCount>
    1408:	90 91 b7 15 	lds	r25, 0x15B7	; 0x8015b7 <xTickCount+0x1>
    140c:	01 96       	adiw	r24, 0x01	; 1
    140e:	90 93 b7 15 	sts	0x15B7, r25	; 0x8015b7 <xTickCount+0x1>
    1412:	80 93 b6 15 	sts	0x15B6, r24	; 0x8015b6 <xTickCount>
    1416:	80 91 b6 15 	lds	r24, 0x15B6	; 0x8015b6 <xTickCount>
    141a:	90 91 b7 15 	lds	r25, 0x15B7	; 0x8015b7 <xTickCount+0x1>
    141e:	89 2b       	or	r24, r25
    1420:	99 f5       	brne	.+102    	; 0x1488 <vTaskIncrementTick+0x94>
    1422:	80 91 c4 15 	lds	r24, 0x15C4	; 0x8015c4 <pxDelayedTaskList>
    1426:	90 91 c5 15 	lds	r25, 0x15C5	; 0x8015c5 <pxDelayedTaskList+0x1>
    142a:	20 91 c2 15 	lds	r18, 0x15C2	; 0x8015c2 <pxOverflowDelayedTaskList>
    142e:	30 91 c3 15 	lds	r19, 0x15C3	; 0x8015c3 <pxOverflowDelayedTaskList+0x1>
    1432:	30 93 c5 15 	sts	0x15C5, r19	; 0x8015c5 <pxDelayedTaskList+0x1>
    1436:	20 93 c4 15 	sts	0x15C4, r18	; 0x8015c4 <pxDelayedTaskList>
    143a:	90 93 c3 15 	sts	0x15C3, r25	; 0x8015c3 <pxOverflowDelayedTaskList+0x1>
    143e:	80 93 c2 15 	sts	0x15C2, r24	; 0x8015c2 <pxOverflowDelayedTaskList>
    1442:	80 91 af 15 	lds	r24, 0x15AF	; 0x8015af <xNumOfOverflows>
    1446:	8f 5f       	subi	r24, 0xFF	; 255
    1448:	80 93 af 15 	sts	0x15AF, r24	; 0x8015af <xNumOfOverflows>
    144c:	e0 91 c4 15 	lds	r30, 0x15C4	; 0x8015c4 <pxDelayedTaskList>
    1450:	f0 91 c5 15 	lds	r31, 0x15C5	; 0x8015c5 <pxDelayedTaskList+0x1>
    1454:	80 81       	ld	r24, Z
    1456:	81 11       	cpse	r24, r1
    1458:	07 c0       	rjmp	.+14     	; 0x1468 <vTaskIncrementTick+0x74>
    145a:	8f ef       	ldi	r24, 0xFF	; 255
    145c:	9f ef       	ldi	r25, 0xFF	; 255
    145e:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <xNextTaskUnblockTime+0x1>
    1462:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <xNextTaskUnblockTime>
    1466:	10 c0       	rjmp	.+32     	; 0x1488 <vTaskIncrementTick+0x94>
    1468:	e0 91 c4 15 	lds	r30, 0x15C4	; 0x8015c4 <pxDelayedTaskList>
    146c:	f0 91 c5 15 	lds	r31, 0x15C5	; 0x8015c5 <pxDelayedTaskList+0x1>
    1470:	05 80       	ldd	r0, Z+5	; 0x05
    1472:	f6 81       	ldd	r31, Z+6	; 0x06
    1474:	e0 2d       	mov	r30, r0
    1476:	06 80       	ldd	r0, Z+6	; 0x06
    1478:	f7 81       	ldd	r31, Z+7	; 0x07
    147a:	e0 2d       	mov	r30, r0
    147c:	82 81       	ldd	r24, Z+2	; 0x02
    147e:	93 81       	ldd	r25, Z+3	; 0x03
    1480:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <xNextTaskUnblockTime+0x1>
    1484:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <xNextTaskUnblockTime>
    1488:	20 91 b6 15 	lds	r18, 0x15B6	; 0x8015b6 <xTickCount>
    148c:	30 91 b7 15 	lds	r19, 0x15B7	; 0x8015b7 <xTickCount+0x1>
    1490:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <xNextTaskUnblockTime>
    1494:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <xNextTaskUnblockTime+0x1>
    1498:	28 17       	cp	r18, r24
    149a:	39 07       	cpc	r19, r25
    149c:	08 f4       	brcc	.+2      	; 0x14a0 <vTaskIncrementTick+0xac>
    149e:	4c c0       	rjmp	.+152    	; 0x1538 <vTaskIncrementTick+0x144>
    14a0:	e0 91 c4 15 	lds	r30, 0x15C4	; 0x8015c4 <pxDelayedTaskList>
    14a4:	f0 91 c5 15 	lds	r31, 0x15C5	; 0x8015c5 <pxDelayedTaskList+0x1>
    14a8:	80 81       	ld	r24, Z
    14aa:	81 11       	cpse	r24, r1
    14ac:	07 c0       	rjmp	.+14     	; 0x14bc <vTaskIncrementTick+0xc8>
    14ae:	8f ef       	ldi	r24, 0xFF	; 255
    14b0:	9f ef       	ldi	r25, 0xFF	; 255
    14b2:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <xNextTaskUnblockTime+0x1>
    14b6:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <xNextTaskUnblockTime>
    14ba:	3e c0       	rjmp	.+124    	; 0x1538 <vTaskIncrementTick+0x144>
    14bc:	e0 91 c4 15 	lds	r30, 0x15C4	; 0x8015c4 <pxDelayedTaskList>
    14c0:	f0 91 c5 15 	lds	r31, 0x15C5	; 0x8015c5 <pxDelayedTaskList+0x1>
    14c4:	05 80       	ldd	r0, Z+5	; 0x05
    14c6:	f6 81       	ldd	r31, Z+6	; 0x06
    14c8:	e0 2d       	mov	r30, r0
    14ca:	c6 81       	ldd	r28, Z+6	; 0x06
    14cc:	d7 81       	ldd	r29, Z+7	; 0x07
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	9b 81       	ldd	r25, Y+3	; 0x03
    14d2:	20 91 b6 15 	lds	r18, 0x15B6	; 0x8015b6 <xTickCount>
    14d6:	30 91 b7 15 	lds	r19, 0x15B7	; 0x8015b7 <xTickCount+0x1>
    14da:	28 17       	cp	r18, r24
    14dc:	39 07       	cpc	r19, r25
    14de:	28 f4       	brcc	.+10     	; 0x14ea <vTaskIncrementTick+0xf6>
    14e0:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <xNextTaskUnblockTime+0x1>
    14e4:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <xNextTaskUnblockTime>
    14e8:	27 c0       	rjmp	.+78     	; 0x1538 <vTaskIncrementTick+0x144>
    14ea:	8e 01       	movw	r16, r28
    14ec:	0e 5f       	subi	r16, 0xFE	; 254
    14ee:	1f 4f       	sbci	r17, 0xFF	; 255
    14f0:	c8 01       	movw	r24, r16
    14f2:	28 dc       	rcall	.-1968   	; 0xd44 <vListRemove>
    14f4:	8c 89       	ldd	r24, Y+20	; 0x14
    14f6:	9d 89       	ldd	r25, Y+21	; 0x15
    14f8:	89 2b       	or	r24, r25
    14fa:	19 f0       	breq	.+6      	; 0x1502 <vTaskIncrementTick+0x10e>
    14fc:	ce 01       	movw	r24, r28
    14fe:	0c 96       	adiw	r24, 0x0c	; 12
    1500:	21 dc       	rcall	.-1982   	; 0xd44 <vListRemove>
    1502:	8e 89       	ldd	r24, Y+22	; 0x16
    1504:	90 91 b4 15 	lds	r25, 0x15B4	; 0x8015b4 <uxTopReadyPriority>
    1508:	98 17       	cp	r25, r24
    150a:	10 f4       	brcc	.+4      	; 0x1510 <vTaskIncrementTick+0x11c>
    150c:	80 93 b4 15 	sts	0x15B4, r24	; 0x8015b4 <uxTopReadyPriority>
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	9c 01       	movw	r18, r24
    1514:	22 0f       	add	r18, r18
    1516:	33 1f       	adc	r19, r19
    1518:	22 0f       	add	r18, r18
    151a:	33 1f       	adc	r19, r19
    151c:	22 0f       	add	r18, r18
    151e:	33 1f       	adc	r19, r19
    1520:	82 0f       	add	r24, r18
    1522:	93 1f       	adc	r25, r19
    1524:	b8 01       	movw	r22, r16
    1526:	88 52       	subi	r24, 0x28	; 40
    1528:	9a 4e       	sbci	r25, 0xEA	; 234
    152a:	b4 db       	rcall	.-2200   	; 0xc94 <vListInsertEnd>
    152c:	b9 cf       	rjmp	.-142    	; 0x14a0 <vTaskIncrementTick+0xac>
    152e:	80 91 b1 15 	lds	r24, 0x15B1	; 0x8015b1 <uxMissedTicks>
    1532:	8f 5f       	subi	r24, 0xFF	; 255
    1534:	80 93 b1 15 	sts	0x15B1, r24	; 0x8015b1 <uxMissedTicks>
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	1f 91       	pop	r17
    153e:	0f 91       	pop	r16
    1540:	08 95       	ret

00001542 <xTaskResumeAll>:
    1542:	ff 92       	push	r15
    1544:	0f 93       	push	r16
    1546:	1f 93       	push	r17
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	0f 92       	push	r0
    1552:	80 91 b2 15 	lds	r24, 0x15B2	; 0x8015b2 <uxSchedulerSuspended>
    1556:	81 50       	subi	r24, 0x01	; 1
    1558:	80 93 b2 15 	sts	0x15B2, r24	; 0x8015b2 <uxSchedulerSuspended>
    155c:	80 91 b2 15 	lds	r24, 0x15B2	; 0x8015b2 <uxSchedulerSuspended>
    1560:	81 11       	cpse	r24, r1
    1562:	55 c0       	rjmp	.+170    	; 0x160e <xTaskResumeAll+0xcc>
    1564:	80 91 b8 15 	lds	r24, 0x15B8	; 0x8015b8 <uxCurrentNumberOfTasks>
    1568:	81 11       	cpse	r24, r1
    156a:	2f c0       	rjmp	.+94     	; 0x15ca <xTaskResumeAll+0x88>
    156c:	53 c0       	rjmp	.+166    	; 0x1614 <xTaskResumeAll+0xd2>
    156e:	e0 91 be 15 	lds	r30, 0x15BE	; 0x8015be <xPendingReadyList+0x5>
    1572:	f0 91 bf 15 	lds	r31, 0x15BF	; 0x8015bf <xPendingReadyList+0x6>
    1576:	c6 81       	ldd	r28, Z+6	; 0x06
    1578:	d7 81       	ldd	r29, Z+7	; 0x07
    157a:	ce 01       	movw	r24, r28
    157c:	0c 96       	adiw	r24, 0x0c	; 12
    157e:	e2 db       	rcall	.-2108   	; 0xd44 <vListRemove>
    1580:	8e 01       	movw	r16, r28
    1582:	0e 5f       	subi	r16, 0xFE	; 254
    1584:	1f 4f       	sbci	r17, 0xFF	; 255
    1586:	c8 01       	movw	r24, r16
    1588:	dd db       	rcall	.-2118   	; 0xd44 <vListRemove>
    158a:	8e 89       	ldd	r24, Y+22	; 0x16
    158c:	90 91 b4 15 	lds	r25, 0x15B4	; 0x8015b4 <uxTopReadyPriority>
    1590:	98 17       	cp	r25, r24
    1592:	10 f4       	brcc	.+4      	; 0x1598 <xTaskResumeAll+0x56>
    1594:	80 93 b4 15 	sts	0x15B4, r24	; 0x8015b4 <uxTopReadyPriority>
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	9c 01       	movw	r18, r24
    159c:	22 0f       	add	r18, r18
    159e:	33 1f       	adc	r19, r19
    15a0:	22 0f       	add	r18, r18
    15a2:	33 1f       	adc	r19, r19
    15a4:	22 0f       	add	r18, r18
    15a6:	33 1f       	adc	r19, r19
    15a8:	82 0f       	add	r24, r18
    15aa:	93 1f       	adc	r25, r19
    15ac:	b8 01       	movw	r22, r16
    15ae:	88 52       	subi	r24, 0x28	; 40
    15b0:	9a 4e       	sbci	r25, 0xEA	; 234
    15b2:	70 db       	rcall	.-2336   	; 0xc94 <vListInsertEnd>
    15b4:	9e 89       	ldd	r25, Y+22	; 0x16
    15b6:	e0 91 e1 15 	lds	r30, 0x15E1	; 0x8015e1 <pxCurrentTCB>
    15ba:	f0 91 e2 15 	lds	r31, 0x15E2	; 0x8015e2 <pxCurrentTCB+0x1>
    15be:	86 89       	ldd	r24, Z+22	; 0x16
    15c0:	98 17       	cp	r25, r24
    15c2:	20 f0       	brcs	.+8      	; 0x15cc <xTaskResumeAll+0x8a>
    15c4:	ff 24       	eor	r15, r15
    15c6:	f3 94       	inc	r15
    15c8:	01 c0       	rjmp	.+2      	; 0x15cc <xTaskResumeAll+0x8a>
    15ca:	f1 2c       	mov	r15, r1
    15cc:	80 91 b9 15 	lds	r24, 0x15B9	; 0x8015b9 <xPendingReadyList>
    15d0:	81 11       	cpse	r24, r1
    15d2:	cd cf       	rjmp	.-102    	; 0x156e <xTaskResumeAll+0x2c>
    15d4:	80 91 b1 15 	lds	r24, 0x15B1	; 0x8015b1 <uxMissedTicks>
    15d8:	81 11       	cpse	r24, r1
    15da:	07 c0       	rjmp	.+14     	; 0x15ea <xTaskResumeAll+0xa8>
    15dc:	0c c0       	rjmp	.+24     	; 0x15f6 <xTaskResumeAll+0xb4>
    15de:	0a df       	rcall	.-492    	; 0x13f4 <vTaskIncrementTick>
    15e0:	80 91 b1 15 	lds	r24, 0x15B1	; 0x8015b1 <uxMissedTicks>
    15e4:	81 50       	subi	r24, 0x01	; 1
    15e6:	80 93 b1 15 	sts	0x15B1, r24	; 0x8015b1 <uxMissedTicks>
    15ea:	80 91 b1 15 	lds	r24, 0x15B1	; 0x8015b1 <uxMissedTicks>
    15ee:	81 11       	cpse	r24, r1
    15f0:	f6 cf       	rjmp	.-20     	; 0x15de <xTaskResumeAll+0x9c>
    15f2:	ff 24       	eor	r15, r15
    15f4:	f3 94       	inc	r15
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	f8 16       	cp	r15, r24
    15fa:	21 f0       	breq	.+8      	; 0x1604 <xTaskResumeAll+0xc2>
    15fc:	80 91 b0 15 	lds	r24, 0x15B0	; 0x8015b0 <xMissedYield>
    1600:	81 30       	cpi	r24, 0x01	; 1
    1602:	39 f4       	brne	.+14     	; 0x1612 <xTaskResumeAll+0xd0>
    1604:	10 92 b0 15 	sts	0x15B0, r1	; 0x8015b0 <xMissedYield>
    1608:	75 dc       	rcall	.-1814   	; 0xef4 <vPortYield>
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	03 c0       	rjmp	.+6      	; 0x1614 <xTaskResumeAll+0xd2>
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	01 c0       	rjmp	.+2      	; 0x1614 <xTaskResumeAll+0xd2>
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	0f 90       	pop	r0
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	1f 91       	pop	r17
    161e:	0f 91       	pop	r16
    1620:	ff 90       	pop	r15
    1622:	08 95       	ret

00001624 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    162a:	89 2b       	or	r24, r25
    162c:	89 f0       	breq	.+34     	; 0x1650 <vTaskDelay+0x2c>
		{
			vTaskSuspendAll();
    162e:	dc de       	rcall	.-584    	; 0x13e8 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1630:	80 91 b6 15 	lds	r24, 0x15B6	; 0x8015b6 <xTickCount>
    1634:	90 91 b7 15 	lds	r25, 0x15B7	; 0x8015b7 <xTickCount+0x1>
    1638:	c8 0f       	add	r28, r24
    163a:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    163c:	80 91 e1 15 	lds	r24, 0x15E1	; 0x8015e1 <pxCurrentTCB>
    1640:	90 91 e2 15 	lds	r25, 0x15E2	; 0x8015e2 <pxCurrentTCB+0x1>
    1644:	02 96       	adiw	r24, 0x02	; 2
    1646:	7e db       	rcall	.-2308   	; 0xd44 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1648:	ce 01       	movw	r24, r28
    164a:	b8 dd       	rcall	.-1168   	; 0x11bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    164c:	7a df       	rcall	.-268    	; 0x1542 <xTaskResumeAll>
    164e:	01 c0       	rjmp	.+2      	; 0x1652 <vTaskDelay+0x2e>
#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    1650:	80 e0       	ldi	r24, 0x00	; 0
			xAlreadyYielded = xTaskResumeAll();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1652:	81 11       	cpse	r24, r1
    1654:	01 c0       	rjmp	.+2      	; 0x1658 <vTaskDelay+0x34>
		{
			portYIELD_WITHIN_API();
    1656:	4e dc       	rcall	.-1892   	; 0xef4 <vPortYield>
    1658:	df 91       	pop	r29
		}
	}
    165a:	cf 91       	pop	r28
    165c:	08 95       	ret

0000165e <vTaskSwitchContext>:
    165e:	80 91 b2 15 	lds	r24, 0x15B2	; 0x8015b2 <uxSchedulerSuspended>
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    1662:	88 23       	and	r24, r24
    1664:	49 f0       	breq	.+18     	; 0x1678 <vTaskSwitchContext+0x1a>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	80 93 b0 15 	sts	0x15B0, r24	; 0x8015b0 <xMissedYield>
    166c:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    166e:	80 91 b4 15 	lds	r24, 0x15B4	; 0x8015b4 <uxTopReadyPriority>
    1672:	81 50       	subi	r24, 0x01	; 1
    1674:	80 93 b4 15 	sts	0x15B4, r24	; 0x8015b4 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1678:	80 91 b4 15 	lds	r24, 0x15B4	; 0x8015b4 <uxTopReadyPriority>
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	fc 01       	movw	r30, r24
    1680:	ee 0f       	add	r30, r30
    1682:	ff 1f       	adc	r31, r31
    1684:	ee 0f       	add	r30, r30
    1686:	ff 1f       	adc	r31, r31
    1688:	ee 0f       	add	r30, r30
    168a:	ff 1f       	adc	r31, r31
    168c:	8e 0f       	add	r24, r30
    168e:	9f 1f       	adc	r25, r31
    1690:	fc 01       	movw	r30, r24
    1692:	e8 52       	subi	r30, 0x28	; 40
    1694:	fa 4e       	sbci	r31, 0xEA	; 234
    1696:	80 81       	ld	r24, Z
    1698:	88 23       	and	r24, r24
    169a:	49 f3       	breq	.-46     	; 0x166e <vTaskSwitchContext+0x10>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    169c:	80 91 b4 15 	lds	r24, 0x15B4	; 0x8015b4 <uxTopReadyPriority>
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	9c 01       	movw	r18, r24
    16a4:	22 0f       	add	r18, r18
    16a6:	33 1f       	adc	r19, r19
    16a8:	22 0f       	add	r18, r18
    16aa:	33 1f       	adc	r19, r19
    16ac:	22 0f       	add	r18, r18
    16ae:	33 1f       	adc	r19, r19
    16b0:	28 0f       	add	r18, r24
    16b2:	39 1f       	adc	r19, r25
    16b4:	d9 01       	movw	r26, r18
    16b6:	a8 52       	subi	r26, 0x28	; 40
    16b8:	ba 4e       	sbci	r27, 0xEA	; 234
    16ba:	11 96       	adiw	r26, 0x01	; 1
    16bc:	ed 91       	ld	r30, X+
    16be:	fc 91       	ld	r31, X
    16c0:	12 97       	sbiw	r26, 0x02	; 2
    16c2:	02 80       	ldd	r0, Z+2	; 0x02
    16c4:	f3 81       	ldd	r31, Z+3	; 0x03
    16c6:	e0 2d       	mov	r30, r0
    16c8:	12 96       	adiw	r26, 0x02	; 2
    16ca:	fc 93       	st	X, r31
    16cc:	ee 93       	st	-X, r30
    16ce:	11 97       	sbiw	r26, 0x01	; 1
    16d0:	25 52       	subi	r18, 0x25	; 37
    16d2:	3a 4e       	sbci	r19, 0xEA	; 234
    16d4:	e2 17       	cp	r30, r18
    16d6:	f3 07       	cpc	r31, r19
    16d8:	29 f4       	brne	.+10     	; 0x16e4 <vTaskSwitchContext+0x86>
    16da:	22 81       	ldd	r18, Z+2	; 0x02
    16dc:	33 81       	ldd	r19, Z+3	; 0x03
    16de:	fd 01       	movw	r30, r26
    16e0:	32 83       	std	Z+2, r19	; 0x02
    16e2:	21 83       	std	Z+1, r18	; 0x01
    16e4:	fc 01       	movw	r30, r24
    16e6:	ee 0f       	add	r30, r30
    16e8:	ff 1f       	adc	r31, r31
    16ea:	ee 0f       	add	r30, r30
    16ec:	ff 1f       	adc	r31, r31
    16ee:	ee 0f       	add	r30, r30
    16f0:	ff 1f       	adc	r31, r31
    16f2:	8e 0f       	add	r24, r30
    16f4:	9f 1f       	adc	r25, r31
    16f6:	fc 01       	movw	r30, r24
    16f8:	e8 52       	subi	r30, 0x28	; 40
    16fa:	fa 4e       	sbci	r31, 0xEA	; 234
    16fc:	01 80       	ldd	r0, Z+1	; 0x01
    16fe:	f2 81       	ldd	r31, Z+2	; 0x02
    1700:	e0 2d       	mov	r30, r0
    1702:	86 81       	ldd	r24, Z+6	; 0x06
    1704:	97 81       	ldd	r25, Z+7	; 0x07
    1706:	90 93 e2 15 	sts	0x15E2, r25	; 0x8015e2 <pxCurrentTCB+0x1>
    170a:	80 93 e1 15 	sts	0x15E1, r24	; 0x8015e1 <pxCurrentTCB>
    170e:	08 95       	ret

00001710 <__subsf3>:
    1710:	50 58       	subi	r21, 0x80	; 128

00001712 <__addsf3>:
    1712:	bb 27       	eor	r27, r27
    1714:	aa 27       	eor	r26, r26
    1716:	0e d0       	rcall	.+28     	; 0x1734 <__addsf3x>
    1718:	70 c1       	rjmp	.+736    	; 0x19fa <__fp_round>
    171a:	61 d1       	rcall	.+706    	; 0x19de <__fp_pscA>
    171c:	30 f0       	brcs	.+12     	; 0x172a <__addsf3+0x18>
    171e:	66 d1       	rcall	.+716    	; 0x19ec <__fp_pscB>
    1720:	20 f0       	brcs	.+8      	; 0x172a <__addsf3+0x18>
    1722:	31 f4       	brne	.+12     	; 0x1730 <__addsf3+0x1e>
    1724:	9f 3f       	cpi	r25, 0xFF	; 255
    1726:	11 f4       	brne	.+4      	; 0x172c <__addsf3+0x1a>
    1728:	1e f4       	brtc	.+6      	; 0x1730 <__addsf3+0x1e>
    172a:	56 c1       	rjmp	.+684    	; 0x19d8 <__fp_nan>
    172c:	0e f4       	brtc	.+2      	; 0x1730 <__addsf3+0x1e>
    172e:	e0 95       	com	r30
    1730:	e7 fb       	bst	r30, 7
    1732:	4c c1       	rjmp	.+664    	; 0x19cc <__fp_inf>

00001734 <__addsf3x>:
    1734:	e9 2f       	mov	r30, r25
    1736:	72 d1       	rcall	.+740    	; 0x1a1c <__fp_split3>
    1738:	80 f3       	brcs	.-32     	; 0x171a <__addsf3+0x8>
    173a:	ba 17       	cp	r27, r26
    173c:	62 07       	cpc	r22, r18
    173e:	73 07       	cpc	r23, r19
    1740:	84 07       	cpc	r24, r20
    1742:	95 07       	cpc	r25, r21
    1744:	18 f0       	brcs	.+6      	; 0x174c <__addsf3x+0x18>
    1746:	71 f4       	brne	.+28     	; 0x1764 <__addsf3x+0x30>
    1748:	9e f5       	brtc	.+102    	; 0x17b0 <__addsf3x+0x7c>
    174a:	8a c1       	rjmp	.+788    	; 0x1a60 <__fp_zero>
    174c:	0e f4       	brtc	.+2      	; 0x1750 <__addsf3x+0x1c>
    174e:	e0 95       	com	r30
    1750:	0b 2e       	mov	r0, r27
    1752:	ba 2f       	mov	r27, r26
    1754:	a0 2d       	mov	r26, r0
    1756:	0b 01       	movw	r0, r22
    1758:	b9 01       	movw	r22, r18
    175a:	90 01       	movw	r18, r0
    175c:	0c 01       	movw	r0, r24
    175e:	ca 01       	movw	r24, r20
    1760:	a0 01       	movw	r20, r0
    1762:	11 24       	eor	r1, r1
    1764:	ff 27       	eor	r31, r31
    1766:	59 1b       	sub	r21, r25
    1768:	99 f0       	breq	.+38     	; 0x1790 <__addsf3x+0x5c>
    176a:	59 3f       	cpi	r21, 0xF9	; 249
    176c:	50 f4       	brcc	.+20     	; 0x1782 <__addsf3x+0x4e>
    176e:	50 3e       	cpi	r21, 0xE0	; 224
    1770:	68 f1       	brcs	.+90     	; 0x17cc <__addsf3x+0x98>
    1772:	1a 16       	cp	r1, r26
    1774:	f0 40       	sbci	r31, 0x00	; 0
    1776:	a2 2f       	mov	r26, r18
    1778:	23 2f       	mov	r18, r19
    177a:	34 2f       	mov	r19, r20
    177c:	44 27       	eor	r20, r20
    177e:	58 5f       	subi	r21, 0xF8	; 248
    1780:	f3 cf       	rjmp	.-26     	; 0x1768 <__addsf3x+0x34>
    1782:	46 95       	lsr	r20
    1784:	37 95       	ror	r19
    1786:	27 95       	ror	r18
    1788:	a7 95       	ror	r26
    178a:	f0 40       	sbci	r31, 0x00	; 0
    178c:	53 95       	inc	r21
    178e:	c9 f7       	brne	.-14     	; 0x1782 <__addsf3x+0x4e>
    1790:	7e f4       	brtc	.+30     	; 0x17b0 <__addsf3x+0x7c>
    1792:	1f 16       	cp	r1, r31
    1794:	ba 0b       	sbc	r27, r26
    1796:	62 0b       	sbc	r22, r18
    1798:	73 0b       	sbc	r23, r19
    179a:	84 0b       	sbc	r24, r20
    179c:	ba f0       	brmi	.+46     	; 0x17cc <__addsf3x+0x98>
    179e:	91 50       	subi	r25, 0x01	; 1
    17a0:	a1 f0       	breq	.+40     	; 0x17ca <__addsf3x+0x96>
    17a2:	ff 0f       	add	r31, r31
    17a4:	bb 1f       	adc	r27, r27
    17a6:	66 1f       	adc	r22, r22
    17a8:	77 1f       	adc	r23, r23
    17aa:	88 1f       	adc	r24, r24
    17ac:	c2 f7       	brpl	.-16     	; 0x179e <__addsf3x+0x6a>
    17ae:	0e c0       	rjmp	.+28     	; 0x17cc <__addsf3x+0x98>
    17b0:	ba 0f       	add	r27, r26
    17b2:	62 1f       	adc	r22, r18
    17b4:	73 1f       	adc	r23, r19
    17b6:	84 1f       	adc	r24, r20
    17b8:	48 f4       	brcc	.+18     	; 0x17cc <__addsf3x+0x98>
    17ba:	87 95       	ror	r24
    17bc:	77 95       	ror	r23
    17be:	67 95       	ror	r22
    17c0:	b7 95       	ror	r27
    17c2:	f7 95       	ror	r31
    17c4:	9e 3f       	cpi	r25, 0xFE	; 254
    17c6:	08 f0       	brcs	.+2      	; 0x17ca <__addsf3x+0x96>
    17c8:	b3 cf       	rjmp	.-154    	; 0x1730 <__addsf3+0x1e>
    17ca:	93 95       	inc	r25
    17cc:	88 0f       	add	r24, r24
    17ce:	08 f0       	brcs	.+2      	; 0x17d2 <__addsf3x+0x9e>
    17d0:	99 27       	eor	r25, r25
    17d2:	ee 0f       	add	r30, r30
    17d4:	97 95       	ror	r25
    17d6:	87 95       	ror	r24
    17d8:	08 95       	ret

000017da <__cmpsf2>:
    17da:	d4 d0       	rcall	.+424    	; 0x1984 <__fp_cmp>
    17dc:	08 f4       	brcc	.+2      	; 0x17e0 <__cmpsf2+0x6>
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	08 95       	ret

000017e2 <__divsf3>:
    17e2:	0c d0       	rcall	.+24     	; 0x17fc <__divsf3x>
    17e4:	0a c1       	rjmp	.+532    	; 0x19fa <__fp_round>
    17e6:	02 d1       	rcall	.+516    	; 0x19ec <__fp_pscB>
    17e8:	40 f0       	brcs	.+16     	; 0x17fa <__divsf3+0x18>
    17ea:	f9 d0       	rcall	.+498    	; 0x19de <__fp_pscA>
    17ec:	30 f0       	brcs	.+12     	; 0x17fa <__divsf3+0x18>
    17ee:	21 f4       	brne	.+8      	; 0x17f8 <__divsf3+0x16>
    17f0:	5f 3f       	cpi	r21, 0xFF	; 255
    17f2:	19 f0       	breq	.+6      	; 0x17fa <__divsf3+0x18>
    17f4:	eb c0       	rjmp	.+470    	; 0x19cc <__fp_inf>
    17f6:	51 11       	cpse	r21, r1
    17f8:	34 c1       	rjmp	.+616    	; 0x1a62 <__fp_szero>
    17fa:	ee c0       	rjmp	.+476    	; 0x19d8 <__fp_nan>

000017fc <__divsf3x>:
    17fc:	0f d1       	rcall	.+542    	; 0x1a1c <__fp_split3>
    17fe:	98 f3       	brcs	.-26     	; 0x17e6 <__divsf3+0x4>

00001800 <__divsf3_pse>:
    1800:	99 23       	and	r25, r25
    1802:	c9 f3       	breq	.-14     	; 0x17f6 <__divsf3+0x14>
    1804:	55 23       	and	r21, r21
    1806:	b1 f3       	breq	.-20     	; 0x17f4 <__divsf3+0x12>
    1808:	95 1b       	sub	r25, r21
    180a:	55 0b       	sbc	r21, r21
    180c:	bb 27       	eor	r27, r27
    180e:	aa 27       	eor	r26, r26
    1810:	62 17       	cp	r22, r18
    1812:	73 07       	cpc	r23, r19
    1814:	84 07       	cpc	r24, r20
    1816:	38 f0       	brcs	.+14     	; 0x1826 <__divsf3_pse+0x26>
    1818:	9f 5f       	subi	r25, 0xFF	; 255
    181a:	5f 4f       	sbci	r21, 0xFF	; 255
    181c:	22 0f       	add	r18, r18
    181e:	33 1f       	adc	r19, r19
    1820:	44 1f       	adc	r20, r20
    1822:	aa 1f       	adc	r26, r26
    1824:	a9 f3       	breq	.-22     	; 0x1810 <__divsf3_pse+0x10>
    1826:	33 d0       	rcall	.+102    	; 0x188e <__divsf3_pse+0x8e>
    1828:	0e 2e       	mov	r0, r30
    182a:	3a f0       	brmi	.+14     	; 0x183a <__divsf3_pse+0x3a>
    182c:	e0 e8       	ldi	r30, 0x80	; 128
    182e:	30 d0       	rcall	.+96     	; 0x1890 <__divsf3_pse+0x90>
    1830:	91 50       	subi	r25, 0x01	; 1
    1832:	50 40       	sbci	r21, 0x00	; 0
    1834:	e6 95       	lsr	r30
    1836:	00 1c       	adc	r0, r0
    1838:	ca f7       	brpl	.-14     	; 0x182c <__divsf3_pse+0x2c>
    183a:	29 d0       	rcall	.+82     	; 0x188e <__divsf3_pse+0x8e>
    183c:	fe 2f       	mov	r31, r30
    183e:	27 d0       	rcall	.+78     	; 0x188e <__divsf3_pse+0x8e>
    1840:	66 0f       	add	r22, r22
    1842:	77 1f       	adc	r23, r23
    1844:	88 1f       	adc	r24, r24
    1846:	bb 1f       	adc	r27, r27
    1848:	26 17       	cp	r18, r22
    184a:	37 07       	cpc	r19, r23
    184c:	48 07       	cpc	r20, r24
    184e:	ab 07       	cpc	r26, r27
    1850:	b0 e8       	ldi	r27, 0x80	; 128
    1852:	09 f0       	breq	.+2      	; 0x1856 <__divsf3_pse+0x56>
    1854:	bb 0b       	sbc	r27, r27
    1856:	80 2d       	mov	r24, r0
    1858:	bf 01       	movw	r22, r30
    185a:	ff 27       	eor	r31, r31
    185c:	93 58       	subi	r25, 0x83	; 131
    185e:	5f 4f       	sbci	r21, 0xFF	; 255
    1860:	2a f0       	brmi	.+10     	; 0x186c <__divsf3_pse+0x6c>
    1862:	9e 3f       	cpi	r25, 0xFE	; 254
    1864:	51 05       	cpc	r21, r1
    1866:	68 f0       	brcs	.+26     	; 0x1882 <__divsf3_pse+0x82>
    1868:	b1 c0       	rjmp	.+354    	; 0x19cc <__fp_inf>
    186a:	fb c0       	rjmp	.+502    	; 0x1a62 <__fp_szero>
    186c:	5f 3f       	cpi	r21, 0xFF	; 255
    186e:	ec f3       	brlt	.-6      	; 0x186a <__divsf3_pse+0x6a>
    1870:	98 3e       	cpi	r25, 0xE8	; 232
    1872:	dc f3       	brlt	.-10     	; 0x186a <__divsf3_pse+0x6a>
    1874:	86 95       	lsr	r24
    1876:	77 95       	ror	r23
    1878:	67 95       	ror	r22
    187a:	b7 95       	ror	r27
    187c:	f7 95       	ror	r31
    187e:	9f 5f       	subi	r25, 0xFF	; 255
    1880:	c9 f7       	brne	.-14     	; 0x1874 <__divsf3_pse+0x74>
    1882:	88 0f       	add	r24, r24
    1884:	91 1d       	adc	r25, r1
    1886:	96 95       	lsr	r25
    1888:	87 95       	ror	r24
    188a:	97 f9       	bld	r25, 7
    188c:	08 95       	ret
    188e:	e1 e0       	ldi	r30, 0x01	; 1
    1890:	66 0f       	add	r22, r22
    1892:	77 1f       	adc	r23, r23
    1894:	88 1f       	adc	r24, r24
    1896:	bb 1f       	adc	r27, r27
    1898:	62 17       	cp	r22, r18
    189a:	73 07       	cpc	r23, r19
    189c:	84 07       	cpc	r24, r20
    189e:	ba 07       	cpc	r27, r26
    18a0:	20 f0       	brcs	.+8      	; 0x18aa <__divsf3_pse+0xaa>
    18a2:	62 1b       	sub	r22, r18
    18a4:	73 0b       	sbc	r23, r19
    18a6:	84 0b       	sbc	r24, r20
    18a8:	ba 0b       	sbc	r27, r26
    18aa:	ee 1f       	adc	r30, r30
    18ac:	88 f7       	brcc	.-30     	; 0x1890 <__divsf3_pse+0x90>
    18ae:	e0 95       	com	r30
    18b0:	08 95       	ret

000018b2 <__fixunssfsi>:
    18b2:	bc d0       	rcall	.+376    	; 0x1a2c <__fp_splitA>
    18b4:	88 f0       	brcs	.+34     	; 0x18d8 <__fixunssfsi+0x26>
    18b6:	9f 57       	subi	r25, 0x7F	; 127
    18b8:	90 f0       	brcs	.+36     	; 0x18de <__fixunssfsi+0x2c>
    18ba:	b9 2f       	mov	r27, r25
    18bc:	99 27       	eor	r25, r25
    18be:	b7 51       	subi	r27, 0x17	; 23
    18c0:	a0 f0       	brcs	.+40     	; 0x18ea <__fixunssfsi+0x38>
    18c2:	d1 f0       	breq	.+52     	; 0x18f8 <__fixunssfsi+0x46>
    18c4:	66 0f       	add	r22, r22
    18c6:	77 1f       	adc	r23, r23
    18c8:	88 1f       	adc	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	1a f0       	brmi	.+6      	; 0x18d4 <__fixunssfsi+0x22>
    18ce:	ba 95       	dec	r27
    18d0:	c9 f7       	brne	.-14     	; 0x18c4 <__fixunssfsi+0x12>
    18d2:	12 c0       	rjmp	.+36     	; 0x18f8 <__fixunssfsi+0x46>
    18d4:	b1 30       	cpi	r27, 0x01	; 1
    18d6:	81 f0       	breq	.+32     	; 0x18f8 <__fixunssfsi+0x46>
    18d8:	c3 d0       	rcall	.+390    	; 0x1a60 <__fp_zero>
    18da:	b1 e0       	ldi	r27, 0x01	; 1
    18dc:	08 95       	ret
    18de:	c0 c0       	rjmp	.+384    	; 0x1a60 <__fp_zero>
    18e0:	67 2f       	mov	r22, r23
    18e2:	78 2f       	mov	r23, r24
    18e4:	88 27       	eor	r24, r24
    18e6:	b8 5f       	subi	r27, 0xF8	; 248
    18e8:	39 f0       	breq	.+14     	; 0x18f8 <__fixunssfsi+0x46>
    18ea:	b9 3f       	cpi	r27, 0xF9	; 249
    18ec:	cc f3       	brlt	.-14     	; 0x18e0 <__fixunssfsi+0x2e>
    18ee:	86 95       	lsr	r24
    18f0:	77 95       	ror	r23
    18f2:	67 95       	ror	r22
    18f4:	b3 95       	inc	r27
    18f6:	d9 f7       	brne	.-10     	; 0x18ee <__fixunssfsi+0x3c>
    18f8:	3e f4       	brtc	.+14     	; 0x1908 <__fixunssfsi+0x56>
    18fa:	90 95       	com	r25
    18fc:	80 95       	com	r24
    18fe:	70 95       	com	r23
    1900:	61 95       	neg	r22
    1902:	7f 4f       	sbci	r23, 0xFF	; 255
    1904:	8f 4f       	sbci	r24, 0xFF	; 255
    1906:	9f 4f       	sbci	r25, 0xFF	; 255
    1908:	08 95       	ret

0000190a <__floatunsisf>:
    190a:	e8 94       	clt
    190c:	09 c0       	rjmp	.+18     	; 0x1920 <__floatsisf+0x12>

0000190e <__floatsisf>:
    190e:	97 fb       	bst	r25, 7
    1910:	3e f4       	brtc	.+14     	; 0x1920 <__floatsisf+0x12>
    1912:	90 95       	com	r25
    1914:	80 95       	com	r24
    1916:	70 95       	com	r23
    1918:	61 95       	neg	r22
    191a:	7f 4f       	sbci	r23, 0xFF	; 255
    191c:	8f 4f       	sbci	r24, 0xFF	; 255
    191e:	9f 4f       	sbci	r25, 0xFF	; 255
    1920:	99 23       	and	r25, r25
    1922:	a9 f0       	breq	.+42     	; 0x194e <__floatsisf+0x40>
    1924:	f9 2f       	mov	r31, r25
    1926:	96 e9       	ldi	r25, 0x96	; 150
    1928:	bb 27       	eor	r27, r27
    192a:	93 95       	inc	r25
    192c:	f6 95       	lsr	r31
    192e:	87 95       	ror	r24
    1930:	77 95       	ror	r23
    1932:	67 95       	ror	r22
    1934:	b7 95       	ror	r27
    1936:	f1 11       	cpse	r31, r1
    1938:	f8 cf       	rjmp	.-16     	; 0x192a <__floatsisf+0x1c>
    193a:	fa f4       	brpl	.+62     	; 0x197a <__floatsisf+0x6c>
    193c:	bb 0f       	add	r27, r27
    193e:	11 f4       	brne	.+4      	; 0x1944 <__floatsisf+0x36>
    1940:	60 ff       	sbrs	r22, 0
    1942:	1b c0       	rjmp	.+54     	; 0x197a <__floatsisf+0x6c>
    1944:	6f 5f       	subi	r22, 0xFF	; 255
    1946:	7f 4f       	sbci	r23, 0xFF	; 255
    1948:	8f 4f       	sbci	r24, 0xFF	; 255
    194a:	9f 4f       	sbci	r25, 0xFF	; 255
    194c:	16 c0       	rjmp	.+44     	; 0x197a <__floatsisf+0x6c>
    194e:	88 23       	and	r24, r24
    1950:	11 f0       	breq	.+4      	; 0x1956 <__floatsisf+0x48>
    1952:	96 e9       	ldi	r25, 0x96	; 150
    1954:	11 c0       	rjmp	.+34     	; 0x1978 <__floatsisf+0x6a>
    1956:	77 23       	and	r23, r23
    1958:	21 f0       	breq	.+8      	; 0x1962 <__floatsisf+0x54>
    195a:	9e e8       	ldi	r25, 0x8E	; 142
    195c:	87 2f       	mov	r24, r23
    195e:	76 2f       	mov	r23, r22
    1960:	05 c0       	rjmp	.+10     	; 0x196c <__floatsisf+0x5e>
    1962:	66 23       	and	r22, r22
    1964:	71 f0       	breq	.+28     	; 0x1982 <__floatsisf+0x74>
    1966:	96 e8       	ldi	r25, 0x86	; 134
    1968:	86 2f       	mov	r24, r22
    196a:	70 e0       	ldi	r23, 0x00	; 0
    196c:	60 e0       	ldi	r22, 0x00	; 0
    196e:	2a f0       	brmi	.+10     	; 0x197a <__floatsisf+0x6c>
    1970:	9a 95       	dec	r25
    1972:	66 0f       	add	r22, r22
    1974:	77 1f       	adc	r23, r23
    1976:	88 1f       	adc	r24, r24
    1978:	da f7       	brpl	.-10     	; 0x1970 <__floatsisf+0x62>
    197a:	88 0f       	add	r24, r24
    197c:	96 95       	lsr	r25
    197e:	87 95       	ror	r24
    1980:	97 f9       	bld	r25, 7
    1982:	08 95       	ret

00001984 <__fp_cmp>:
    1984:	99 0f       	add	r25, r25
    1986:	00 08       	sbc	r0, r0
    1988:	55 0f       	add	r21, r21
    198a:	aa 0b       	sbc	r26, r26
    198c:	e0 e8       	ldi	r30, 0x80	; 128
    198e:	fe ef       	ldi	r31, 0xFE	; 254
    1990:	16 16       	cp	r1, r22
    1992:	17 06       	cpc	r1, r23
    1994:	e8 07       	cpc	r30, r24
    1996:	f9 07       	cpc	r31, r25
    1998:	c0 f0       	brcs	.+48     	; 0x19ca <__fp_cmp+0x46>
    199a:	12 16       	cp	r1, r18
    199c:	13 06       	cpc	r1, r19
    199e:	e4 07       	cpc	r30, r20
    19a0:	f5 07       	cpc	r31, r21
    19a2:	98 f0       	brcs	.+38     	; 0x19ca <__fp_cmp+0x46>
    19a4:	62 1b       	sub	r22, r18
    19a6:	73 0b       	sbc	r23, r19
    19a8:	84 0b       	sbc	r24, r20
    19aa:	95 0b       	sbc	r25, r21
    19ac:	39 f4       	brne	.+14     	; 0x19bc <__fp_cmp+0x38>
    19ae:	0a 26       	eor	r0, r26
    19b0:	61 f0       	breq	.+24     	; 0x19ca <__fp_cmp+0x46>
    19b2:	23 2b       	or	r18, r19
    19b4:	24 2b       	or	r18, r20
    19b6:	25 2b       	or	r18, r21
    19b8:	21 f4       	brne	.+8      	; 0x19c2 <__fp_cmp+0x3e>
    19ba:	08 95       	ret
    19bc:	0a 26       	eor	r0, r26
    19be:	09 f4       	brne	.+2      	; 0x19c2 <__fp_cmp+0x3e>
    19c0:	a1 40       	sbci	r26, 0x01	; 1
    19c2:	a6 95       	lsr	r26
    19c4:	8f ef       	ldi	r24, 0xFF	; 255
    19c6:	81 1d       	adc	r24, r1
    19c8:	81 1d       	adc	r24, r1
    19ca:	08 95       	ret

000019cc <__fp_inf>:
    19cc:	97 f9       	bld	r25, 7
    19ce:	9f 67       	ori	r25, 0x7F	; 127
    19d0:	80 e8       	ldi	r24, 0x80	; 128
    19d2:	70 e0       	ldi	r23, 0x00	; 0
    19d4:	60 e0       	ldi	r22, 0x00	; 0
    19d6:	08 95       	ret

000019d8 <__fp_nan>:
    19d8:	9f ef       	ldi	r25, 0xFF	; 255
    19da:	80 ec       	ldi	r24, 0xC0	; 192
    19dc:	08 95       	ret

000019de <__fp_pscA>:
    19de:	00 24       	eor	r0, r0
    19e0:	0a 94       	dec	r0
    19e2:	16 16       	cp	r1, r22
    19e4:	17 06       	cpc	r1, r23
    19e6:	18 06       	cpc	r1, r24
    19e8:	09 06       	cpc	r0, r25
    19ea:	08 95       	ret

000019ec <__fp_pscB>:
    19ec:	00 24       	eor	r0, r0
    19ee:	0a 94       	dec	r0
    19f0:	12 16       	cp	r1, r18
    19f2:	13 06       	cpc	r1, r19
    19f4:	14 06       	cpc	r1, r20
    19f6:	05 06       	cpc	r0, r21
    19f8:	08 95       	ret

000019fa <__fp_round>:
    19fa:	09 2e       	mov	r0, r25
    19fc:	03 94       	inc	r0
    19fe:	00 0c       	add	r0, r0
    1a00:	11 f4       	brne	.+4      	; 0x1a06 <__fp_round+0xc>
    1a02:	88 23       	and	r24, r24
    1a04:	52 f0       	brmi	.+20     	; 0x1a1a <__fp_round+0x20>
    1a06:	bb 0f       	add	r27, r27
    1a08:	40 f4       	brcc	.+16     	; 0x1a1a <__fp_round+0x20>
    1a0a:	bf 2b       	or	r27, r31
    1a0c:	11 f4       	brne	.+4      	; 0x1a12 <__fp_round+0x18>
    1a0e:	60 ff       	sbrs	r22, 0
    1a10:	04 c0       	rjmp	.+8      	; 0x1a1a <__fp_round+0x20>
    1a12:	6f 5f       	subi	r22, 0xFF	; 255
    1a14:	7f 4f       	sbci	r23, 0xFF	; 255
    1a16:	8f 4f       	sbci	r24, 0xFF	; 255
    1a18:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1a:	08 95       	ret

00001a1c <__fp_split3>:
    1a1c:	57 fd       	sbrc	r21, 7
    1a1e:	90 58       	subi	r25, 0x80	; 128
    1a20:	44 0f       	add	r20, r20
    1a22:	55 1f       	adc	r21, r21
    1a24:	59 f0       	breq	.+22     	; 0x1a3c <__fp_splitA+0x10>
    1a26:	5f 3f       	cpi	r21, 0xFF	; 255
    1a28:	71 f0       	breq	.+28     	; 0x1a46 <__fp_splitA+0x1a>
    1a2a:	47 95       	ror	r20

00001a2c <__fp_splitA>:
    1a2c:	88 0f       	add	r24, r24
    1a2e:	97 fb       	bst	r25, 7
    1a30:	99 1f       	adc	r25, r25
    1a32:	61 f0       	breq	.+24     	; 0x1a4c <__fp_splitA+0x20>
    1a34:	9f 3f       	cpi	r25, 0xFF	; 255
    1a36:	79 f0       	breq	.+30     	; 0x1a56 <__fp_splitA+0x2a>
    1a38:	87 95       	ror	r24
    1a3a:	08 95       	ret
    1a3c:	12 16       	cp	r1, r18
    1a3e:	13 06       	cpc	r1, r19
    1a40:	14 06       	cpc	r1, r20
    1a42:	55 1f       	adc	r21, r21
    1a44:	f2 cf       	rjmp	.-28     	; 0x1a2a <__fp_split3+0xe>
    1a46:	46 95       	lsr	r20
    1a48:	f1 df       	rcall	.-30     	; 0x1a2c <__fp_splitA>
    1a4a:	08 c0       	rjmp	.+16     	; 0x1a5c <__fp_splitA+0x30>
    1a4c:	16 16       	cp	r1, r22
    1a4e:	17 06       	cpc	r1, r23
    1a50:	18 06       	cpc	r1, r24
    1a52:	99 1f       	adc	r25, r25
    1a54:	f1 cf       	rjmp	.-30     	; 0x1a38 <__fp_splitA+0xc>
    1a56:	86 95       	lsr	r24
    1a58:	71 05       	cpc	r23, r1
    1a5a:	61 05       	cpc	r22, r1
    1a5c:	08 94       	sec
    1a5e:	08 95       	ret

00001a60 <__fp_zero>:
    1a60:	e8 94       	clt

00001a62 <__fp_szero>:
    1a62:	bb 27       	eor	r27, r27
    1a64:	66 27       	eor	r22, r22
    1a66:	77 27       	eor	r23, r23
    1a68:	cb 01       	movw	r24, r22
    1a6a:	97 f9       	bld	r25, 7
    1a6c:	08 95       	ret

00001a6e <__gesf2>:
    1a6e:	8a df       	rcall	.-236    	; 0x1984 <__fp_cmp>
    1a70:	08 f4       	brcc	.+2      	; 0x1a74 <__gesf2+0x6>
    1a72:	8f ef       	ldi	r24, 0xFF	; 255
    1a74:	08 95       	ret

00001a76 <__mulsf3>:
    1a76:	0b d0       	rcall	.+22     	; 0x1a8e <__mulsf3x>
    1a78:	c0 cf       	rjmp	.-128    	; 0x19fa <__fp_round>
    1a7a:	b1 df       	rcall	.-158    	; 0x19de <__fp_pscA>
    1a7c:	28 f0       	brcs	.+10     	; 0x1a88 <__mulsf3+0x12>
    1a7e:	b6 df       	rcall	.-148    	; 0x19ec <__fp_pscB>
    1a80:	18 f0       	brcs	.+6      	; 0x1a88 <__mulsf3+0x12>
    1a82:	95 23       	and	r25, r21
    1a84:	09 f0       	breq	.+2      	; 0x1a88 <__mulsf3+0x12>
    1a86:	a2 cf       	rjmp	.-188    	; 0x19cc <__fp_inf>
    1a88:	a7 cf       	rjmp	.-178    	; 0x19d8 <__fp_nan>
    1a8a:	11 24       	eor	r1, r1
    1a8c:	ea cf       	rjmp	.-44     	; 0x1a62 <__fp_szero>

00001a8e <__mulsf3x>:
    1a8e:	c6 df       	rcall	.-116    	; 0x1a1c <__fp_split3>
    1a90:	a0 f3       	brcs	.-24     	; 0x1a7a <__mulsf3+0x4>

00001a92 <__mulsf3_pse>:
    1a92:	95 9f       	mul	r25, r21
    1a94:	d1 f3       	breq	.-12     	; 0x1a8a <__mulsf3+0x14>
    1a96:	95 0f       	add	r25, r21
    1a98:	50 e0       	ldi	r21, 0x00	; 0
    1a9a:	55 1f       	adc	r21, r21
    1a9c:	62 9f       	mul	r22, r18
    1a9e:	f0 01       	movw	r30, r0
    1aa0:	72 9f       	mul	r23, r18
    1aa2:	bb 27       	eor	r27, r27
    1aa4:	f0 0d       	add	r31, r0
    1aa6:	b1 1d       	adc	r27, r1
    1aa8:	63 9f       	mul	r22, r19
    1aaa:	aa 27       	eor	r26, r26
    1aac:	f0 0d       	add	r31, r0
    1aae:	b1 1d       	adc	r27, r1
    1ab0:	aa 1f       	adc	r26, r26
    1ab2:	64 9f       	mul	r22, r20
    1ab4:	66 27       	eor	r22, r22
    1ab6:	b0 0d       	add	r27, r0
    1ab8:	a1 1d       	adc	r26, r1
    1aba:	66 1f       	adc	r22, r22
    1abc:	82 9f       	mul	r24, r18
    1abe:	22 27       	eor	r18, r18
    1ac0:	b0 0d       	add	r27, r0
    1ac2:	a1 1d       	adc	r26, r1
    1ac4:	62 1f       	adc	r22, r18
    1ac6:	73 9f       	mul	r23, r19
    1ac8:	b0 0d       	add	r27, r0
    1aca:	a1 1d       	adc	r26, r1
    1acc:	62 1f       	adc	r22, r18
    1ace:	83 9f       	mul	r24, r19
    1ad0:	a0 0d       	add	r26, r0
    1ad2:	61 1d       	adc	r22, r1
    1ad4:	22 1f       	adc	r18, r18
    1ad6:	74 9f       	mul	r23, r20
    1ad8:	33 27       	eor	r19, r19
    1ada:	a0 0d       	add	r26, r0
    1adc:	61 1d       	adc	r22, r1
    1ade:	23 1f       	adc	r18, r19
    1ae0:	84 9f       	mul	r24, r20
    1ae2:	60 0d       	add	r22, r0
    1ae4:	21 1d       	adc	r18, r1
    1ae6:	82 2f       	mov	r24, r18
    1ae8:	76 2f       	mov	r23, r22
    1aea:	6a 2f       	mov	r22, r26
    1aec:	11 24       	eor	r1, r1
    1aee:	9f 57       	subi	r25, 0x7F	; 127
    1af0:	50 40       	sbci	r21, 0x00	; 0
    1af2:	8a f0       	brmi	.+34     	; 0x1b16 <__mulsf3_pse+0x84>
    1af4:	e1 f0       	breq	.+56     	; 0x1b2e <__mulsf3_pse+0x9c>
    1af6:	88 23       	and	r24, r24
    1af8:	4a f0       	brmi	.+18     	; 0x1b0c <__mulsf3_pse+0x7a>
    1afa:	ee 0f       	add	r30, r30
    1afc:	ff 1f       	adc	r31, r31
    1afe:	bb 1f       	adc	r27, r27
    1b00:	66 1f       	adc	r22, r22
    1b02:	77 1f       	adc	r23, r23
    1b04:	88 1f       	adc	r24, r24
    1b06:	91 50       	subi	r25, 0x01	; 1
    1b08:	50 40       	sbci	r21, 0x00	; 0
    1b0a:	a9 f7       	brne	.-22     	; 0x1af6 <__mulsf3_pse+0x64>
    1b0c:	9e 3f       	cpi	r25, 0xFE	; 254
    1b0e:	51 05       	cpc	r21, r1
    1b10:	70 f0       	brcs	.+28     	; 0x1b2e <__mulsf3_pse+0x9c>
    1b12:	5c cf       	rjmp	.-328    	; 0x19cc <__fp_inf>
    1b14:	a6 cf       	rjmp	.-180    	; 0x1a62 <__fp_szero>
    1b16:	5f 3f       	cpi	r21, 0xFF	; 255
    1b18:	ec f3       	brlt	.-6      	; 0x1b14 <__mulsf3_pse+0x82>
    1b1a:	98 3e       	cpi	r25, 0xE8	; 232
    1b1c:	dc f3       	brlt	.-10     	; 0x1b14 <__mulsf3_pse+0x82>
    1b1e:	86 95       	lsr	r24
    1b20:	77 95       	ror	r23
    1b22:	67 95       	ror	r22
    1b24:	b7 95       	ror	r27
    1b26:	f7 95       	ror	r31
    1b28:	e7 95       	ror	r30
    1b2a:	9f 5f       	subi	r25, 0xFF	; 255
    1b2c:	c1 f7       	brne	.-16     	; 0x1b1e <__mulsf3_pse+0x8c>
    1b2e:	fe 2b       	or	r31, r30
    1b30:	88 0f       	add	r24, r24
    1b32:	91 1d       	adc	r25, r1
    1b34:	96 95       	lsr	r25
    1b36:	87 95       	ror	r24
    1b38:	97 f9       	bld	r25, 7
    1b3a:	08 95       	ret

00001b3c <__umulhisi3>:
    1b3c:	a2 9f       	mul	r26, r18
    1b3e:	b0 01       	movw	r22, r0
    1b40:	b3 9f       	mul	r27, r19
    1b42:	c0 01       	movw	r24, r0
    1b44:	a3 9f       	mul	r26, r19
    1b46:	70 0d       	add	r23, r0
    1b48:	81 1d       	adc	r24, r1
    1b4a:	11 24       	eor	r1, r1
    1b4c:	91 1d       	adc	r25, r1
    1b4e:	b2 9f       	mul	r27, r18
    1b50:	70 0d       	add	r23, r0
    1b52:	81 1d       	adc	r24, r1
    1b54:	11 24       	eor	r1, r1
    1b56:	91 1d       	adc	r25, r1
    1b58:	08 95       	ret

00001b5a <memset>:
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	01 c0       	rjmp	.+2      	; 0x1b60 <memset+0x6>
    1b5e:	6d 93       	st	X+, r22
    1b60:	41 50       	subi	r20, 0x01	; 1
    1b62:	50 40       	sbci	r21, 0x00	; 0
    1b64:	e0 f7       	brcc	.-8      	; 0x1b5e <memset+0x4>
    1b66:	08 95       	ret

00001b68 <strncpy>:
    1b68:	fb 01       	movw	r30, r22
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	41 50       	subi	r20, 0x01	; 1
    1b6e:	50 40       	sbci	r21, 0x00	; 0
    1b70:	48 f0       	brcs	.+18     	; 0x1b84 <strncpy+0x1c>
    1b72:	01 90       	ld	r0, Z+
    1b74:	0d 92       	st	X+, r0
    1b76:	00 20       	and	r0, r0
    1b78:	c9 f7       	brne	.-14     	; 0x1b6c <strncpy+0x4>
    1b7a:	01 c0       	rjmp	.+2      	; 0x1b7e <strncpy+0x16>
    1b7c:	1d 92       	st	X+, r1
    1b7e:	41 50       	subi	r20, 0x01	; 1
    1b80:	50 40       	sbci	r21, 0x00	; 0
    1b82:	e0 f7       	brcc	.-8      	; 0x1b7c <strncpy+0x14>
    1b84:	08 95       	ret

00001b86 <_exit>:
    1b86:	f8 94       	cli

00001b88 <__stop_program>:
    1b88:	ff cf       	rjmp	.-2      	; 0x1b88 <__stop_program>
